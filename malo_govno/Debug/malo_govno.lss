
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000030e  00800100  00004894  00004928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004894  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014a  0080040e  0080040e  00004c36  2**0
                  ALLOC
  3 .debug_aranges 00000320  00000000  00000000  00004c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000746  00000000  00000000  00004f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002603  00000000  00000000  0000569c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b02  00000000  00000000  00007c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002a8f  00000000  00000000  000087a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000520  00000000  00000000  0000b230  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000960  00000000  00000000  0000b750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002d8  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	_delay_ms(2000);
	servo_set_umbrella_position(70);
	
}
void actuators_setup(void)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
	
	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       6:	00 00       	nop
uint32_t system_get_system_time(void)
{
	return sys_time;
}
uint8_t system_get_match_started(void)
{
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 1d 1d 	jmp	0x3a3a	; 0x3a3a <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c3       	rjmp	.+2044   	; 0x846 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 27 20 	jmp	0x404e	; 0x404e <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	14 e0       	ldi	r17, 0x04	; 4
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 e9       	ldi	r30, 0x94	; 148
      a8:	f8 e4       	ldi	r31, 0x48	; 72
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 30       	cpi	r26, 0x0E	; 14
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	15 e0       	ldi	r17, 0x05	; 5
      bc:	ae e0       	ldi	r26, 0x0E	; 14
      be:	b4 e0       	ldi	r27, 0x04	; 4
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a8 35       	cpi	r26, 0x58	; 88
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 48 24 	jmp	0x4890	; 0x4890 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "actuators.h"

int set = 1;
unsigned char received;
int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	2e 97       	sbiw	r28, 0x0e	; 14
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61

	system_init();
      e6:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	a8 ec       	ldi	r26, 0xC8	; 200
      f0:	b2 e4       	ldi	r27, 0x42	; 66
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	14 c0       	rjmp	.+40     	; 0x1ce <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	
	breakpoint();
     1ce:	0e 94 3a 1c 	call	0x3874	; 0x3874 <breakpoint>
     1d2:	15 c0       	rjmp	.+42     	; 0x1fe <main+0x12c>
	
	while(set)
	{
		if(sides_switch_check() == 0)
     1d4:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <sides_switch_check>
     1d8:	88 23       	and	r24, r24
     1da:	49 f4       	brne	.+18     	; 0x1ee <main+0x11c>
		{
			set = 2;
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 a1 02 	sts	0x02A1, r25
     1e4:	80 93 a0 02 	sts	0x02A0, r24
			greenside();	
     1e8:	0e 94 8e 09 	call	0x131c	; 0x131c <greenside>
     1ec:	08 c0       	rjmp	.+16     	; 0x1fe <main+0x12c>
		}
		else
		{
			set = 3;
     1ee:	83 e0       	ldi	r24, 0x03	; 3
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	90 93 a1 02 	sts	0x02A1, r25
     1f6:	80 93 a0 02 	sts	0x02A0, r24
			purpleside();	
     1fa:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <purpleside>
	system_init();
	_delay_ms(100);
	
	breakpoint();
	
	while(set)
     1fe:	80 91 a0 02 	lds	r24, 0x02A0
     202:	90 91 a1 02 	lds	r25, 0x02A1
     206:	00 97       	sbiw	r24, 0x00	; 0
     208:	29 f7       	brne	.-54     	; 0x1d4 <main+0x102>
			purpleside();	
		}
	}
	while(1)
	{
		if(set == 2)
     20a:	80 91 a0 02 	lds	r24, 0x02A0
     20e:	90 91 a1 02 	lds	r25, 0x02A1
     212:	82 30       	cpi	r24, 0x02	; 2
     214:	91 05       	cpc	r25, r1
     216:	19 f4       	brne	.+6      	; 0x21e <main+0x14c>
		{
			greenside();
     218:	0e 94 8e 09 	call	0x131c	; 0x131c <greenside>
     21c:	f6 cf       	rjmp	.-20     	; 0x20a <main+0x138>
		}
		else if(set == 3)
     21e:	80 91 a0 02 	lds	r24, 0x02A0
     222:	90 91 a1 02 	lds	r25, 0x02A1
     226:	83 30       	cpi	r24, 0x03	; 3
     228:	91 05       	cpc	r25, r1
     22a:	79 f7       	brne	.-34     	; 0x20a <main+0x138>
		{
			purpleside();
     22c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <purpleside>
     230:	ec cf       	rjmp	.-40     	; 0x20a <main+0x138>

00000232 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	df 93       	push	r29
     238:	cf 93       	push	r28
     23a:	00 d0       	rcall	.+0      	; 0x23c <servo_init+0xa>
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	9a 83       	std	Y+2, r25	; 0x02
     242:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     244:	ad e2       	ldi	r26, 0x2D	; 45
     246:	b0 e0       	ldi	r27, 0x00	; 0
     248:	ed e2       	ldi	r30, 0x2D	; 45
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	88 63       	ori	r24, 0x38	; 56
     250:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     252:	a4 e2       	ldi	r26, 0x24	; 36
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	e4 e2       	ldi	r30, 0x24	; 36
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	80 68       	ori	r24, 0x80	; 128
     25e:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     260:	e4 e9       	ldi	r30, 0x94	; 148
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	11 82       	std	Z+1, r1	; 0x01
     266:	10 82       	st	Z, r1
	TCNT0 = 0;
     268:	e6 e4       	ldi	r30, 0x46	; 70
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	10 82       	st	Z, r1

	OCR3A = 0;
     26e:	e8 e9       	ldi	r30, 0x98	; 152
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	11 82       	std	Z+1, r1	; 0x01
     274:	10 82       	st	Z, r1
	OCR3B = 0;
     276:	ea e9       	ldi	r30, 0x9A	; 154
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	11 82       	std	Z+1, r1	; 0x01
     27c:	10 82       	st	Z, r1
	OCR3C = 0;
     27e:	ec e9       	ldi	r30, 0x9C	; 156
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	11 82       	std	Z+1, r1	; 0x01
     284:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     286:	e0 e9       	ldi	r30, 0x90	; 144
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	8e eb       	ldi	r24, 0xBE	; 190
     28c:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     28e:	e1 e9       	ldi	r30, 0x91	; 145
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	8a e1       	ldi	r24, 0x1A	; 26
     294:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     296:	e4 e4       	ldi	r30, 0x44	; 68
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	8b e6       	ldi	r24, 0x6B	; 107
     29c:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     29e:	06 e9       	ldi	r16, 0x96	; 150
     2a0:	10 e0       	ldi	r17, 0x00	; 0
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	cc 01       	movw	r24, r24
     2a8:	a0 e0       	ldi	r26, 0x00	; 0
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	bc 01       	movw	r22, r24
     2ae:	cd 01       	movw	r24, r26
     2b0:	0e 94 09 22 	call	0x4412	; 0x4412 <__floatunsisf>
     2b4:	dc 01       	movw	r26, r24
     2b6:	cb 01       	movw	r24, r22
     2b8:	bc 01       	movw	r22, r24
     2ba:	cd 01       	movw	r24, r26
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	51 e4       	ldi	r21, 0x41	; 65
     2c4:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
     2c8:	dc 01       	movw	r26, r24
     2ca:	cb 01       	movw	r24, r22
     2cc:	9c 01       	movw	r18, r24
     2ce:	ad 01       	movw	r20, r26
     2d0:	60 e8       	ldi	r22, 0x80	; 128
     2d2:	76 e9       	ldi	r23, 0x96	; 150
     2d4:	88 e1       	ldi	r24, 0x18	; 24
     2d6:	9b e4       	ldi	r25, 0x4B	; 75
     2d8:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divsf3>
     2dc:	dc 01       	movw	r26, r24
     2de:	cb 01       	movw	r24, r22
     2e0:	bc 01       	movw	r22, r24
     2e2:	cd 01       	movw	r24, r26
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	5f e3       	ldi	r21, 0x3F	; 63
     2ec:	0e 94 08 21 	call	0x4210	; 0x4210 <__addsf3>
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	bc 01       	movw	r22, r24
     2f6:	cd 01       	movw	r24, r26
     2f8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
     2fc:	dc 01       	movw	r26, r24
     2fe:	cb 01       	movw	r24, r22
     300:	f8 01       	movw	r30, r16
     302:	91 83       	std	Z+1, r25	; 0x01
     304:	80 83       	st	Z, r24
}
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	cf 91       	pop	r28
     30c:	df 91       	pop	r29
     30e:	1f 91       	pop	r17
     310:	0f 91       	pop	r16
     312:	08 95       	ret

00000314 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	df 93       	push	r29
     31e:	cf 93       	push	r28
     320:	00 d0       	rcall	.+0      	; 0x322 <servo_set_duty_cycle_umbrella+0xe>
     322:	00 d0       	rcall	.+0      	; 0x324 <servo_set_duty_cycle_umbrella+0x10>
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	9c 83       	std	Y+4, r25	; 0x04
     32a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     32c:	e6 e9       	ldi	r30, 0x96	; 150
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	91 81       	ldd	r25, Z+1	; 0x01
     334:	cc 01       	movw	r24, r24
     336:	a0 e0       	ldi	r26, 0x00	; 0
     338:	b0 e0       	ldi	r27, 0x00	; 0
     33a:	bc 01       	movw	r22, r24
     33c:	cd 01       	movw	r24, r26
     33e:	0e 94 09 22 	call	0x4412	; 0x4412 <__floatunsisf>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22
     346:	bc 01       	movw	r22, r24
     348:	cd 01       	movw	r24, r26
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	4f e7       	ldi	r20, 0x7F	; 127
     350:	53 e4       	ldi	r21, 0x43	; 67
     352:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divsf3>
     356:	dc 01       	movw	r26, r24
     358:	cb 01       	movw	r24, r22
     35a:	7c 01       	movw	r14, r24
     35c:	8d 01       	movw	r16, r26
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	9c 81       	ldd	r25, Y+4	; 0x04
     362:	aa 27       	eor	r26, r26
     364:	97 fd       	sbrc	r25, 7
     366:	a0 95       	com	r26
     368:	ba 2f       	mov	r27, r26
     36a:	bc 01       	movw	r22, r24
     36c:	cd 01       	movw	r24, r26
     36e:	0e 94 0b 22 	call	0x4416	; 0x4416 <__floatsisf>
     372:	9b 01       	movw	r18, r22
     374:	ac 01       	movw	r20, r24
     376:	c8 01       	movw	r24, r16
     378:	b7 01       	movw	r22, r14
     37a:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	bc 01       	movw	r22, r24
     384:	cd 01       	movw	r24, r26
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e0       	ldi	r20, 0x00	; 0
     38c:	5f e3       	ldi	r21, 0x3F	; 63
     38e:	0e 94 08 21 	call	0x4210	; 0x4210 <__addsf3>
     392:	dc 01       	movw	r26, r24
     394:	cb 01       	movw	r24, r22
     396:	bc 01       	movw	r22, r24
     398:	cd 01       	movw	r24, r26
     39a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
     39e:	dc 01       	movw	r26, r24
     3a0:	cb 01       	movw	r24, r22
     3a2:	9a 83       	std	Y+2, r25	; 0x02
     3a4:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     3a6:	e9 e9       	ldi	r30, 0x99	; 153
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	89 2f       	mov	r24, r25
     3b0:	99 27       	eor	r25, r25
     3b2:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     3b4:	e8 e9       	ldi	r30, 0x98	; 152
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	80 83       	st	Z, r24
}
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	cf 91       	pop	r28
     3c6:	df 91       	pop	r29
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	08 95       	ret

000003d2 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	df 93       	push	r29
     3dc:	cf 93       	push	r28
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <servo_set_duty_cycle_door+0xe>
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <servo_set_duty_cycle_door+0x10>
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     3ea:	e6 e9       	ldi	r30, 0x96	; 150
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	91 81       	ldd	r25, Z+1	; 0x01
     3f2:	cc 01       	movw	r24, r24
     3f4:	a0 e0       	ldi	r26, 0x00	; 0
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	bc 01       	movw	r22, r24
     3fa:	cd 01       	movw	r24, r26
     3fc:	0e 94 09 22 	call	0x4412	; 0x4412 <__floatunsisf>
     400:	dc 01       	movw	r26, r24
     402:	cb 01       	movw	r24, r22
     404:	bc 01       	movw	r22, r24
     406:	cd 01       	movw	r24, r26
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	4f e7       	ldi	r20, 0x7F	; 127
     40e:	53 e4       	ldi	r21, 0x43	; 67
     410:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divsf3>
     414:	dc 01       	movw	r26, r24
     416:	cb 01       	movw	r24, r22
     418:	7c 01       	movw	r14, r24
     41a:	8d 01       	movw	r16, r26
     41c:	8b 81       	ldd	r24, Y+3	; 0x03
     41e:	9c 81       	ldd	r25, Y+4	; 0x04
     420:	aa 27       	eor	r26, r26
     422:	97 fd       	sbrc	r25, 7
     424:	a0 95       	com	r26
     426:	ba 2f       	mov	r27, r26
     428:	bc 01       	movw	r22, r24
     42a:	cd 01       	movw	r24, r26
     42c:	0e 94 0b 22 	call	0x4416	; 0x4416 <__floatsisf>
     430:	9b 01       	movw	r18, r22
     432:	ac 01       	movw	r20, r24
     434:	c8 01       	movw	r24, r16
     436:	b7 01       	movw	r22, r14
     438:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	bc 01       	movw	r22, r24
     442:	cd 01       	movw	r24, r26
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	5f e3       	ldi	r21, 0x3F	; 63
     44c:	0e 94 08 21 	call	0x4210	; 0x4210 <__addsf3>
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	9a 83       	std	Y+2, r25	; 0x02
     462:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     464:	eb e9       	ldi	r30, 0x9B	; 155
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	9a 81       	ldd	r25, Y+2	; 0x02
     46c:	89 2f       	mov	r24, r25
     46e:	99 27       	eor	r25, r25
     470:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     472:	ea e9       	ldi	r30, 0x9A	; 154
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	80 83       	st	Z, r24
}
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	cf 91       	pop	r28
     484:	df 91       	pop	r29
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	ff 90       	pop	r15
     48c:	ef 90       	pop	r14
     48e:	08 95       	ret

00000490 <servo_set_duty_cycle_left_grabber>:
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	df 93       	push	r29
     49a:	cf 93       	push	r28
     49c:	00 d0       	rcall	.+0      	; 0x49e <servo_set_duty_cycle_left_grabber+0xe>
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <servo_set_duty_cycle_left_grabber+0x10>
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	9c 83       	std	Y+4, r25	; 0x04
     4a6:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     4a8:	e6 e9       	ldi	r30, 0x96	; 150
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	91 81       	ldd	r25, Z+1	; 0x01
     4b0:	cc 01       	movw	r24, r24
     4b2:	a0 e0       	ldi	r26, 0x00	; 0
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	bc 01       	movw	r22, r24
     4b8:	cd 01       	movw	r24, r26
     4ba:	0e 94 09 22 	call	0x4412	; 0x4412 <__floatunsisf>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	bc 01       	movw	r22, r24
     4c4:	cd 01       	movw	r24, r26
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	4f e7       	ldi	r20, 0x7F	; 127
     4cc:	53 e4       	ldi	r21, 0x43	; 67
     4ce:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divsf3>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	7c 01       	movw	r14, r24
     4d8:	8d 01       	movw	r16, r26
     4da:	8b 81       	ldd	r24, Y+3	; 0x03
     4dc:	9c 81       	ldd	r25, Y+4	; 0x04
     4de:	aa 27       	eor	r26, r26
     4e0:	97 fd       	sbrc	r25, 7
     4e2:	a0 95       	com	r26
     4e4:	ba 2f       	mov	r27, r26
     4e6:	bc 01       	movw	r22, r24
     4e8:	cd 01       	movw	r24, r26
     4ea:	0e 94 0b 22 	call	0x4416	; 0x4416 <__floatsisf>
     4ee:	9b 01       	movw	r18, r22
     4f0:	ac 01       	movw	r20, r24
     4f2:	c8 01       	movw	r24, r16
     4f4:	b7 01       	movw	r22, r14
     4f6:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	bc 01       	movw	r22, r24
     500:	cd 01       	movw	r24, r26
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	5f e3       	ldi	r21, 0x3F	; 63
     50a:	0e 94 08 21 	call	0x4210	; 0x4210 <__addsf3>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	bc 01       	movw	r22, r24
     514:	cd 01       	movw	r24, r26
     516:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	9a 83       	std	Y+2, r25	; 0x02
     520:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     522:	ed e9       	ldi	r30, 0x9D	; 157
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	9a 81       	ldd	r25, Y+2	; 0x02
     52a:	89 2f       	mov	r24, r25
     52c:	99 27       	eor	r25, r25
     52e:	80 83       	st	Z, r24
	OCR3CL = temp & 0xFF;
     530:	ec e9       	ldi	r30, 0x9C	; 156
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	80 83       	st	Z, r24
}
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	cf 91       	pop	r28
     542:	df 91       	pop	r29
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	08 95       	ret

0000054e <servo_set_umbrella_position>:
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	0f 92       	push	r0
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	99 27       	eor	r25, r25
     55e:	87 fd       	sbrc	r24, 7
     560:	90 95       	com	r25
     562:	a9 2f       	mov	r26, r25
     564:	b9 2f       	mov	r27, r25
     566:	bc 01       	movw	r22, r24
     568:	cd 01       	movw	r24, r26
     56a:	0e 94 0b 22 	call	0x4416	; 0x4416 <__floatsisf>
     56e:	dc 01       	movw	r26, r24
     570:	cb 01       	movw	r24, r22
     572:	bc 01       	movw	r22, r24
     574:	cd 01       	movw	r24, r26
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	44 eb       	ldi	r20, 0xB4	; 180
     57c:	52 e4       	ldi	r21, 0x42	; 66
     57e:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divsf3>
     582:	dc 01       	movw	r26, r24
     584:	cb 01       	movw	r24, r22
     586:	bc 01       	movw	r22, r24
     588:	cd 01       	movw	r24, r26
     58a:	26 e6       	ldi	r18, 0x66	; 102
     58c:	36 e6       	ldi	r19, 0x66	; 102
     58e:	46 e3       	ldi	r20, 0x36	; 54
     590:	51 ec       	ldi	r21, 0xC1	; 193
     592:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	bc 01       	movw	r22, r24
     59c:	cd 01       	movw	r24, r26
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	4c e6       	ldi	r20, 0x6C	; 108
     5a4:	53 e4       	ldi	r21, 0x43	; 67
     5a6:	0e 94 08 21 	call	0x4210	; 0x4210 <__addsf3>
     5aa:	dc 01       	movw	r26, r24
     5ac:	cb 01       	movw	r24, r22
     5ae:	9c 01       	movw	r18, r24
     5b0:	ad 01       	movw	r20, r26
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	8f e7       	ldi	r24, 0x7F	; 127
     5b8:	93 e4       	ldi	r25, 0x43	; 67
     5ba:	0e 94 07 21 	call	0x420e	; 0x420e <__subsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <__fixsfsi>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	a2 de       	rcall	.-700    	; 0x314 <servo_set_duty_cycle_umbrella>
}
     5d0:	0f 90       	pop	r0
     5d2:	cf 91       	pop	r28
     5d4:	df 91       	pop	r29
     5d6:	08 95       	ret

000005d8 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     5d8:	df 93       	push	r29
     5da:	cf 93       	push	r28
     5dc:	0f 92       	push	r0
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	99 27       	eor	r25, r25
     5e8:	87 fd       	sbrc	r24, 7
     5ea:	90 95       	com	r25
     5ec:	a9 2f       	mov	r26, r25
     5ee:	b9 2f       	mov	r27, r25
     5f0:	bc 01       	movw	r22, r24
     5f2:	cd 01       	movw	r24, r26
     5f4:	0e 94 0b 22 	call	0x4416	; 0x4416 <__floatsisf>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	bc 01       	movw	r22, r24
     5fe:	cd 01       	movw	r24, r26
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	44 eb       	ldi	r20, 0xB4	; 180
     606:	52 e4       	ldi	r21, 0x42	; 66
     608:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divsf3>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	bc 01       	movw	r22, r24
     612:	cd 01       	movw	r24, r26
     614:	26 e6       	ldi	r18, 0x66	; 102
     616:	36 e6       	ldi	r19, 0x66	; 102
     618:	46 e3       	ldi	r20, 0x36	; 54
     61a:	51 ec       	ldi	r21, 0xC1	; 193
     61c:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
     620:	dc 01       	movw	r26, r24
     622:	cb 01       	movw	r24, r22
     624:	bc 01       	movw	r22, r24
     626:	cd 01       	movw	r24, r26
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	4c e6       	ldi	r20, 0x6C	; 108
     62e:	53 e4       	ldi	r21, 0x43	; 67
     630:	0e 94 08 21 	call	0x4210	; 0x4210 <__addsf3>
     634:	dc 01       	movw	r26, r24
     636:	cb 01       	movw	r24, r22
     638:	9c 01       	movw	r18, r24
     63a:	ad 01       	movw	r20, r26
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	8f e7       	ldi	r24, 0x7F	; 127
     642:	93 e4       	ldi	r25, 0x43	; 67
     644:	0e 94 07 21 	call	0x420e	; 0x420e <__subsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <__fixsfsi>
     654:	dc 01       	movw	r26, r24
     656:	cb 01       	movw	r24, r22
     658:	bc de       	rcall	.-648    	; 0x3d2 <servo_set_duty_cycle_door>
}
     65a:	0f 90       	pop	r0
     65c:	cf 91       	pop	r28
     65e:	df 91       	pop	r29
     660:	08 95       	ret

00000662 <servo_set_left_grabber_position>:
void servo_set_left_grabber_position(int8_t angle)//down 89 up -20
{
     662:	df 93       	push	r29
     664:	cf 93       	push	r28
     666:	0f 92       	push	r0
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_left_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	99 27       	eor	r25, r25
     672:	87 fd       	sbrc	r24, 7
     674:	90 95       	com	r25
     676:	a9 2f       	mov	r26, r25
     678:	b9 2f       	mov	r27, r25
     67a:	bc 01       	movw	r22, r24
     67c:	cd 01       	movw	r24, r26
     67e:	0e 94 0b 22 	call	0x4416	; 0x4416 <__floatsisf>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	bc 01       	movw	r22, r24
     688:	cd 01       	movw	r24, r26
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	44 eb       	ldi	r20, 0xB4	; 180
     690:	52 e4       	ldi	r21, 0x42	; 66
     692:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__divsf3>
     696:	dc 01       	movw	r26, r24
     698:	cb 01       	movw	r24, r22
     69a:	bc 01       	movw	r22, r24
     69c:	cd 01       	movw	r24, r26
     69e:	26 e6       	ldi	r18, 0x66	; 102
     6a0:	36 e6       	ldi	r19, 0x66	; 102
     6a2:	46 e3       	ldi	r20, 0x36	; 54
     6a4:	51 ec       	ldi	r21, 0xC1	; 193
     6a6:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
     6aa:	dc 01       	movw	r26, r24
     6ac:	cb 01       	movw	r24, r22
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	4c e6       	ldi	r20, 0x6C	; 108
     6b8:	53 e4       	ldi	r21, 0x43	; 67
     6ba:	0e 94 08 21 	call	0x4210	; 0x4210 <__addsf3>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	9c 01       	movw	r18, r24
     6c4:	ad 01       	movw	r20, r26
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	8f e7       	ldi	r24, 0x7F	; 127
     6cc:	93 e4       	ldi	r25, 0x43	; 67
     6ce:	0e 94 07 21 	call	0x420e	; 0x420e <__subsf3>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	bc 01       	movw	r22, r24
     6d8:	cd 01       	movw	r24, r26
     6da:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <__fixsfsi>
     6de:	dc 01       	movw	r26, r24
     6e0:	cb 01       	movw	r24, r22
     6e2:	d6 de       	rcall	.-596    	; 0x490 <servo_set_duty_cycle_left_grabber>
}
     6e4:	0f 90       	pop	r0
     6e6:	cf 91       	pop	r28
     6e8:	df 91       	pop	r29
     6ea:	08 95       	ret

000006ec <servo_set_right_grabber_position>:
void servo_set_right_grabber_position(int8_t angle)//UP 100 DOWN 250 or otherwise I DONT FUCKING KNOW
{
     6ec:	df 93       	push	r29
     6ee:	cf 93       	push	r28
     6f0:	0f 92       	push	r0
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = angle;	
     6f8:	e7 e4       	ldi	r30, 0x47	; 71
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	80 83       	st	Z, r24
}
     700:	0f 90       	pop	r0
     702:	cf 91       	pop	r28
     704:	df 91       	pop	r29
     706:	08 95       	ret

00000708 <servo_set_grabbers_up>:
void servo_set_grabbers_up(void)
{
     708:	df 93       	push	r29
     70a:	cf 93       	push	r28
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(-10);
     710:	86 ef       	ldi	r24, 0xF6	; 246
     712:	a7 df       	rcall	.-178    	; 0x662 <servo_set_left_grabber_position>
	servo_set_right_grabber_position(80);//200 is for the half step
     714:	80 e5       	ldi	r24, 0x50	; 80
     716:	ea df       	rcall	.-44     	; 0x6ec <servo_set_right_grabber_position>
}
     718:	cf 91       	pop	r28
     71a:	df 91       	pop	r29
     71c:	08 95       	ret

0000071e <servo_set_grabbers_down>:
void servo_set_grabbers_down(void)
{
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(89);
     726:	89 e5       	ldi	r24, 0x59	; 89
     728:	9c df       	rcall	.-200    	; 0x662 <servo_set_left_grabber_position>
	servo_set_right_grabber_position(250);
     72a:	8a ef       	ldi	r24, 0xFA	; 250
     72c:	df df       	rcall	.-66     	; 0x6ec <servo_set_right_grabber_position>
}
     72e:	cf 91       	pop	r28
     730:	df 91       	pop	r29
     732:	08 95       	ret

00000734 <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     734:	df 93       	push	r29
     736:	cf 93       	push	r28
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	2e 97       	sbiw	r28, 0x0e	; 14
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     748:	8a e5       	ldi	r24, 0x5A	; 90
     74a:	46 df       	rcall	.-372    	; 0x5d8 <servo_set_door_position>
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	aa ef       	ldi	r26, 0xFA	; 250
     752:	b4 e4       	ldi	r27, 0x44	; 68
     754:	8b 87       	std	Y+11, r24	; 0x0b
     756:	9c 87       	std	Y+12, r25	; 0x0c
     758:	ad 87       	std	Y+13, r26	; 0x0d
     75a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     75c:	6b 85       	ldd	r22, Y+11	; 0x0b
     75e:	7c 85       	ldd	r23, Y+12	; 0x0c
     760:	8d 85       	ldd	r24, Y+13	; 0x0d
     762:	9e 85       	ldd	r25, Y+14	; 0x0e
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e4       	ldi	r19, 0x40	; 64
     768:	4c e1       	ldi	r20, 0x1C	; 28
     76a:	55 e4       	ldi	r21, 0x45	; 69
     76c:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	8f 83       	std	Y+7, r24	; 0x07
     776:	98 87       	std	Y+8, r25	; 0x08
     778:	a9 87       	std	Y+9, r26	; 0x09
     77a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     77c:	6f 81       	ldd	r22, Y+7	; 0x07
     77e:	78 85       	ldd	r23, Y+8	; 0x08
     780:	89 85       	ldd	r24, Y+9	; 0x09
     782:	9a 85       	ldd	r25, Y+10	; 0x0a
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e8       	ldi	r20, 0x80	; 128
     78a:	5f e3       	ldi	r21, 0x3F	; 63
     78c:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
     790:	88 23       	and	r24, r24
     792:	2c f4       	brge	.+10     	; 0x79e <actuators_umbrella+0x6a>
		__ticks = 1;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	9e 83       	std	Y+6, r25	; 0x06
     79a:	8d 83       	std	Y+5, r24	; 0x05
     79c:	3f c0       	rjmp	.+126    	; 0x81c <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     79e:	6f 81       	ldd	r22, Y+7	; 0x07
     7a0:	78 85       	ldd	r23, Y+8	; 0x08
     7a2:	89 85       	ldd	r24, Y+9	; 0x09
     7a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	3f ef       	ldi	r19, 0xFF	; 255
     7aa:	4f e7       	ldi	r20, 0x7F	; 127
     7ac:	57 e4       	ldi	r21, 0x47	; 71
     7ae:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
     7b2:	18 16       	cp	r1, r24
     7b4:	4c f5       	brge	.+82     	; 0x808 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b6:	6b 85       	ldd	r22, Y+11	; 0x0b
     7b8:	7c 85       	ldd	r23, Y+12	; 0x0c
     7ba:	8d 85       	ldd	r24, Y+13	; 0x0d
     7bc:	9e 85       	ldd	r25, Y+14	; 0x0e
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e2       	ldi	r20, 0x20	; 32
     7c4:	51 e4       	ldi	r21, 0x41	; 65
     7c6:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
     7ca:	dc 01       	movw	r26, r24
     7cc:	cb 01       	movw	r24, r22
     7ce:	bc 01       	movw	r22, r24
     7d0:	cd 01       	movw	r24, r26
     7d2:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	9e 83       	std	Y+6, r25	; 0x06
     7dc:	8d 83       	std	Y+5, r24	; 0x05
     7de:	0f c0       	rjmp	.+30     	; 0x7fe <actuators_umbrella+0xca>
     7e0:	8a ef       	ldi	r24, 0xFA	; 250
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	9c 83       	std	Y+4, r25	; 0x04
     7e6:	8b 83       	std	Y+3, r24	; 0x03
     7e8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ea:	9c 81       	ldd	r25, Y+4	; 0x04
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <actuators_umbrella+0xb8>
     7f0:	9c 83       	std	Y+4, r25	; 0x04
     7f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f4:	8d 81       	ldd	r24, Y+5	; 0x05
     7f6:	9e 81       	ldd	r25, Y+6	; 0x06
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	9e 83       	std	Y+6, r25	; 0x06
     7fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7fe:	8d 81       	ldd	r24, Y+5	; 0x05
     800:	9e 81       	ldd	r25, Y+6	; 0x06
     802:	00 97       	sbiw	r24, 0x00	; 0
     804:	69 f7       	brne	.-38     	; 0x7e0 <actuators_umbrella+0xac>
     806:	14 c0       	rjmp	.+40     	; 0x830 <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     808:	6f 81       	ldd	r22, Y+7	; 0x07
     80a:	78 85       	ldd	r23, Y+8	; 0x08
     80c:	89 85       	ldd	r24, Y+9	; 0x09
     80e:	9a 85       	ldd	r25, Y+10	; 0x0a
     810:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	9e 83       	std	Y+6, r25	; 0x06
     81a:	8d 83       	std	Y+5, r24	; 0x05
     81c:	8d 81       	ldd	r24, Y+5	; 0x05
     81e:	9e 81       	ldd	r25, Y+6	; 0x06
     820:	9a 83       	std	Y+2, r25	; 0x02
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <actuators_umbrella+0xf4>
     82c:	9a 83       	std	Y+2, r25	; 0x02
     82e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	servo_set_umbrella_position(70);
     830:	86 e4       	ldi	r24, 0x46	; 70
     832:	8d de       	rcall	.-742    	; 0x54e <servo_set_umbrella_position>
	
}
     834:	2e 96       	adiw	r28, 0x0e	; 14
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	cf 91       	pop	r28
     842:	df 91       	pop	r29
     844:	08 95       	ret

00000846 <__vector_18>:
     846:	1f 92       	push	r1
     848:	0f 92       	push	r0
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	0f 92       	push	r0
     84e:	00 90 5b 00 	lds	r0, 0x005B
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	8f 93       	push	r24
     860:	9f 93       	push	r25
     862:	af 93       	push	r26
     864:	bf 93       	push	r27
     866:	ef 93       	push	r30
     868:	ff 93       	push	r31
     86a:	df 93       	push	r29
     86c:	cf 93       	push	r28
     86e:	00 d0       	rcall	.+0      	; 0x870 <__vector_18+0x2a>
     870:	00 d0       	rcall	.+0      	; 0x872 <__vector_18+0x2c>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	ed ee       	ldi	r30, 0xED	; 237
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	8c 83       	std	Y+4, r24	; 0x04
     87e:	1b 82       	std	Y+3, r1	; 0x03
     880:	9c c0       	rjmp	.+312    	; 0x9ba <__vector_18+0x174>
     882:	ed ee       	ldi	r30, 0xED	; 237
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	8b 81       	ldd	r24, Y+3	; 0x03
     888:	82 95       	swap	r24
     88a:	80 7f       	andi	r24, 0xF0	; 240
     88c:	80 83       	st	Z, r24
     88e:	ee ee       	ldi	r30, 0xEE	; 238
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	82 95       	swap	r24
     896:	86 95       	lsr	r24
     898:	87 70       	andi	r24, 0x07	; 7
     89a:	88 2f       	mov	r24, r24
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	81 70       	andi	r24, 0x01	; 1
     8a0:	90 70       	andi	r25, 0x00	; 0
     8a2:	88 23       	and	r24, r24
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <__vector_18+0x62>
     8a6:	6e c0       	rjmp	.+220    	; 0x984 <__vector_18+0x13e>
     8a8:	ef ee       	ldi	r30, 0xEF	; 239
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 e8       	ldi	r24, 0x80	; 128
     8ae:	80 83       	st	Z, r24
     8b0:	ae ee       	ldi	r26, 0xEE	; 238
     8b2:	b0 e0       	ldi	r27, 0x00	; 0
     8b4:	ee ee       	ldi	r30, 0xEE	; 238
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	8f 7d       	andi	r24, 0xDF	; 223
     8bc:	8c 93       	st	X, r24
     8be:	e2 ef       	ldi	r30, 0xF2	; 242
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	82 95       	swap	r24
     8c6:	86 95       	lsr	r24
     8c8:	87 70       	andi	r24, 0x07	; 7
     8ca:	28 2f       	mov	r18, r24
     8cc:	e3 ef       	ldi	r30, 0xF3	; 243
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	88 2f       	mov	r24, r24
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	82 2b       	or	r24, r18
     8e4:	8a 83       	std	Y+2, r24	; 0x02
     8e6:	19 82       	std	Y+1, r1	; 0x01
     8e8:	2a c0       	rjmp	.+84     	; 0x93e <__vector_18+0xf8>
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	28 2f       	mov	r18, r24
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	82 1b       	sub	r24, r18
     8f6:	93 0b       	sbc	r25, r19
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	90 95       	com	r25
     8fe:	81 95       	neg	r24
     900:	9f 4f       	sbci	r25, 0xFF	; 255
     902:	fc 01       	movw	r30, r24
     904:	e2 5f       	subi	r30, 0xF2	; 242
     906:	fb 4f       	sbci	r31, 0xFB	; 251
     908:	40 81       	ld	r20, Z
     90a:	51 81       	ldd	r21, Z+1	; 0x01
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	88 2f       	mov	r24, r24
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	fc 01       	movw	r30, r24
     916:	ee 5d       	subi	r30, 0xDE	; 222
     918:	fb 4f       	sbci	r31, 0xFB	; 251
     91a:	80 81       	ld	r24, Z
     91c:	28 2f       	mov	r18, r24
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	88 2f       	mov	r24, r24
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	82 0f       	add	r24, r18
     928:	93 1f       	adc	r25, r19
     92a:	da 01       	movw	r26, r20
     92c:	a8 0f       	add	r26, r24
     92e:	b9 1f       	adc	r27, r25
     930:	ea ef       	ldi	r30, 0xFA	; 250
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8c 93       	st	X, r24
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	8f 5f       	subi	r24, 0xFF	; 255
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	88 30       	cpi	r24, 0x08	; 8
     942:	98 f2       	brcs	.-90     	; 0x8ea <__vector_18+0xa4>
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	88 2f       	mov	r24, r24
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	fc 01       	movw	r30, r24
     94e:	ee 5d       	subi	r30, 0xDE	; 222
     950:	fb 4f       	sbci	r31, 0xFB	; 251
     952:	80 81       	ld	r24, Z
     954:	8f 5f       	subi	r24, 0xFF	; 255
     956:	80 83       	st	Z, r24
     958:	80 81       	ld	r24, Z
     95a:	85 30       	cpi	r24, 0x05	; 5
     95c:	41 f4       	brne	.+16     	; 0x96e <__vector_18+0x128>
     95e:	8a 81       	ldd	r24, Y+2	; 0x02
     960:	88 2f       	mov	r24, r24
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	fc 01       	movw	r30, r24
     968:	ee 5d       	subi	r30, 0xDE	; 222
     96a:	fb 4f       	sbci	r31, 0xFB	; 251
     96c:	10 82       	st	Z, r1
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	88 2f       	mov	r24, r24
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	fc 01       	movw	r30, r24
     978:	ea 5c       	subi	r30, 0xCA	; 202
     97a:	fb 4f       	sbci	r31, 0xFB	; 251
     97c:	80 81       	ld	r24, Z
     97e:	8f 5f       	subi	r24, 0xFF	; 255
     980:	80 83       	st	Z, r24
     982:	1f c0       	rjmp	.+62     	; 0x9c2 <__vector_18+0x17c>
     984:	ee ee       	ldi	r30, 0xEE	; 238
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z
     98a:	82 95       	swap	r24
     98c:	86 95       	lsr	r24
     98e:	86 95       	lsr	r24
     990:	83 70       	andi	r24, 0x03	; 3
     992:	88 2f       	mov	r24, r24
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	81 70       	andi	r24, 0x01	; 1
     998:	90 70       	andi	r25, 0x00	; 0
     99a:	88 23       	and	r24, r24
     99c:	59 f0       	breq	.+22     	; 0x9b4 <__vector_18+0x16e>
     99e:	ef ee       	ldi	r30, 0xEF	; 239
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	10 82       	st	Z, r1
     9a4:	ae ee       	ldi	r26, 0xEE	; 238
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	ee ee       	ldi	r30, 0xEE	; 238
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	8f 7b       	andi	r24, 0xBF	; 191
     9b0:	8c 93       	st	X, r24
     9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <__vector_18+0x17c>
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	8f 5f       	subi	r24, 0xFF	; 255
     9b8:	8b 83       	std	Y+3, r24	; 0x03
     9ba:	8b 81       	ldd	r24, Y+3	; 0x03
     9bc:	8f 30       	cpi	r24, 0x0F	; 15
     9be:	08 f4       	brcc	.+2      	; 0x9c2 <__vector_18+0x17c>
     9c0:	60 cf       	rjmp	.-320    	; 0x882 <__vector_18+0x3c>
     9c2:	ed ee       	ldi	r30, 0xED	; 237
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	8c 81       	ldd	r24, Y+4	; 0x04
     9c8:	80 83       	st	Z, r24
     9ca:	aa ed       	ldi	r26, 0xDA	; 218
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	ea ed       	ldi	r30, 0xDA	; 218
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	8c 93       	st	X, r24
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	cf 91       	pop	r28
     9e0:	df 91       	pop	r29
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	bf 91       	pop	r27
     9e8:	af 91       	pop	r26
     9ea:	9f 91       	pop	r25
     9ec:	8f 91       	pop	r24
     9ee:	5f 91       	pop	r21
     9f0:	4f 91       	pop	r20
     9f2:	3f 91       	pop	r19
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	00 92 5b 00 	sts	0x005B, r0
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <CAN_InitModule>:
     a06:	df 93       	push	r29
     a08:	cf 93       	push	r28
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <CAN_InitModule+0x6>
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	e8 ed       	ldi	r30, 0xD8	; 216
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 83       	st	Z, r24
     a18:	1a 82       	std	Y+2, r1	; 0x02
     a1a:	32 c0       	rjmp	.+100    	; 0xa80 <CAN_InitModule+0x7a>
     a1c:	ed ee       	ldi	r30, 0xED	; 237
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	8a 81       	ldd	r24, Y+2	; 0x02
     a22:	82 95       	swap	r24
     a24:	80 7f       	andi	r24, 0xF0	; 240
     a26:	80 83       	st	Z, r24
     a28:	ee ee       	ldi	r30, 0xEE	; 238
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	10 82       	st	Z, r1
     a2e:	ef ee       	ldi	r30, 0xEF	; 239
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	10 82       	st	Z, r1
     a34:	e3 ef       	ldi	r30, 0xF3	; 243
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	10 82       	st	Z, r1
     a3a:	e2 ef       	ldi	r30, 0xF2	; 242
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	10 82       	st	Z, r1
     a40:	e1 ef       	ldi	r30, 0xF1	; 241
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	10 82       	st	Z, r1
     a46:	e0 ef       	ldi	r30, 0xF0	; 240
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	10 82       	st	Z, r1
     a4c:	e7 ef       	ldi	r30, 0xF7	; 247
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	10 82       	st	Z, r1
     a52:	e6 ef       	ldi	r30, 0xF6	; 246
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	10 82       	st	Z, r1
     a58:	e5 ef       	ldi	r30, 0xF5	; 245
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	10 82       	st	Z, r1
     a5e:	e4 ef       	ldi	r30, 0xF4	; 244
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	10 82       	st	Z, r1
     a64:	19 82       	std	Y+1, r1	; 0x01
     a66:	06 c0       	rjmp	.+12     	; 0xa74 <CAN_InitModule+0x6e>
     a68:	ea ef       	ldi	r30, 0xFA	; 250
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	10 82       	st	Z, r1
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	8f 5f       	subi	r24, 0xFF	; 255
     a72:	89 83       	std	Y+1, r24	; 0x01
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	88 30       	cpi	r24, 0x08	; 8
     a78:	b8 f3       	brcs	.-18     	; 0xa68 <CAN_InitModule+0x62>
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	8f 5f       	subi	r24, 0xFF	; 255
     a7e:	8a 83       	std	Y+2, r24	; 0x02
     a80:	8a 81       	ldd	r24, Y+2	; 0x02
     a82:	8f 30       	cpi	r24, 0x0F	; 15
     a84:	58 f2       	brcs	.-106    	; 0xa1c <CAN_InitModule+0x16>
     a86:	e8 ed       	ldi	r30, 0xD8	; 216
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	80 83       	st	Z, r24
     a8e:	e2 ee       	ldi	r30, 0xE2	; 226
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	80 83       	st	Z, r24
     a96:	e3 ee       	ldi	r30, 0xE3	; 227
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	80 83       	st	Z, r24
     a9e:	e4 ee       	ldi	r30, 0xE4	; 228
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	8e e5       	ldi	r24, 0x5E	; 94
     aa4:	80 83       	st	Z, r24
     aa6:	e5 ee       	ldi	r30, 0xE5	; 229
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	10 82       	st	Z, r1
     aac:	eb ed       	ldi	r30, 0xDB	; 219
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 eb       	ldi	r24, 0xB0	; 176
     ab2:	80 83       	st	Z, r24
     ab4:	ef ed       	ldi	r30, 0xDF	; 223
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	8f e7       	ldi	r24, 0x7F	; 127
     aba:	80 83       	st	Z, r24
     abc:	ee ed       	ldi	r30, 0xDE	; 222
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	8f ef       	ldi	r24, 0xFF	; 255
     ac2:	80 83       	st	Z, r24
     ac4:	78 94       	sei
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	cf 91       	pop	r28
     acc:	df 91       	pop	r29
     ace:	08 95       	ret

00000ad0 <CAN_InitRxMob>:
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <CAN_InitRxMob+0x6>
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <CAN_InitRxMob+0x8>
     ad8:	0f 92       	push	r0
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	9c 83       	std	Y+4, r25	; 0x04
     ae0:	8b 83       	std	Y+3, r24	; 0x03
     ae2:	ed ee       	ldi	r30, 0xED	; 237
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	e9 ed       	ldi	r30, 0xD9	; 217
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	82 95       	swap	r24
     af2:	8f 70       	andi	r24, 0x0F	; 15
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	81 70       	andi	r24, 0x01	; 1
     afa:	90 70       	andi	r25, 0x00	; 0
     afc:	88 23       	and	r24, r24
     afe:	a9 f7       	brne	.-22     	; 0xaea <CAN_InitRxMob+0x1a>
     b00:	e9 ed       	ldi	r30, 0xD9	; 217
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	86 95       	lsr	r24
     b08:	86 95       	lsr	r24
     b0a:	86 95       	lsr	r24
     b0c:	88 2f       	mov	r24, r24
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	81 70       	andi	r24, 0x01	; 1
     b12:	90 70       	andi	r25, 0x00	; 0
     b14:	88 23       	and	r24, r24
     b16:	49 f7       	brne	.-46     	; 0xaea <CAN_InitRxMob+0x1a>
     b18:	1a 82       	std	Y+2, r1	; 0x02
     b1a:	3f c0       	rjmp	.+126    	; 0xb9a <CAN_InitRxMob+0xca>
     b1c:	ed ee       	ldi	r30, 0xED	; 237
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	82 95       	swap	r24
     b24:	80 7f       	andi	r24, 0xF0	; 240
     b26:	80 83       	st	Z, r24
     b28:	ef ee       	ldi	r30, 0xEF	; 239
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	82 95       	swap	r24
     b30:	86 95       	lsr	r24
     b32:	86 95       	lsr	r24
     b34:	83 70       	andi	r24, 0x03	; 3
     b36:	88 23       	and	r24, r24
     b38:	69 f5       	brne	.+90     	; 0xb94 <CAN_InitRxMob+0xc4>
     b3a:	ef ee       	ldi	r30, 0xEF	; 239
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	8f e0       	ldi	r24, 0x0F	; 15
     b40:	80 83       	st	Z, r24
     b42:	e3 ef       	ldi	r30, 0xF3	; 243
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	90 70       	andi	r25, 0x00	; 0
     b4c:	96 95       	lsr	r25
     b4e:	87 95       	ror	r24
     b50:	96 95       	lsr	r25
     b52:	87 95       	ror	r24
     b54:	96 95       	lsr	r25
     b56:	87 95       	ror	r24
     b58:	80 83       	st	Z, r24
     b5a:	e2 ef       	ldi	r30, 0xF2	; 242
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	82 95       	swap	r24
     b62:	88 0f       	add	r24, r24
     b64:	80 7e       	andi	r24, 0xE0	; 224
     b66:	80 83       	st	Z, r24
     b68:	e6 ef       	ldi	r30, 0xF6	; 246
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 ee       	ldi	r24, 0xE0	; 224
     b6e:	80 83       	st	Z, r24
     b70:	e7 ef       	ldi	r30, 0xF7	; 247
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	80 83       	st	Z, r24
     b78:	af ee       	ldi	r26, 0xEF	; 239
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ef ee       	ldi	r30, 0xEF	; 239
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	8c 93       	st	X, r24
     b86:	ed ee       	ldi	r30, 0xED	; 237
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	80 83       	st	Z, r24
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	8d 83       	std	Y+5, r24	; 0x05
     b92:	0c c0       	rjmp	.+24     	; 0xbac <CAN_InitRxMob+0xdc>
     b94:	8a 81       	ldd	r24, Y+2	; 0x02
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	8a 83       	std	Y+2, r24	; 0x02
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	8f 30       	cpi	r24, 0x0F	; 15
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <CAN_InitRxMob+0xd2>
     ba0:	bd cf       	rjmp	.-134    	; 0xb1c <CAN_InitRxMob+0x4c>
     ba2:	ed ee       	ldi	r30, 0xED	; 237
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	80 83       	st	Z, r24
     baa:	1d 82       	std	Y+5, r1	; 0x05
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <CAN_Init>:
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <CAN_Init+0xa>
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	8a 83       	std	Y+2, r24	; 0x02
     bce:	1b df       	rcall	.-458    	; 0xa06 <CAN_InitModule>
     bd0:	19 82       	std	Y+1, r1	; 0x01
     bd2:	36 c0       	rjmp	.+108    	; 0xc40 <CAN_Init+0x82>
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	79 df       	rcall	.-270    	; 0xad0 <CAN_InitRxMob>
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	8c 01       	movw	r16, r24
     bea:	02 5f       	subi	r16, 0xF2	; 242
     bec:	1b 4f       	sbci	r17, 0xFB	; 251
     bee:	85 e0       	ldi	r24, 0x05	; 5
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	0e 94 22 23 	call	0x4644	; 0x4644 <calloc>
     bfa:	f8 01       	movw	r30, r16
     bfc:	91 83       	std	Z+1, r25	; 0x01
     bfe:	80 83       	st	Z, r24
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	48 2f       	mov	r20, r24
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	fc 01       	movw	r30, r24
     c14:	ea 5c       	subi	r30, 0xCA	; 202
     c16:	fb 4f       	sbci	r31, 0xFB	; 251
     c18:	10 82       	st	Z, r1
     c1a:	fc 01       	movw	r30, r24
     c1c:	ea 5c       	subi	r30, 0xCA	; 202
     c1e:	fb 4f       	sbci	r31, 0xFB	; 251
     c20:	80 81       	ld	r24, Z
     c22:	f9 01       	movw	r30, r18
     c24:	e4 5d       	subi	r30, 0xD4	; 212
     c26:	fb 4f       	sbci	r31, 0xFB	; 251
     c28:	80 83       	st	Z, r24
     c2a:	f9 01       	movw	r30, r18
     c2c:	e4 5d       	subi	r30, 0xD4	; 212
     c2e:	fb 4f       	sbci	r31, 0xFB	; 251
     c30:	80 81       	ld	r24, Z
     c32:	fa 01       	movw	r30, r20
     c34:	ee 5d       	subi	r30, 0xDE	; 222
     c36:	fb 4f       	sbci	r31, 0xFB	; 251
     c38:	80 83       	st	Z, r24
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	8f 5f       	subi	r24, 0xFF	; 255
     c3e:	89 83       	std	Y+1, r24	; 0x01
     c40:	99 81       	ldd	r25, Y+1	; 0x01
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	98 17       	cp	r25, r24
     c46:	30 f2       	brcs	.-116    	; 0xbd4 <CAN_Init+0x16>
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <CAN_Read>:
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <CAN_Read+0x6>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <CAN_Read+0x8>
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	9b 83       	std	Y+3, r25	; 0x03
     c64:	8a 83       	std	Y+2, r24	; 0x02
     c66:	6c 83       	std	Y+4, r22	; 0x04
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	8f ef       	ldi	r24, 0xFF	; 255
     c6e:	80 83       	st	Z, r24
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	88 2f       	mov	r24, r24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	fc 01       	movw	r30, r24
     c7a:	ea 5c       	subi	r30, 0xCA	; 202
     c7c:	fb 4f       	sbci	r31, 0xFB	; 251
     c7e:	80 81       	ld	r24, Z
     c80:	88 23       	and	r24, r24
     c82:	b1 f3       	breq	.-20     	; 0xc70 <CAN_Read+0x1a>
     c84:	19 82       	std	Y+1, r1	; 0x01
     c86:	30 c0       	rjmp	.+96     	; 0xce8 <CAN_Read+0x92>
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	9b 81       	ldd	r25, Y+3	; 0x03
     c92:	dc 01       	movw	r26, r24
     c94:	a2 0f       	add	r26, r18
     c96:	b3 1f       	adc	r27, r19
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	82 1b       	sub	r24, r18
     ca4:	93 0b       	sbc	r25, r19
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	90 95       	com	r25
     cac:	81 95       	neg	r24
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	fc 01       	movw	r30, r24
     cb2:	e2 5f       	subi	r30, 0xF2	; 242
     cb4:	fb 4f       	sbci	r31, 0xFB	; 251
     cb6:	40 81       	ld	r20, Z
     cb8:	51 81       	ldd	r21, Z+1	; 0x01
     cba:	8c 81       	ldd	r24, Y+4	; 0x04
     cbc:	88 2f       	mov	r24, r24
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	fc 01       	movw	r30, r24
     cc4:	e4 5d       	subi	r30, 0xD4	; 212
     cc6:	fb 4f       	sbci	r31, 0xFB	; 251
     cc8:	80 81       	ld	r24, Z
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	82 0f       	add	r24, r18
     cd6:	93 1f       	adc	r25, r19
     cd8:	fa 01       	movw	r30, r20
     cda:	e8 0f       	add	r30, r24
     cdc:	f9 1f       	adc	r31, r25
     cde:	80 81       	ld	r24, Z
     ce0:	8c 93       	st	X, r24
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	88 30       	cpi	r24, 0x08	; 8
     cec:	68 f2       	brcs	.-102    	; 0xc88 <CAN_Read+0x32>
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	fc 01       	movw	r30, r24
     cf8:	e4 5d       	subi	r30, 0xD4	; 212
     cfa:	fb 4f       	sbci	r31, 0xFB	; 251
     cfc:	80 81       	ld	r24, Z
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	80 83       	st	Z, r24
     d02:	80 81       	ld	r24, Z
     d04:	85 30       	cpi	r24, 0x05	; 5
     d06:	41 f4       	brne	.+16     	; 0xd18 <CAN_Read+0xc2>
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	88 2f       	mov	r24, r24
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	fc 01       	movw	r30, r24
     d12:	e4 5d       	subi	r30, 0xD4	; 212
     d14:	fb 4f       	sbci	r31, 0xFB	; 251
     d16:	10 82       	st	Z, r1
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	9c 01       	movw	r18, r24
     d20:	21 50       	subi	r18, 0x01	; 1
     d22:	30 40       	sbci	r19, 0x00	; 0
     d24:	f9 01       	movw	r30, r18
     d26:	ea 5c       	subi	r30, 0xCA	; 202
     d28:	fb 4f       	sbci	r31, 0xFB	; 251
     d2a:	80 81       	ld	r24, Z
     d2c:	81 50       	subi	r24, 0x01	; 1
     d2e:	f9 01       	movw	r30, r18
     d30:	ea 5c       	subi	r30, 0xCA	; 202
     d32:	fb 4f       	sbci	r31, 0xFB	; 251
     d34:	80 83       	st	Z, r24
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <CAN_Write>:
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	9d 83       	std	Y+5, r25	; 0x05
     d5c:	8c 83       	std	Y+4, r24	; 0x04
     d5e:	6e 83       	std	Y+6, r22	; 0x06
     d60:	e9 ed       	ldi	r30, 0xD9	; 217
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	82 95       	swap	r24
     d68:	8f 70       	andi	r24, 0x0F	; 15
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	81 70       	andi	r24, 0x01	; 1
     d70:	90 70       	andi	r25, 0x00	; 0
     d72:	88 23       	and	r24, r24
     d74:	a9 f7       	brne	.-22     	; 0xd60 <CAN_Write+0x1a>
     d76:	e9 ed       	ldi	r30, 0xD9	; 217
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	86 95       	lsr	r24
     d7e:	86 95       	lsr	r24
     d80:	86 95       	lsr	r24
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	81 70       	andi	r24, 0x01	; 1
     d88:	90 70       	andi	r25, 0x00	; 0
     d8a:	88 23       	and	r24, r24
     d8c:	49 f7       	brne	.-46     	; 0xd60 <CAN_Write+0x1a>
     d8e:	ed ee       	ldi	r30, 0xED	; 237
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	1a 82       	std	Y+2, r1	; 0x02
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <CAN_Write+0x78>
     d9a:	ed ee       	ldi	r30, 0xED	; 237
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	82 95       	swap	r24
     da2:	80 7f       	andi	r24, 0xF0	; 240
     da4:	80 83       	st	Z, r24
     da6:	ef ee       	ldi	r30, 0xEF	; 239
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	82 95       	swap	r24
     dae:	86 95       	lsr	r24
     db0:	86 95       	lsr	r24
     db2:	83 70       	andi	r24, 0x03	; 3
     db4:	88 23       	and	r24, r24
     db6:	31 f0       	breq	.+12     	; 0xdc4 <CAN_Write+0x7e>
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	8f 5f       	subi	r24, 0xFF	; 255
     dbc:	8a 83       	std	Y+2, r24	; 0x02
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	8f 30       	cpi	r24, 0x0F	; 15
     dc2:	58 f3       	brcs	.-42     	; 0xd9a <CAN_Write+0x54>
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	8f 30       	cpi	r24, 0x0F	; 15
     dc8:	19 f4       	brne	.+6      	; 0xdd0 <CAN_Write+0x8a>
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	8f 83       	std	Y+7, r24	; 0x07
     dce:	32 c0       	rjmp	.+100    	; 0xe34 <CAN_Write+0xee>
     dd0:	e2 ef       	ldi	r30, 0xF2	; 242
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	8e 81       	ldd	r24, Y+6	; 0x06
     dd6:	82 95       	swap	r24
     dd8:	88 0f       	add	r24, r24
     dda:	80 7e       	andi	r24, 0xE0	; 224
     ddc:	80 83       	st	Z, r24
     dde:	e3 ef       	ldi	r30, 0xF3	; 243
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	8e 81       	ldd	r24, Y+6	; 0x06
     de4:	86 95       	lsr	r24
     de6:	86 95       	lsr	r24
     de8:	86 95       	lsr	r24
     dea:	80 83       	st	Z, r24
     dec:	ef ee       	ldi	r30, 0xEF	; 239
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	88 e0       	ldi	r24, 0x08	; 8
     df2:	80 83       	st	Z, r24
     df4:	1b 82       	std	Y+3, r1	; 0x03
     df6:	0f c0       	rjmp	.+30     	; 0xe16 <CAN_Write+0xd0>
     df8:	aa ef       	ldi	r26, 0xFA	; 250
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	8c 81       	ldd	r24, Y+4	; 0x04
     e04:	9d 81       	ldd	r25, Y+5	; 0x05
     e06:	fc 01       	movw	r30, r24
     e08:	e2 0f       	add	r30, r18
     e0a:	f3 1f       	adc	r31, r19
     e0c:	80 81       	ld	r24, Z
     e0e:	8c 93       	st	X, r24
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	8b 83       	std	Y+3, r24	; 0x03
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	88 30       	cpi	r24, 0x08	; 8
     e1a:	70 f3       	brcs	.-36     	; 0xdf8 <CAN_Write+0xb2>
     e1c:	af ee       	ldi	r26, 0xEF	; 239
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	ef ee       	ldi	r30, 0xEF	; 239
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 64       	ori	r24, 0x40	; 64
     e28:	8c 93       	st	X, r24
     e2a:	ed ee       	ldi	r30, 0xED	; 237
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	80 83       	st	Z, r24
     e32:	1f 82       	std	Y+7, r1	; 0x07
     e34:	8f 81       	ldd	r24, Y+7	; 0x07
     e36:	27 96       	adiw	r28, 0x07	; 7
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <gpio_register_pin>:
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	2c 97       	sbiw	r28, 0x0c	; 12
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	89 87       	std	Y+9, r24	; 0x09
     e5e:	6a 87       	std	Y+10, r22	; 0x0a
     e60:	4b 87       	std	Y+11, r20	; 0x0b
     e62:	80 91 a4 02 	lds	r24, 0x02A4
     e66:	90 91 a5 02 	lds	r25, 0x02A5
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	06 97       	sbiw	r24, 0x06	; 6
     e74:	98 87       	std	Y+8, r25	; 0x08
     e76:	8f 83       	std	Y+7, r24	; 0x07
     e78:	14 c0       	rjmp	.+40     	; 0xea2 <gpio_register_pin+0x5a>
     e7a:	ef 81       	ldd	r30, Y+7	; 0x07
     e7c:	f8 85       	ldd	r31, Y+8	; 0x08
     e7e:	90 81       	ld	r25, Z
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	98 17       	cp	r25, r24
     e84:	19 f4       	brne	.+6      	; 0xe8c <gpio_register_pin+0x44>
     e86:	21 e0       	ldi	r18, 0x01	; 1
     e88:	2c 87       	std	Y+12, r18	; 0x0c
     e8a:	c9 c0       	rjmp	.+402    	; 0x101e <gpio_register_pin+0x1d6>
     e8c:	ef 81       	ldd	r30, Y+7	; 0x07
     e8e:	f8 85       	ldd	r31, Y+8	; 0x08
     e90:	80 85       	ldd	r24, Z+8	; 0x08
     e92:	91 85       	ldd	r25, Z+9	; 0x09
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	06 97       	sbiw	r24, 0x06	; 6
     e9e:	98 87       	std	Y+8, r25	; 0x08
     ea0:	8f 83       	std	Y+7, r24	; 0x07
     ea2:	8f 81       	ldd	r24, Y+7	; 0x07
     ea4:	98 85       	ldd	r25, Y+8	; 0x08
     ea6:	06 96       	adiw	r24, 0x06	; 6
     ea8:	22 e0       	ldi	r18, 0x02	; 2
     eaa:	82 3a       	cpi	r24, 0xA2	; 162
     eac:	92 07       	cpc	r25, r18
     eae:	29 f7       	brne	.-54     	; 0xe7a <gpio_register_pin+0x32>
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	86 95       	lsr	r24
     eb4:	86 95       	lsr	r24
     eb6:	86 95       	lsr	r24
     eb8:	8f 5f       	subi	r24, 0xFF	; 255
     eba:	8e 83       	std	Y+6, r24	; 0x06
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	87 70       	andi	r24, 0x07	; 7
     ec0:	8d 83       	std	Y+5, r24	; 0x05
     ec2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	09 f0       	breq	.+2      	; 0xeca <gpio_register_pin+0x82>
     ec8:	48 c0       	rjmp	.+144    	; 0xf5a <gpio_register_pin+0x112>
     eca:	8e 81       	ldd	r24, Y+6	; 0x06
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	c9 01       	movw	r24, r18
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	82 0f       	add	r24, r18
     ed8:	93 1f       	adc	r25, r19
     eda:	4e 96       	adiw	r24, 0x1e	; 30
     edc:	dc 01       	movw	r26, r24
     ede:	8e 81       	ldd	r24, Y+6	; 0x06
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	c9 01       	movw	r24, r18
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	82 0f       	add	r24, r18
     eec:	93 1f       	adc	r25, r19
     eee:	4e 96       	adiw	r24, 0x1e	; 30
     ef0:	fc 01       	movw	r30, r24
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <gpio_register_pin+0xbe>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	2a 95       	dec	r18
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <gpio_register_pin+0xba>
     f0a:	84 2b       	or	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	c9 01       	movw	r24, r18
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	82 0f       	add	r24, r18
     f1c:	93 1f       	adc	r25, r19
     f1e:	4f 96       	adiw	r24, 0x1f	; 31
     f20:	dc 01       	movw	r26, r24
     f22:	8e 81       	ldd	r24, Y+6	; 0x06
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	c9 01       	movw	r24, r18
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	82 0f       	add	r24, r18
     f30:	93 1f       	adc	r25, r19
     f32:	4f 96       	adiw	r24, 0x1f	; 31
     f34:	fc 01       	movw	r30, r24
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <gpio_register_pin+0x104>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <gpio_register_pin+0x100>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	1c 86       	std	Y+12, r1	; 0x0c
     f58:	62 c0       	rjmp	.+196    	; 0x101e <gpio_register_pin+0x1d6>
     f5a:	8e 81       	ldd	r24, Y+6	; 0x06
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	c9 01       	movw	r24, r18
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	4e 96       	adiw	r24, 0x1e	; 30
     f6c:	dc 01       	movw	r26, r24
     f6e:	8e 81       	ldd	r24, Y+6	; 0x06
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	c9 01       	movw	r24, r18
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	82 0f       	add	r24, r18
     f7c:	93 1f       	adc	r25, r19
     f7e:	4e 96       	adiw	r24, 0x1e	; 30
     f80:	fc 01       	movw	r30, r24
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <gpio_register_pin+0x14e>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	2a 95       	dec	r18
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <gpio_register_pin+0x14a>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	8e 81       	ldd	r24, Y+6	; 0x06
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	c9 01       	movw	r24, r18
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	82 0f       	add	r24, r18
     fae:	93 1f       	adc	r25, r19
     fb0:	4f 96       	adiw	r24, 0x1f	; 31
     fb2:	dc 01       	movw	r26, r24
     fb4:	8e 81       	ldd	r24, Y+6	; 0x06
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	c9 01       	movw	r24, r18
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	82 0f       	add	r24, r18
     fc2:	93 1f       	adc	r25, r19
     fc4:	4f 96       	adiw	r24, 0x1f	; 31
     fc6:	fc 01       	movw	r30, r24
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <gpio_register_pin+0x194>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	2a 95       	dec	r18
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <gpio_register_pin+0x190>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	8a e0       	ldi	r24, 0x0A	; 10
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 3c 23 	call	0x4678	; 0x4678 <malloc>
     fec:	98 87       	std	Y+8, r25	; 0x08
     fee:	8f 83       	std	Y+7, r24	; 0x07
     ff0:	8f 81       	ldd	r24, Y+7	; 0x07
     ff2:	98 85       	ldd	r25, Y+8	; 0x08
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	19 f4       	brne	.+6      	; 0xffe <gpio_register_pin+0x1b6>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	8c 87       	std	Y+12, r24	; 0x0c
     ffc:	10 c0       	rjmp	.+32     	; 0x101e <gpio_register_pin+0x1d6>
     ffe:	ef 81       	ldd	r30, Y+7	; 0x07
    1000:	f8 85       	ldd	r31, Y+8	; 0x08
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	80 83       	st	Z, r24
    1006:	ef 81       	ldd	r30, Y+7	; 0x07
    1008:	f8 85       	ldd	r31, Y+8	; 0x08
    100a:	8b 85       	ldd	r24, Y+11	; 0x0b
    100c:	81 83       	std	Z+1, r24	; 0x01
    100e:	8f 81       	ldd	r24, Y+7	; 0x07
    1010:	98 85       	ldd	r25, Y+8	; 0x08
    1012:	06 96       	adiw	r24, 0x06	; 6
    1014:	22 ea       	ldi	r18, 0xA2	; 162
    1016:	32 e0       	ldi	r19, 0x02	; 2
    1018:	b9 01       	movw	r22, r18
    101a:	0b d0       	rcall	.+22     	; 0x1032 <list_add>
    101c:	1c 86       	std	Y+12, r1	; 0x0c
    101e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1020:	2c 96       	adiw	r28, 0x0c	; 12
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <list_add>:
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <list_add+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <list_add+0x8>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	9a 83       	std	Y+2, r25	; 0x02
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	7c 83       	std	Y+4, r23	; 0x04
    1044:	6b 83       	std	Y+3, r22	; 0x03
    1046:	eb 81       	ldd	r30, Y+3	; 0x03
    1048:	fc 81       	ldd	r31, Y+4	; 0x04
    104a:	42 81       	ldd	r20, Z+2	; 0x02
    104c:	53 81       	ldd	r21, Z+3	; 0x03
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	b9 01       	movw	r22, r18
    1058:	07 d0       	rcall	.+14     	; 0x1068 <__list_add>
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <__list_add>:
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	00 d0       	rcall	.+0      	; 0x106e <__list_add+0x6>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <__list_add+0x8>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <__list_add+0xa>
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	7c 83       	std	Y+4, r23	; 0x04
    107c:	6b 83       	std	Y+3, r22	; 0x03
    107e:	5e 83       	std	Y+6, r21	; 0x06
    1080:	4d 83       	std	Y+5, r20	; 0x05
    1082:	ed 81       	ldd	r30, Y+5	; 0x05
    1084:	fe 81       	ldd	r31, Y+6	; 0x06
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	80 83       	st	Z, r24
    108e:	e9 81       	ldd	r30, Y+1	; 0x01
    1090:	fa 81       	ldd	r31, Y+2	; 0x02
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	93 83       	std	Z+3, r25	; 0x03
    1098:	82 83       	std	Z+2, r24	; 0x02
    109a:	e9 81       	ldd	r30, Y+1	; 0x01
    109c:	fa 81       	ldd	r31, Y+2	; 0x02
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
    10a6:	eb 81       	ldd	r30, Y+3	; 0x03
    10a8:	fc 81       	ldd	r31, Y+4	; 0x04
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	93 83       	std	Z+3, r25	; 0x03
    10b0:	82 83       	std	Z+2, r24	; 0x02
    10b2:	26 96       	adiw	r28, 0x06	; 6
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <__gpio_read_pin>:
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <__gpio_read_pin+0x6>
    10ca:	0f 92       	push	r0
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	8b 83       	std	Y+3, r24	; 0x03
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	86 95       	lsr	r24
    10d6:	86 95       	lsr	r24
    10d8:	86 95       	lsr	r24
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	8a 83       	std	Y+2, r24	; 0x02
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	87 70       	andi	r24, 0x07	; 7
    10e2:	8b 83       	std	Y+3, r24	; 0x03
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	c9 01       	movw	r24, r18
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	82 0f       	add	r24, r18
    10f2:	93 1f       	adc	r25, r19
    10f4:	4d 96       	adiw	r24, 0x1d	; 29
    10f6:	fc 01       	movw	r30, r24
    10f8:	80 81       	ld	r24, Z
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a9 01       	movw	r20, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <__stack+0x11>
    110c:	55 95       	asr	r21
    110e:	47 95       	ror	r20
    1110:	8a 95       	dec	r24
    1112:	e2 f7       	brpl	.-8      	; 0x110c <__stack+0xd>
    1114:	ca 01       	movw	r24, r20
    1116:	81 70       	andi	r24, 0x01	; 1
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <gpio_read_pin>:
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	2b 97       	sbiw	r28, 0x0b	; 11
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	89 87       	std	Y+9, r24	; 0x09
    113a:	80 91 a4 02 	lds	r24, 0x02A4
    113e:	90 91 a5 02 	lds	r25, 0x02A5
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	06 97       	sbiw	r24, 0x06	; 6
    114c:	98 87       	std	Y+8, r25	; 0x08
    114e:	8f 83       	std	Y+7, r24	; 0x07
    1150:	55 c0       	rjmp	.+170    	; 0x11fc <gpio_read_pin+0xd8>
    1152:	ef 81       	ldd	r30, Y+7	; 0x07
    1154:	f8 85       	ldd	r31, Y+8	; 0x08
    1156:	90 81       	ld	r25, Z
    1158:	89 85       	ldd	r24, Y+9	; 0x09
    115a:	98 17       	cp	r25, r24
    115c:	09 f0       	breq	.+2      	; 0x1160 <gpio_read_pin+0x3c>
    115e:	43 c0       	rjmp	.+134    	; 0x11e6 <gpio_read_pin+0xc2>
    1160:	1c 82       	std	Y+4, r1	; 0x04
    1162:	21 c0       	rjmp	.+66     	; 0x11a6 <gpio_read_pin+0x82>
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	8f 81       	ldd	r24, Y+7	; 0x07
    116c:	98 85       	ldd	r25, Y+8	; 0x08
    116e:	82 0f       	add	r24, r18
    1170:	93 1f       	adc	r25, r19
    1172:	fc 01       	movw	r30, r24
    1174:	32 96       	adiw	r30, 0x02	; 2
    1176:	40 81       	ld	r20, Z
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9c 01       	movw	r18, r24
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	8f 81       	ldd	r24, Y+7	; 0x07
    1186:	98 85       	ldd	r25, Y+8	; 0x08
    1188:	82 0f       	add	r24, r18
    118a:	93 1f       	adc	r25, r19
    118c:	fc 01       	movw	r30, r24
    118e:	32 96       	adiw	r30, 0x02	; 2
    1190:	80 81       	ld	r24, Z
    1192:	48 17       	cp	r20, r24
    1194:	29 f0       	breq	.+10     	; 0x11a0 <gpio_read_pin+0x7c>
    1196:	ef 81       	ldd	r30, Y+7	; 0x07
    1198:	f8 85       	ldd	r31, Y+8	; 0x08
    119a:	25 81       	ldd	r18, Z+5	; 0x05
    119c:	2b 87       	std	Y+11, r18	; 0x0b
    119e:	38 c0       	rjmp	.+112    	; 0x1210 <gpio_read_pin+0xec>
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	8c 83       	std	Y+4, r24	; 0x04
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	82 30       	cpi	r24, 0x02	; 2
    11aa:	e0 f2       	brcs	.-72     	; 0x1164 <gpio_read_pin+0x40>
    11ac:	ef 81       	ldd	r30, Y+7	; 0x07
    11ae:	f8 85       	ldd	r31, Y+8	; 0x08
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 27       	eor	r24, r25
    11b6:	88 23       	and	r24, r24
    11b8:	29 f0       	breq	.+10     	; 0x11c4 <gpio_read_pin+0xa0>
    11ba:	ef 81       	ldd	r30, Y+7	; 0x07
    11bc:	f8 85       	ldd	r31, Y+8	; 0x08
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	8a 87       	std	Y+10, r24	; 0x0a
    11c2:	08 c0       	rjmp	.+16     	; 0x11d4 <gpio_read_pin+0xb0>
    11c4:	ef 81       	ldd	r30, Y+7	; 0x07
    11c6:	f8 85       	ldd	r31, Y+8	; 0x08
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	1a 86       	std	Y+10, r1	; 0x0a
    11cc:	88 23       	and	r24, r24
    11ce:	11 f4       	brne	.+4      	; 0x11d4 <gpio_read_pin+0xb0>
    11d0:	21 e0       	ldi	r18, 0x01	; 1
    11d2:	2a 87       	std	Y+10, r18	; 0x0a
    11d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11d6:	8b 83       	std	Y+3, r24	; 0x03
    11d8:	ef 81       	ldd	r30, Y+7	; 0x07
    11da:	f8 85       	ldd	r31, Y+8	; 0x08
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	85 83       	std	Z+5, r24	; 0x05
    11e0:	2b 81       	ldd	r18, Y+3	; 0x03
    11e2:	2b 87       	std	Y+11, r18	; 0x0b
    11e4:	15 c0       	rjmp	.+42     	; 0x1210 <gpio_read_pin+0xec>
    11e6:	ef 81       	ldd	r30, Y+7	; 0x07
    11e8:	f8 85       	ldd	r31, Y+8	; 0x08
    11ea:	80 85       	ldd	r24, Z+8	; 0x08
    11ec:	91 85       	ldd	r25, Z+9	; 0x09
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	06 97       	sbiw	r24, 0x06	; 6
    11f8:	98 87       	std	Y+8, r25	; 0x08
    11fa:	8f 83       	std	Y+7, r24	; 0x07
    11fc:	8f 81       	ldd	r24, Y+7	; 0x07
    11fe:	98 85       	ldd	r25, Y+8	; 0x08
    1200:	06 96       	adiw	r24, 0x06	; 6
    1202:	22 e0       	ldi	r18, 0x02	; 2
    1204:	82 3a       	cpi	r24, 0xA2	; 162
    1206:	92 07       	cpc	r25, r18
    1208:	09 f0       	breq	.+2      	; 0x120c <gpio_read_pin+0xe8>
    120a:	a3 cf       	rjmp	.-186    	; 0x1152 <gpio_read_pin+0x2e>
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	8b 87       	std	Y+11, r24	; 0x0b
    1210:	8b 85       	ldd	r24, Y+11	; 0x0b
    1212:	2b 96       	adiw	r28, 0x0b	; 11
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <gpio_debouncer>:
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	00 d0       	rcall	.+0      	; 0x122e <gpio_debouncer+0xa>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <gpio_debouncer+0xc>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <gpio_debouncer+0xe>
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	80 91 a4 02 	lds	r24, 0x02A4
    123a:	90 91 a5 02 	lds	r25, 0x02A5
    123e:	9c 83       	std	Y+4, r25	; 0x04
    1240:	8b 83       	std	Y+3, r24	; 0x03
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	06 97       	sbiw	r24, 0x06	; 6
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	1b c0       	rjmp	.+54     	; 0x1284 <gpio_debouncer+0x60>
    124e:	00 91 40 04 	lds	r16, 0x0440
    1252:	10 91 41 04 	lds	r17, 0x0441
    1256:	ed 81       	ldd	r30, Y+5	; 0x05
    1258:	fe 81       	ldd	r31, Y+6	; 0x06
    125a:	80 81       	ld	r24, Z
    125c:	33 df       	rcall	.-410    	; 0x10c4 <__gpio_read_pin>
    125e:	28 2f       	mov	r18, r24
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	80 0f       	add	r24, r16
    1266:	91 1f       	adc	r25, r17
    1268:	fc 01       	movw	r30, r24
    126a:	32 96       	adiw	r30, 0x02	; 2
    126c:	20 83       	st	Z, r18
    126e:	ed 81       	ldd	r30, Y+5	; 0x05
    1270:	fe 81       	ldd	r31, Y+6	; 0x06
    1272:	80 85       	ldd	r24, Z+8	; 0x08
    1274:	91 85       	ldd	r25, Z+9	; 0x09
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	9a 81       	ldd	r25, Y+2	; 0x02
    127e:	06 97       	sbiw	r24, 0x06	; 6
    1280:	9e 83       	std	Y+6, r25	; 0x06
    1282:	8d 83       	std	Y+5, r24	; 0x05
    1284:	8d 81       	ldd	r24, Y+5	; 0x05
    1286:	9e 81       	ldd	r25, Y+6	; 0x06
    1288:	06 96       	adiw	r24, 0x06	; 6
    128a:	22 e0       	ldi	r18, 0x02	; 2
    128c:	82 3a       	cpi	r24, 0xA2	; 162
    128e:	92 07       	cpc	r25, r18
    1290:	f1 f6       	brne	.-68     	; 0x124e <gpio_debouncer+0x2a>
    1292:	80 91 40 04 	lds	r24, 0x0440
    1296:	90 91 41 04 	lds	r25, 0x0441
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	90 93 41 04 	sts	0x0441, r25
    12a0:	80 93 40 04 	sts	0x0440, r24
    12a4:	80 91 40 04 	lds	r24, 0x0440
    12a8:	90 91 41 04 	lds	r25, 0x0441
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	91 05       	cpc	r25, r1
    12b0:	21 f4       	brne	.+8      	; 0x12ba <gpio_debouncer+0x96>
    12b2:	10 92 41 04 	sts	0x0441, r1
    12b6:	10 92 40 04 	sts	0x0440, r1
    12ba:	26 96       	adiw	r28, 0x06	; 6
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <grabbers_down_green>:




char grabbers_down_green(uint32_t start_time)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <grabbers_down_green+0x6>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <grabbers_down_green+0x8>
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	69 83       	std	Y+1, r22	; 0x01
    12de:	7a 83       	std	Y+2, r23	; 0x02
    12e0:	8b 83       	std	Y+3, r24	; 0x03
    12e2:	9c 83       	std	Y+4, r25	; 0x04
	servo_set_grabbers_down();
    12e4:	1c da       	rcall	.-3016   	; 0x71e <servo_set_grabbers_down>
	return 0;
    12e6:	80 e0       	ldi	r24, 0x00	; 0
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <grabbers_up_green>:
char grabbers_up_green(uint32_t start_time)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <grabbers_up_green+0x6>
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <grabbers_up_green+0x8>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	69 83       	std	Y+1, r22	; 0x01
    1304:	7a 83       	std	Y+2, r23	; 0x02
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	9c 83       	std	Y+4, r25	; 0x04
	servo_set_grabbers_up();
    130a:	fe d9       	rcall	.-3076   	; 0x708 <servo_set_grabbers_up>
	return 0;
    130c:	80 e0       	ldi	r24, 0x00	; 0
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <greenside>:
	{{580,1960},20,FORWARD,NULL},								//POSITION 13			PUSH DOOR NUM 2
	{{580,1660},20,BACKWARD,NULL},								//POSITION 14			GO BACK
	{{85,1660},20,FORWARD,NULL}									//POSITION 15			GO AND HIDE 100
};
void greenside(void)
{
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	c7 59       	subi	r28, 0x97	; 151
    132a:	d0 40       	sbci	r29, 0x00	; 0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
	logger("Chosen green side | greenside.c\n");
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	0e 94 10 1c 	call	0x3820	; 0x3820 <logger>
	
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    133e:	fe 01       	movw	r30, r28
    1340:	e0 57       	subi	r30, 0x70	; 112
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	10 82       	st	Z, r1
	uint8_t next_position = 0;
    1346:	fe 01       	movw	r30, r28
    1348:	e1 57       	subi	r30, 0x71	; 113
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	10 82       	st	Z, r1
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_ONE;
    134e:	fe 01       	movw	r30, r28
    1350:	e3 57       	subi	r30, 0x73	; 115
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	80 83       	st	Z, r24
	
	logger("Activestate is set to tactic one | greenside.c\n");
    1358:	81 e2       	ldi	r24, 0x21	; 33
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	0e 94 10 1c 	call	0x3820	; 0x3820 <logger>
	
	starting_position.x		= 180;
    1360:	fe 01       	movw	r30, r28
    1362:	ef 56       	subi	r30, 0x6F	; 111
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	84 eb       	ldi	r24, 0xB4	; 180
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24
	starting_position.y		= 990;
    136e:	fe 01       	movw	r30, r28
    1370:	ef 56       	subi	r30, 0x6F	; 111
    1372:	ff 4f       	sbci	r31, 0xFF	; 255
    1374:	8e ed       	ldi	r24, 0xDE	; 222
    1376:	93 e0       	ldi	r25, 0x03	; 3
    1378:	93 83       	std	Z+3, r25	; 0x03
    137a:	82 83       	std	Z+2, r24	; 0x02
	starting_position.angle = 90;
    137c:	fe 01       	movw	r30, r28
    137e:	ef 56       	subi	r30, 0x6F	; 111
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	8a e5       	ldi	r24, 0x5A	; 90
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	95 83       	std	Z+5, r25	; 0x05
    1388:	84 83       	std	Z+4, r24	; 0x04
	
	odometry_set_position(&starting_position);
    138a:	ce 01       	movw	r24, r28
    138c:	8f 56       	subi	r24, 0x6F	; 111
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	0e 94 88 13 	call	0x2710	; 0x2710 <odometry_set_position>
	
	logger("Starting position set. Continuing...| greenside.c \n");
    1394:	81 e5       	ldi	r24, 0x51	; 81
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	0e 94 10 1c 	call	0x3820	; 0x3820 <logger>

	while(1)
	{
		switch(active_state)
    139c:	fe 01       	movw	r30, r28
    139e:	e3 57       	subi	r30, 0x73	; 115
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	80 81       	ld	r24, Z
    13a4:	99 27       	eor	r25, r25
    13a6:	87 fd       	sbrc	r24, 7
    13a8:	90 95       	com	r25
    13aa:	82 30       	cpi	r24, 0x02	; 2
    13ac:	91 05       	cpc	r25, r1
    13ae:	b1 f7       	brne	.-20     	; 0x139c <greenside+0x80>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    13b0:	fe 01       	movw	r30, r28
    13b2:	e0 57       	subi	r30, 0x70	; 112
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	de 01       	movw	r26, r28
    13b8:	a1 57       	subi	r26, 0x71	; 113
    13ba:	bf 4f       	sbci	r27, 0xFF	; 255
    13bc:	8c 91       	ld	r24, X
    13be:	80 83       	st	Z, r24
    13c0:	a5 c6       	rjmp	.+3402   	; 0x210c <greenside+0xdf0>
				{
					odometry_status = odometry_move_to_position(&(green_tactic_one_positions[current_position].point), green_tactic_one_positions[current_position].speed,
    13c2:	fe 01       	movw	r30, r28
    13c4:	e0 57       	subi	r30, 0x70	; 112
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	ca 01       	movw	r24, r20
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	9c 01       	movw	r18, r24
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	22 0f       	add	r18, r18
    13dc:	33 1f       	adc	r19, r19
    13de:	82 0f       	add	r24, r18
    13e0:	93 1f       	adc	r25, r19
    13e2:	84 0f       	add	r24, r20
    13e4:	95 1f       	adc	r25, r21
    13e6:	83 55       	subi	r24, 0x53	; 83
    13e8:	9d 4f       	sbci	r25, 0xFD	; 253
    13ea:	bc 01       	movw	r22, r24
    13ec:	fe 01       	movw	r30, r28
    13ee:	e0 57       	subi	r30, 0x70	; 112
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	ca 01       	movw	r24, r20
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	9c 01       	movw	r18, r24
    1400:	22 0f       	add	r18, r18
    1402:	33 1f       	adc	r19, r19
    1404:	22 0f       	add	r18, r18
    1406:	33 1f       	adc	r19, r19
    1408:	82 0f       	add	r24, r18
    140a:	93 1f       	adc	r25, r19
    140c:	84 0f       	add	r24, r20
    140e:	95 1f       	adc	r25, r21
    1410:	fc 01       	movw	r30, r24
    1412:	ec 54       	subi	r30, 0x4C	; 76
    1414:	fd 4f       	sbci	r31, 0xFD	; 253
    1416:	a0 81       	ld	r26, Z
    1418:	fe 01       	movw	r30, r28
    141a:	e0 57       	subi	r30, 0x70	; 112
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	ca 01       	movw	r24, r20
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	9c 01       	movw	r18, r24
    142c:	22 0f       	add	r18, r18
    142e:	33 1f       	adc	r19, r19
    1430:	22 0f       	add	r18, r18
    1432:	33 1f       	adc	r19, r19
    1434:	82 0f       	add	r24, r18
    1436:	93 1f       	adc	r25, r19
    1438:	84 0f       	add	r24, r20
    143a:	95 1f       	adc	r25, r21
    143c:	fc 01       	movw	r30, r24
    143e:	eb 54       	subi	r30, 0x4B	; 75
    1440:	fd 4f       	sbci	r31, 0xFD	; 253
    1442:	80 81       	ld	r24, Z
    1444:	b8 2f       	mov	r27, r24
    1446:	fe 01       	movw	r30, r28
    1448:	e0 57       	subi	r30, 0x70	; 112
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	ca 01       	movw	r24, r20
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	9c 01       	movw	r18, r24
    145a:	22 0f       	add	r18, r18
    145c:	33 1f       	adc	r19, r19
    145e:	22 0f       	add	r18, r18
    1460:	33 1f       	adc	r19, r19
    1462:	82 0f       	add	r24, r18
    1464:	93 1f       	adc	r25, r19
    1466:	84 0f       	add	r24, r20
    1468:	95 1f       	adc	r25, r21
    146a:	fc 01       	movw	r30, r24
    146c:	ea 54       	subi	r30, 0x4A	; 74
    146e:	fd 4f       	sbci	r31, 0xFD	; 253
    1470:	20 81       	ld	r18, Z
    1472:	31 81       	ldd	r19, Z+1	; 0x01
    1474:	cb 01       	movw	r24, r22
    1476:	6a 2f       	mov	r22, r26
    1478:	4b 2f       	mov	r20, r27
    147a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <odometry_move_to_position>
    147e:	fe 01       	movw	r30, r28
    1480:	e2 57       	subi	r30, 0x72	; 114
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	80 83       	st	Z, r24
					green_tactic_one_positions[current_position].direction,green_tactic_one_positions[current_position].callback);
		
					if(odometry_status == ODOMETRY_FAIL)
    1486:	fe 01       	movw	r30, r28
    1488:	e2 57       	subi	r30, 0x72	; 114
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	80 81       	ld	r24, Z
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	09 f4       	brne	.+2      	; 0x1494 <greenside+0x178>
    1492:	84 cf       	rjmp	.-248    	; 0x139c <greenside+0x80>
					{
						break;
					}
					else if(current_position == 1 || current_position == 3)
    1494:	fe 01       	movw	r30, r28
    1496:	e0 57       	subi	r30, 0x70	; 112
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	80 81       	ld	r24, Z
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	39 f0       	breq	.+14     	; 0x14ae <greenside+0x192>
    14a0:	fe 01       	movw	r30, r28
    14a2:	e0 57       	subi	r30, 0x70	; 112
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	80 81       	ld	r24, Z
    14a8:	83 30       	cpi	r24, 0x03	; 3
    14aa:	09 f0       	breq	.+2      	; 0x14ae <greenside+0x192>
    14ac:	b5 c0       	rjmp	.+362    	; 0x1618 <greenside+0x2fc>
    14ae:	fe 01       	movw	r30, r28
    14b0:	e7 57       	subi	r30, 0x77	; 119
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	aa e7       	ldi	r26, 0x7A	; 122
    14ba:	b4 e4       	ldi	r27, 0x44	; 68
    14bc:	80 83       	st	Z, r24
    14be:	91 83       	std	Z+1, r25	; 0x01
    14c0:	a2 83       	std	Z+2, r26	; 0x02
    14c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c4:	8e 01       	movw	r16, r28
    14c6:	0b 57       	subi	r16, 0x7B	; 123
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	fe 01       	movw	r30, r28
    14cc:	e7 57       	subi	r30, 0x77	; 119
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	60 81       	ld	r22, Z
    14d2:	71 81       	ldd	r23, Z+1	; 0x01
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	93 81       	ldd	r25, Z+3	; 0x03
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e4       	ldi	r19, 0x40	; 64
    14dc:	4c e1       	ldi	r20, 0x1C	; 28
    14de:	55 e4       	ldi	r21, 0x45	; 69
    14e0:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	f8 01       	movw	r30, r16
    14ea:	80 83       	st	Z, r24
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	a2 83       	std	Z+2, r26	; 0x02
    14f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14f2:	fe 01       	movw	r30, r28
    14f4:	eb 57       	subi	r30, 0x7B	; 123
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e8       	ldi	r20, 0x80	; 128
    1506:	5f e3       	ldi	r21, 0x3F	; 63
    1508:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    150c:	88 23       	and	r24, r24
    150e:	44 f4       	brge	.+16     	; 0x1520 <greenside+0x204>
		__ticks = 1;
    1510:	fe 01       	movw	r30, r28
    1512:	ed 57       	subi	r30, 0x7D	; 125
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	80 83       	st	Z, r24
    151e:	64 c0       	rjmp	.+200    	; 0x15e8 <greenside+0x2cc>
	else if (__tmp > 65535)
    1520:	fe 01       	movw	r30, r28
    1522:	eb 57       	subi	r30, 0x7B	; 123
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	60 81       	ld	r22, Z
    1528:	71 81       	ldd	r23, Z+1	; 0x01
    152a:	82 81       	ldd	r24, Z+2	; 0x02
    152c:	93 81       	ldd	r25, Z+3	; 0x03
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    153a:	18 16       	cp	r1, r24
    153c:	0c f0       	brlt	.+2      	; 0x1540 <greenside+0x224>
    153e:	43 c0       	rjmp	.+134    	; 0x15c6 <greenside+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1540:	fe 01       	movw	r30, r28
    1542:	e7 57       	subi	r30, 0x77	; 119
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	60 81       	ld	r22, Z
    1548:	71 81       	ldd	r23, Z+1	; 0x01
    154a:	82 81       	ldd	r24, Z+2	; 0x02
    154c:	93 81       	ldd	r25, Z+3	; 0x03
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e2       	ldi	r20, 0x20	; 32
    1554:	51 e4       	ldi	r21, 0x41	; 65
    1556:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	8e 01       	movw	r16, r28
    1560:	0d 57       	subi	r16, 0x7D	; 125
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	f8 01       	movw	r30, r16
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
    1576:	1f c0       	rjmp	.+62     	; 0x15b6 <greenside+0x29a>
    1578:	fe 01       	movw	r30, r28
    157a:	ef 57       	subi	r30, 0x7F	; 127
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	8a ef       	ldi	r24, 0xFA	; 250
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	80 83       	st	Z, r24
    1586:	fe 01       	movw	r30, r28
    1588:	ef 57       	subi	r30, 0x7F	; 127
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	80 81       	ld	r24, Z
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <greenside+0x274>
    1594:	fe 01       	movw	r30, r28
    1596:	ef 57       	subi	r30, 0x7F	; 127
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	91 83       	std	Z+1, r25	; 0x01
    159c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159e:	de 01       	movw	r26, r28
    15a0:	ad 57       	subi	r26, 0x7D	; 125
    15a2:	bf 4f       	sbci	r27, 0xFF	; 255
    15a4:	fe 01       	movw	r30, r28
    15a6:	ed 57       	subi	r30, 0x7D	; 125
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	11 96       	adiw	r26, 0x01	; 1
    15b2:	9c 93       	st	X, r25
    15b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b6:	fe 01       	movw	r30, r28
    15b8:	ed 57       	subi	r30, 0x7D	; 125
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	d1 f6       	brne	.-76     	; 0x1578 <greenside+0x25c>
    15c4:	9a c5       	rjmp	.+2868   	; 0x20fa <greenside+0xdde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c6:	8e 01       	movw	r16, r28
    15c8:	0d 57       	subi	r16, 0x7D	; 125
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
    15cc:	fe 01       	movw	r30, r28
    15ce:	eb 57       	subi	r30, 0x7B	; 123
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	60 81       	ld	r22, Z
    15d4:	71 81       	ldd	r23, Z+1	; 0x01
    15d6:	82 81       	ldd	r24, Z+2	; 0x02
    15d8:	93 81       	ldd	r25, Z+3	; 0x03
    15da:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	f8 01       	movw	r30, r16
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
    15e8:	de 01       	movw	r26, r28
    15ea:	a1 58       	subi	r26, 0x81	; 129
    15ec:	bf 4f       	sbci	r27, 0xFF	; 255
    15ee:	fe 01       	movw	r30, r28
    15f0:	ed 57       	subi	r30, 0x7D	; 125
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	11 96       	adiw	r26, 0x01	; 1
    15fa:	9c 93       	st	X, r25
    15fc:	8e 93       	st	-X, r24
    15fe:	fe 01       	movw	r30, r28
    1600:	e1 58       	subi	r30, 0x81	; 129
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <greenside+0x2ec>
    160c:	fe 01       	movw	r30, r28
    160e:	e1 58       	subi	r30, 0x81	; 129
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
    1616:	71 c5       	rjmp	.+2786   	; 0x20fa <greenside+0xdde>
					{
						_delay_ms(1000);
			
					}
					else if(current_position == 6)
    1618:	fe 01       	movw	r30, r28
    161a:	e0 57       	subi	r30, 0x70	; 112
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	80 81       	ld	r24, Z
    1620:	86 30       	cpi	r24, 0x06	; 6
    1622:	09 f0       	breq	.+2      	; 0x1626 <greenside+0x30a>
    1624:	e5 c2       	rjmp	.+1482   	; 0x1bf0 <greenside+0x8d4>
					{
						servo_set_left_grabber_position(20);
    1626:	84 e1       	ldi	r24, 0x14	; 20
    1628:	1c d8       	rcall	.-4040   	; 0x662 <servo_set_left_grabber_position>
    162a:	fe 01       	movw	r30, r28
    162c:	e5 58       	subi	r30, 0x85	; 133
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a8 e4       	ldi	r26, 0x48	; 72
    1636:	b4 e4       	ldi	r27, 0x44	; 68
    1638:	80 83       	st	Z, r24
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	a2 83       	std	Z+2, r26	; 0x02
    163e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1640:	8e 01       	movw	r16, r28
    1642:	09 58       	subi	r16, 0x89	; 137
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	fe 01       	movw	r30, r28
    1648:	e5 58       	subi	r30, 0x85	; 133
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	60 81       	ld	r22, Z
    164e:	71 81       	ldd	r23, Z+1	; 0x01
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	93 81       	ldd	r25, Z+3	; 0x03
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e4       	ldi	r19, 0x40	; 64
    1658:	4c e1       	ldi	r20, 0x1C	; 28
    165a:	55 e4       	ldi	r21, 0x45	; 69
    165c:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	f8 01       	movw	r30, r16
    1666:	80 83       	st	Z, r24
    1668:	91 83       	std	Z+1, r25	; 0x01
    166a:	a2 83       	std	Z+2, r26	; 0x02
    166c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    166e:	fe 01       	movw	r30, r28
    1670:	e9 58       	subi	r30, 0x89	; 137
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	60 81       	ld	r22, Z
    1676:	71 81       	ldd	r23, Z+1	; 0x01
    1678:	82 81       	ldd	r24, Z+2	; 0x02
    167a:	93 81       	ldd	r25, Z+3	; 0x03
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e8       	ldi	r20, 0x80	; 128
    1682:	5f e3       	ldi	r21, 0x3F	; 63
    1684:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    1688:	88 23       	and	r24, r24
    168a:	44 f4       	brge	.+16     	; 0x169c <greenside+0x380>
		__ticks = 1;
    168c:	fe 01       	movw	r30, r28
    168e:	eb 58       	subi	r30, 0x8B	; 139
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
    169a:	64 c0       	rjmp	.+200    	; 0x1764 <greenside+0x448>
	else if (__tmp > 65535)
    169c:	fe 01       	movw	r30, r28
    169e:	e9 58       	subi	r30, 0x89	; 137
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	4f e7       	ldi	r20, 0x7F	; 127
    16b0:	57 e4       	ldi	r21, 0x47	; 71
    16b2:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    16b6:	18 16       	cp	r1, r24
    16b8:	0c f0       	brlt	.+2      	; 0x16bc <greenside+0x3a0>
    16ba:	43 c0       	rjmp	.+134    	; 0x1742 <greenside+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16bc:	fe 01       	movw	r30, r28
    16be:	e5 58       	subi	r30, 0x85	; 133
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e2       	ldi	r20, 0x20	; 32
    16d0:	51 e4       	ldi	r21, 0x41	; 65
    16d2:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	8e 01       	movw	r16, r28
    16dc:	0b 58       	subi	r16, 0x8B	; 139
    16de:	1f 4f       	sbci	r17, 0xFF	; 255
    16e0:	bc 01       	movw	r22, r24
    16e2:	cd 01       	movw	r24, r26
    16e4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	f8 01       	movw	r30, r16
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	80 83       	st	Z, r24
    16f2:	1f c0       	rjmp	.+62     	; 0x1732 <greenside+0x416>
    16f4:	fe 01       	movw	r30, r28
    16f6:	ed 58       	subi	r30, 0x8D	; 141
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	8a ef       	ldi	r24, 0xFA	; 250
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	80 83       	st	Z, r24
    1702:	fe 01       	movw	r30, r28
    1704:	ed 58       	subi	r30, 0x8D	; 141
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <greenside+0x3f0>
    1710:	fe 01       	movw	r30, r28
    1712:	ed 58       	subi	r30, 0x8D	; 141
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	91 83       	std	Z+1, r25	; 0x01
    1718:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171a:	de 01       	movw	r26, r28
    171c:	ab 58       	subi	r26, 0x8B	; 139
    171e:	bf 4f       	sbci	r27, 0xFF	; 255
    1720:	fe 01       	movw	r30, r28
    1722:	eb 58       	subi	r30, 0x8B	; 139
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	11 96       	adiw	r26, 0x01	; 1
    172e:	9c 93       	st	X, r25
    1730:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	fe 01       	movw	r30, r28
    1734:	eb 58       	subi	r30, 0x8B	; 139
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	d1 f6       	brne	.-76     	; 0x16f4 <greenside+0x3d8>
    1740:	27 c0       	rjmp	.+78     	; 0x1790 <greenside+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1742:	8e 01       	movw	r16, r28
    1744:	0b 58       	subi	r16, 0x8B	; 139
    1746:	1f 4f       	sbci	r17, 0xFF	; 255
    1748:	fe 01       	movw	r30, r28
    174a:	e9 58       	subi	r30, 0x89	; 137
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	60 81       	ld	r22, Z
    1750:	71 81       	ldd	r23, Z+1	; 0x01
    1752:	82 81       	ldd	r24, Z+2	; 0x02
    1754:	93 81       	ldd	r25, Z+3	; 0x03
    1756:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	f8 01       	movw	r30, r16
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24
    1764:	de 01       	movw	r26, r28
    1766:	af 58       	subi	r26, 0x8F	; 143
    1768:	bf 4f       	sbci	r27, 0xFF	; 255
    176a:	fe 01       	movw	r30, r28
    176c:	eb 58       	subi	r30, 0x8B	; 139
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	8d 93       	st	X+, r24
    1776:	9c 93       	st	X, r25
    1778:	fe 01       	movw	r30, r28
    177a:	ef 58       	subi	r30, 0x8F	; 143
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <greenside+0x466>
    1786:	fe 01       	movw	r30, r28
    1788:	ef 58       	subi	r30, 0x8F	; 143
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	80 83       	st	Z, r24
						_delay_ms(800);
						odometry_rotate(-40,LOW_SPEED,NULL);
    1790:	88 ed       	ldi	r24, 0xD8	; 216
    1792:	9f ef       	ldi	r25, 0xFF	; 255
    1794:	6e e1       	ldi	r22, 0x1E	; 30
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	0e 94 5f 14 	call	0x28be	; 0x28be <odometry_rotate>
    179e:	fe 01       	movw	r30, r28
    17a0:	e3 59       	subi	r30, 0x93	; 147
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	aa ef       	ldi	r26, 0xFA	; 250
    17aa:	b3 e4       	ldi	r27, 0x43	; 67
    17ac:	80 83       	st	Z, r24
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	a2 83       	std	Z+2, r26	; 0x02
    17b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	8e 01       	movw	r16, r28
    17b6:	07 59       	subi	r16, 0x97	; 151
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	fe 01       	movw	r30, r28
    17bc:	e3 59       	subi	r30, 0x93	; 147
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e4       	ldi	r19, 0x40	; 64
    17cc:	4c e1       	ldi	r20, 0x1C	; 28
    17ce:	55 e4       	ldi	r21, 0x45	; 69
    17d0:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	f8 01       	movw	r30, r16
    17da:	80 83       	st	Z, r24
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	a2 83       	std	Z+2, r26	; 0x02
    17e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17e2:	fe 01       	movw	r30, r28
    17e4:	e7 59       	subi	r30, 0x97	; 151
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	44 f4       	brge	.+16     	; 0x1810 <greenside+0x4f4>
		__ticks = 1;
    1800:	fe 01       	movw	r30, r28
    1802:	e9 59       	subi	r30, 0x99	; 153
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	91 83       	std	Z+1, r25	; 0x01
    180c:	80 83       	st	Z, r24
    180e:	64 c0       	rjmp	.+200    	; 0x18d8 <greenside+0x5bc>
	else if (__tmp > 65535)
    1810:	fe 01       	movw	r30, r28
    1812:	e7 59       	subi	r30, 0x97	; 151
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	3f ef       	ldi	r19, 0xFF	; 255
    1822:	4f e7       	ldi	r20, 0x7F	; 127
    1824:	57 e4       	ldi	r21, 0x47	; 71
    1826:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    182a:	18 16       	cp	r1, r24
    182c:	0c f0       	brlt	.+2      	; 0x1830 <greenside+0x514>
    182e:	43 c0       	rjmp	.+134    	; 0x18b6 <greenside+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1830:	fe 01       	movw	r30, r28
    1832:	e3 59       	subi	r30, 0x93	; 147
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	60 81       	ld	r22, Z
    1838:	71 81       	ldd	r23, Z+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e2       	ldi	r20, 0x20	; 32
    1844:	51 e4       	ldi	r21, 0x41	; 65
    1846:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	8e 01       	movw	r16, r28
    1850:	09 59       	subi	r16, 0x99	; 153
    1852:	1f 4f       	sbci	r17, 0xFF	; 255
    1854:	bc 01       	movw	r22, r24
    1856:	cd 01       	movw	r24, r26
    1858:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	f8 01       	movw	r30, r16
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
    1866:	1f c0       	rjmp	.+62     	; 0x18a6 <greenside+0x58a>
    1868:	fe 01       	movw	r30, r28
    186a:	eb 59       	subi	r30, 0x9B	; 155
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	8a ef       	ldi	r24, 0xFA	; 250
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	80 83       	st	Z, r24
    1876:	fe 01       	movw	r30, r28
    1878:	eb 59       	subi	r30, 0x9B	; 155
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <greenside+0x564>
    1884:	fe 01       	movw	r30, r28
    1886:	eb 59       	subi	r30, 0x9B	; 155
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    188e:	de 01       	movw	r26, r28
    1890:	a9 59       	subi	r26, 0x99	; 153
    1892:	bf 4f       	sbci	r27, 0xFF	; 255
    1894:	fe 01       	movw	r30, r28
    1896:	e9 59       	subi	r30, 0x99	; 153
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	11 96       	adiw	r26, 0x01	; 1
    18a2:	9c 93       	st	X, r25
    18a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a6:	fe 01       	movw	r30, r28
    18a8:	e9 59       	subi	r30, 0x99	; 153
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	d1 f6       	brne	.-76     	; 0x1868 <greenside+0x54c>
    18b4:	27 c0       	rjmp	.+78     	; 0x1904 <greenside+0x5e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	8e 01       	movw	r16, r28
    18b8:	09 59       	subi	r16, 0x99	; 153
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	fe 01       	movw	r30, r28
    18be:	e7 59       	subi	r30, 0x97	; 151
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	f8 01       	movw	r30, r16
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
    18d8:	de 01       	movw	r26, r28
    18da:	ad 59       	subi	r26, 0x9D	; 157
    18dc:	bf 4f       	sbci	r27, 0xFF	; 255
    18de:	fe 01       	movw	r30, r28
    18e0:	e9 59       	subi	r30, 0x99	; 153
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	8d 93       	st	X+, r24
    18ea:	9c 93       	st	X, r25
    18ec:	fe 01       	movw	r30, r28
    18ee:	ed 59       	subi	r30, 0x9D	; 157
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <greenside+0x5da>
    18fa:	fe 01       	movw	r30, r28
    18fc:	ed 59       	subi	r30, 0x9D	; 157
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	80 83       	st	Z, r24
						_delay_ms(500);
						servo_set_right_grabber_position(100);
    1904:	84 e6       	ldi	r24, 0x64	; 100
    1906:	0e 94 76 03 	call	0x6ec	; 0x6ec <servo_set_right_grabber_position>
    190a:	fe 01       	movw	r30, r28
    190c:	e1 5a       	subi	r30, 0xA1	; 161
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a8 e4       	ldi	r26, 0x48	; 72
    1916:	b4 e4       	ldi	r27, 0x44	; 68
    1918:	80 83       	st	Z, r24
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	a2 83       	std	Z+2, r26	; 0x02
    191e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1920:	8e 01       	movw	r16, r28
    1922:	05 5a       	subi	r16, 0xA5	; 165
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	fe 01       	movw	r30, r28
    1928:	e1 5a       	subi	r30, 0xA1	; 161
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	60 81       	ld	r22, Z
    192e:	71 81       	ldd	r23, Z+1	; 0x01
    1930:	82 81       	ldd	r24, Z+2	; 0x02
    1932:	93 81       	ldd	r25, Z+3	; 0x03
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e4       	ldi	r19, 0x40	; 64
    1938:	4c e1       	ldi	r20, 0x1C	; 28
    193a:	55 e4       	ldi	r21, 0x45	; 69
    193c:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	f8 01       	movw	r30, r16
    1946:	80 83       	st	Z, r24
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	a2 83       	std	Z+2, r26	; 0x02
    194c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    194e:	fe 01       	movw	r30, r28
    1950:	e5 5a       	subi	r30, 0xA5	; 165
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5f e3       	ldi	r21, 0x3F	; 63
    1964:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    1968:	88 23       	and	r24, r24
    196a:	44 f4       	brge	.+16     	; 0x197c <greenside+0x660>
		__ticks = 1;
    196c:	fe 01       	movw	r30, r28
    196e:	e7 5a       	subi	r30, 0xA7	; 167
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
    197a:	64 c0       	rjmp	.+200    	; 0x1a44 <greenside+0x728>
	else if (__tmp > 65535)
    197c:	fe 01       	movw	r30, r28
    197e:	e5 5a       	subi	r30, 0xA5	; 165
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    1996:	18 16       	cp	r1, r24
    1998:	0c f0       	brlt	.+2      	; 0x199c <greenside+0x680>
    199a:	43 c0       	rjmp	.+134    	; 0x1a22 <greenside+0x706>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	fe 01       	movw	r30, r28
    199e:	e1 5a       	subi	r30, 0xA1	; 161
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e2       	ldi	r20, 0x20	; 32
    19b0:	51 e4       	ldi	r21, 0x41	; 65
    19b2:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8e 01       	movw	r16, r28
    19bc:	07 5a       	subi	r16, 0xA7	; 167
    19be:	1f 4f       	sbci	r17, 0xFF	; 255
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	f8 01       	movw	r30, r16
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	1f c0       	rjmp	.+62     	; 0x1a12 <greenside+0x6f6>
    19d4:	fe 01       	movw	r30, r28
    19d6:	e9 5a       	subi	r30, 0xA9	; 169
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	8a ef       	ldi	r24, 0xFA	; 250
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
    19e2:	fe 01       	movw	r30, r28
    19e4:	e9 5a       	subi	r30, 0xA9	; 169
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <greenside+0x6d0>
    19f0:	fe 01       	movw	r30, r28
    19f2:	e9 5a       	subi	r30, 0xA9	; 169
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fa:	de 01       	movw	r26, r28
    19fc:	a7 5a       	subi	r26, 0xA7	; 167
    19fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1a00:	fe 01       	movw	r30, r28
    1a02:	e7 5a       	subi	r30, 0xA7	; 167
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	11 96       	adiw	r26, 0x01	; 1
    1a0e:	9c 93       	st	X, r25
    1a10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a12:	fe 01       	movw	r30, r28
    1a14:	e7 5a       	subi	r30, 0xA7	; 167
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 81       	ld	r24, Z
    1a1a:	91 81       	ldd	r25, Z+1	; 0x01
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	d1 f6       	brne	.-76     	; 0x19d4 <greenside+0x6b8>
    1a20:	27 c0       	rjmp	.+78     	; 0x1a70 <greenside+0x754>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	8e 01       	movw	r16, r28
    1a24:	07 5a       	subi	r16, 0xA7	; 167
    1a26:	1f 4f       	sbci	r17, 0xFF	; 255
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e5 5a       	subi	r30, 0xA5	; 165
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	60 81       	ld	r22, Z
    1a30:	71 81       	ldd	r23, Z+1	; 0x01
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	f8 01       	movw	r30, r16
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	80 83       	st	Z, r24
    1a44:	de 01       	movw	r26, r28
    1a46:	ab 5a       	subi	r26, 0xAB	; 171
    1a48:	bf 4f       	sbci	r27, 0xFF	; 255
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e7 5a       	subi	r30, 0xA7	; 167
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	80 81       	ld	r24, Z
    1a52:	91 81       	ldd	r25, Z+1	; 0x01
    1a54:	8d 93       	st	X+, r24
    1a56:	9c 93       	st	X, r25
    1a58:	fe 01       	movw	r30, r28
    1a5a:	eb 5a       	subi	r30, 0xAB	; 171
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <greenside+0x746>
    1a66:	fe 01       	movw	r30, r28
    1a68:	eb 5a       	subi	r30, 0xAB	; 171
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	80 83       	st	Z, r24
						_delay_ms(800);
						odometry_move_straight(-200,LOW_SPEED,NULL);
    1a70:	88 e3       	ldi	r24, 0x38	; 56
    1a72:	9f ef       	ldi	r25, 0xFF	; 255
    1a74:	6e e1       	ldi	r22, 0x1E	; 30
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	ea d4       	rcall	.+2516   	; 0x2450 <odometry_move_straight>
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	ef 5a       	subi	r30, 0xAF	; 175
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	aa ef       	ldi	r26, 0xFA	; 250
    1a88:	b3 e4       	ldi	r27, 0x43	; 67
    1a8a:	80 83       	st	Z, r24
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	a2 83       	std	Z+2, r26	; 0x02
    1a90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a92:	8e 01       	movw	r16, r28
    1a94:	03 5b       	subi	r16, 0xB3	; 179
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ef 5a       	subi	r30, 0xAF	; 175
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e4       	ldi	r19, 0x40	; 64
    1aaa:	4c e1       	ldi	r20, 0x1C	; 28
    1aac:	55 e4       	ldi	r21, 0x45	; 69
    1aae:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	80 83       	st	Z, r24
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	a2 83       	std	Z+2, r26	; 0x02
    1abe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e3 5b       	subi	r30, 0xB3	; 179
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	44 f4       	brge	.+16     	; 0x1aee <greenside+0x7d2>
		__ticks = 1;
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e5 5b       	subi	r30, 0xB5	; 181
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	80 83       	st	Z, r24
    1aec:	64 c0       	rjmp	.+200    	; 0x1bb6 <greenside+0x89a>
	else if (__tmp > 65535)
    1aee:	fe 01       	movw	r30, r28
    1af0:	e3 5b       	subi	r30, 0xB3	; 179
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	0c f0       	brlt	.+2      	; 0x1b0e <greenside+0x7f2>
    1b0c:	43 c0       	rjmp	.+134    	; 0x1b94 <greenside+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	fe 01       	movw	r30, r28
    1b10:	ef 5a       	subi	r30, 0xAF	; 175
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8e 01       	movw	r16, r28
    1b2e:	05 5b       	subi	r16, 0xB5	; 181
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	f8 01       	movw	r30, r16
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24
    1b44:	1f c0       	rjmp	.+62     	; 0x1b84 <greenside+0x868>
    1b46:	fe 01       	movw	r30, r28
    1b48:	e7 5b       	subi	r30, 0xB7	; 183
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	8a ef       	ldi	r24, 0xFA	; 250
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	80 83       	st	Z, r24
    1b54:	fe 01       	movw	r30, r28
    1b56:	e7 5b       	subi	r30, 0xB7	; 183
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <greenside+0x842>
    1b62:	fe 01       	movw	r30, r28
    1b64:	e7 5b       	subi	r30, 0xB7	; 183
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	de 01       	movw	r26, r28
    1b6e:	a5 5b       	subi	r26, 0xB5	; 181
    1b70:	bf 4f       	sbci	r27, 0xFF	; 255
    1b72:	fe 01       	movw	r30, r28
    1b74:	e5 5b       	subi	r30, 0xB5	; 181
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	11 96       	adiw	r26, 0x01	; 1
    1b80:	9c 93       	st	X, r25
    1b82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	fe 01       	movw	r30, r28
    1b86:	e5 5b       	subi	r30, 0xB5	; 181
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	80 81       	ld	r24, Z
    1b8c:	91 81       	ldd	r25, Z+1	; 0x01
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	d1 f6       	brne	.-76     	; 0x1b46 <greenside+0x82a>
    1b92:	27 c0       	rjmp	.+78     	; 0x1be2 <greenside+0x8c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b94:	8e 01       	movw	r16, r28
    1b96:	05 5b       	subi	r16, 0xB5	; 181
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e3 5b       	subi	r30, 0xB3	; 179
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	80 83       	st	Z, r24
    1bb6:	de 01       	movw	r26, r28
    1bb8:	a9 5b       	subi	r26, 0xB9	; 185
    1bba:	bf 4f       	sbci	r27, 0xFF	; 255
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e5 5b       	subi	r30, 0xB5	; 181
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	8d 93       	st	X+, r24
    1bc8:	9c 93       	st	X, r25
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e9 5b       	subi	r30, 0xB9	; 185
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <greenside+0x8b8>
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e9 5b       	subi	r30, 0xB9	; 185
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	80 83       	st	Z, r24
						_delay_ms(500);
						odometry_set_angle(-90,LOW_SPEED,NULL);
    1be2:	86 ea       	ldi	r24, 0xA6	; 166
    1be4:	9f ef       	ldi	r25, 0xFF	; 255
    1be6:	6e e1       	ldi	r22, 0x1E	; 30
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	11 d7       	rcall	.+3618   	; 0x2a10 <odometry_set_angle>
    1bee:	85 c2       	rjmp	.+1290   	; 0x20fa <greenside+0xdde>
					
					}
					else if(current_position == 10 || current_position == 11)
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e0 57       	subi	r30, 0x70	; 112
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8a 30       	cpi	r24, 0x0A	; 10
    1bfa:	39 f0       	breq	.+14     	; 0x1c0a <greenside+0x8ee>
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e0 57       	subi	r30, 0x70	; 112
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 81       	ld	r24, Z
    1c04:	8b 30       	cpi	r24, 0x0B	; 11
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <greenside+0x8ee>
    1c08:	86 c0       	rjmp	.+268    	; 0x1d16 <greenside+0x9fa>
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	ed 5b       	subi	r30, 0xBD	; 189
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	aa e7       	ldi	r26, 0x7A	; 122
    1c16:	b4 e4       	ldi	r27, 0x44	; 68
    1c18:	80 83       	st	Z, r24
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	a2 83       	std	Z+2, r26	; 0x02
    1c1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	8e 01       	movw	r16, r28
    1c22:	01 5c       	subi	r16, 0xC1	; 193
    1c24:	1f 4f       	sbci	r17, 0xFF	; 255
    1c26:	fe 01       	movw	r30, r28
    1c28:	ed 5b       	subi	r30, 0xBD	; 189
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	60 81       	ld	r22, Z
    1c2e:	71 81       	ldd	r23, Z+1	; 0x01
    1c30:	82 81       	ldd	r24, Z+2	; 0x02
    1c32:	93 81       	ldd	r25, Z+3	; 0x03
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e4       	ldi	r19, 0x40	; 64
    1c38:	4c e1       	ldi	r20, 0x1C	; 28
    1c3a:	55 e4       	ldi	r21, 0x45	; 69
    1c3c:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	f8 01       	movw	r30, r16
    1c46:	80 83       	st	Z, r24
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	a2 83       	std	Z+2, r26	; 0x02
    1c4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ff 96       	adiw	r30, 0x3f	; 63
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <greenside+0x958>
		__ticks = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9e af       	std	Y+62, r25	; 0x3e
    1c70:	8d af       	std	Y+61, r24	; 0x3d
    1c72:	46 c0       	rjmp	.+140    	; 0x1d00 <greenside+0x9e4>
	else if (__tmp > 65535)
    1c74:	fe 01       	movw	r30, r28
    1c76:	ff 96       	adiw	r30, 0x3f	; 63
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	64 f5       	brge	.+88     	; 0x1ce8 <greenside+0x9cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	fe 01       	movw	r30, r28
    1c92:	ed 5b       	subi	r30, 0xBD	; 189
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	60 81       	ld	r22, Z
    1c98:	71 81       	ldd	r23, Z+1	; 0x01
    1c9a:	82 81       	ldd	r24, Z+2	; 0x02
    1c9c:	93 81       	ldd	r25, Z+3	; 0x03
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9e af       	std	Y+62, r25	; 0x3e
    1cbc:	8d af       	std	Y+61, r24	; 0x3d
    1cbe:	0f c0       	rjmp	.+30     	; 0x1cde <greenside+0x9c2>
    1cc0:	8a ef       	ldi	r24, 0xFA	; 250
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9c af       	std	Y+60, r25	; 0x3c
    1cc6:	8b af       	std	Y+59, r24	; 0x3b
    1cc8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cca:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <greenside+0x9b0>
    1cd0:	9c af       	std	Y+60, r25	; 0x3c
    1cd2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	9e af       	std	Y+62, r25	; 0x3e
    1cdc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cde:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ce0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	69 f7       	brne	.-38     	; 0x1cc0 <greenside+0x9a4>
    1ce6:	09 c2       	rjmp	.+1042   	; 0x20fa <greenside+0xdde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce8:	fe 01       	movw	r30, r28
    1cea:	ff 96       	adiw	r30, 0x3f	; 63
    1cec:	60 81       	ld	r22, Z
    1cee:	71 81       	ldd	r23, Z+1	; 0x01
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e af       	std	Y+62, r25	; 0x3e
    1cfe:	8d af       	std	Y+61, r24	; 0x3d
    1d00:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d02:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d04:	9a af       	std	Y+58, r25	; 0x3a
    1d06:	89 af       	std	Y+57, r24	; 0x39
    1d08:	89 ad       	ldd	r24, Y+57	; 0x39
    1d0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <greenside+0x9f0>
    1d10:	9a af       	std	Y+58, r25	; 0x3a
    1d12:	89 af       	std	Y+57, r24	; 0x39
    1d14:	f2 c1       	rjmp	.+996    	; 0x20fa <greenside+0xdde>
					{
						_delay_ms(1000);
					}
					else if(current_position == 8)
    1d16:	fe 01       	movw	r30, r28
    1d18:	e0 57       	subi	r30, 0x70	; 112
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	88 30       	cpi	r24, 0x08	; 8
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <greenside+0xa08>
    1d22:	73 c0       	rjmp	.+230    	; 0x1e0a <greenside+0xaee>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e8       	ldi	r25, 0x80	; 128
    1d28:	ab e3       	ldi	r26, 0x3B	; 59
    1d2a:	b5 e4       	ldi	r27, 0x45	; 69
    1d2c:	8d ab       	std	Y+53, r24	; 0x35
    1d2e:	9e ab       	std	Y+54, r25	; 0x36
    1d30:	af ab       	std	Y+55, r26	; 0x37
    1d32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d34:	6d a9       	ldd	r22, Y+53	; 0x35
    1d36:	7e a9       	ldd	r23, Y+54	; 0x36
    1d38:	8f a9       	ldd	r24, Y+55	; 0x37
    1d3a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e4       	ldi	r19, 0x40	; 64
    1d40:	4c e1       	ldi	r20, 0x1C	; 28
    1d42:	55 e4       	ldi	r21, 0x45	; 69
    1d44:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	89 ab       	std	Y+49, r24	; 0x31
    1d4e:	9a ab       	std	Y+50, r25	; 0x32
    1d50:	ab ab       	std	Y+51, r26	; 0x33
    1d52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d54:	69 a9       	ldd	r22, Y+49	; 0x31
    1d56:	7a a9       	ldd	r23, Y+50	; 0x32
    1d58:	8b a9       	ldd	r24, Y+51	; 0x33
    1d5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	5f e3       	ldi	r21, 0x3F	; 63
    1d64:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    1d68:	88 23       	and	r24, r24
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <greenside+0xa5a>
		__ticks = 1;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	98 ab       	std	Y+48, r25	; 0x30
    1d72:	8f a7       	std	Y+47, r24	; 0x2f
    1d74:	3f c0       	rjmp	.+126    	; 0x1df4 <greenside+0xad8>
	else if (__tmp > 65535)
    1d76:	69 a9       	ldd	r22, Y+49	; 0x31
    1d78:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	3f ef       	ldi	r19, 0xFF	; 255
    1d82:	4f e7       	ldi	r20, 0x7F	; 127
    1d84:	57 e4       	ldi	r21, 0x47	; 71
    1d86:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	4c f5       	brge	.+82     	; 0x1de0 <greenside+0xac4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d90:	7e a9       	ldd	r23, Y+54	; 0x36
    1d92:	8f a9       	ldd	r24, Y+55	; 0x37
    1d94:	98 ad       	ldd	r25, Y+56	; 0x38
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e2       	ldi	r20, 0x20	; 32
    1d9c:	51 e4       	ldi	r21, 0x41	; 65
    1d9e:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	bc 01       	movw	r22, r24
    1da8:	cd 01       	movw	r24, r26
    1daa:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	98 ab       	std	Y+48, r25	; 0x30
    1db4:	8f a7       	std	Y+47, r24	; 0x2f
    1db6:	0f c0       	rjmp	.+30     	; 0x1dd6 <greenside+0xaba>
    1db8:	8a ef       	ldi	r24, 0xFA	; 250
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9e a7       	std	Y+46, r25	; 0x2e
    1dbe:	8d a7       	std	Y+45, r24	; 0x2d
    1dc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <greenside+0xaa8>
    1dc8:	9e a7       	std	Y+46, r25	; 0x2e
    1dca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dce:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	98 ab       	std	Y+48, r25	; 0x30
    1dd4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	69 f7       	brne	.-38     	; 0x1db8 <greenside+0xa9c>
    1dde:	8d c1       	rjmp	.+794    	; 0x20fa <greenside+0xdde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de0:	69 a9       	ldd	r22, Y+49	; 0x31
    1de2:	7a a9       	ldd	r23, Y+50	; 0x32
    1de4:	8b a9       	ldd	r24, Y+51	; 0x33
    1de6:	9c a9       	ldd	r25, Y+52	; 0x34
    1de8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	98 ab       	std	Y+48, r25	; 0x30
    1df2:	8f a7       	std	Y+47, r24	; 0x2f
    1df4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df6:	98 a9       	ldd	r25, Y+48	; 0x30
    1df8:	9c a7       	std	Y+44, r25	; 0x2c
    1dfa:	8b a7       	std	Y+43, r24	; 0x2b
    1dfc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dfe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <greenside+0xae4>
    1e04:	9c a7       	std	Y+44, r25	; 0x2c
    1e06:	8b a7       	std	Y+43, r24	; 0x2b
    1e08:	78 c1       	rjmp	.+752    	; 0x20fa <greenside+0xdde>
						odometry_rotate(-90,LOW_SPEED,NULL);
						_delay_ms(800);
						odometry_move_straight(500,LOW_SPEED,NULL);
						while(1);
					}*/
					else if(current_position == 10)
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e0 57       	subi	r30, 0x70	; 112
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	80 81       	ld	r24, Z
    1e12:	8a 30       	cpi	r24, 0x0A	; 10
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <greenside+0xafc>
    1e16:	73 c0       	rjmp	.+230    	; 0x1efe <greenside+0xbe2>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	aa e7       	ldi	r26, 0x7A	; 122
    1e1e:	b4 e4       	ldi	r27, 0x44	; 68
    1e20:	8f a3       	std	Y+39, r24	; 0x27
    1e22:	98 a7       	std	Y+40, r25	; 0x28
    1e24:	a9 a7       	std	Y+41, r26	; 0x29
    1e26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	6f a1       	ldd	r22, Y+39	; 0x27
    1e2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e4       	ldi	r19, 0x40	; 64
    1e34:	4c e1       	ldi	r20, 0x1C	; 28
    1e36:	55 e4       	ldi	r21, 0x45	; 69
    1e38:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	8b a3       	std	Y+35, r24	; 0x23
    1e42:	9c a3       	std	Y+36, r25	; 0x24
    1e44:	ad a3       	std	Y+37, r26	; 0x25
    1e46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e48:	6b a1       	ldd	r22, Y+35	; 0x23
    1e4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <greenside+0xb4e>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9a a3       	std	Y+34, r25	; 0x22
    1e66:	89 a3       	std	Y+33, r24	; 0x21
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <greenside+0xbcc>
	else if (__tmp > 65535)
    1e6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e70:	9e a1       	ldd	r25, Y+38	; 0x26
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <greenside+0xbb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	6f a1       	ldd	r22, Y+39	; 0x27
    1e84:	78 a5       	ldd	r23, Y+40	; 0x28
    1e86:	89 a5       	ldd	r24, Y+41	; 0x29
    1e88:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9a a3       	std	Y+34, r25	; 0x22
    1ea8:	89 a3       	std	Y+33, r24	; 0x21
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <greenside+0xbae>
    1eac:	8a ef       	ldi	r24, 0xFA	; 250
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	98 a3       	std	Y+32, r25	; 0x20
    1eb2:	8f 8f       	std	Y+31, r24	; 0x1f
    1eb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eb6:	98 a1       	ldd	r25, Y+32	; 0x20
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <greenside+0xb9c>
    1ebc:	98 a3       	std	Y+32, r25	; 0x20
    1ebe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9a a3       	std	Y+34, r25	; 0x22
    1ec8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	89 a1       	ldd	r24, Y+33	; 0x21
    1ecc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <greenside+0xb90>
    1ed2:	13 c1       	rjmp	.+550    	; 0x20fa <greenside+0xdde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eda:	9e a1       	ldd	r25, Y+38	; 0x26
    1edc:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9a a3       	std	Y+34, r25	; 0x22
    1ee6:	89 a3       	std	Y+33, r24	; 0x21
    1ee8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eea:	9a a1       	ldd	r25, Y+34	; 0x22
    1eec:	9e 8f       	std	Y+30, r25	; 0x1e
    1eee:	8d 8f       	std	Y+29, r24	; 0x1d
    1ef0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ef2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <greenside+0xbd8>
    1ef8:	9e 8f       	std	Y+30, r25	; 0x1e
    1efa:	8d 8f       	std	Y+29, r24	; 0x1d
    1efc:	fe c0       	rjmp	.+508    	; 0x20fa <greenside+0xdde>
					{
						_delay_ms(1000);
					}
					else if(current_position == 11)
    1efe:	fe 01       	movw	r30, r28
    1f00:	e0 57       	subi	r30, 0x70	; 112
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	80 81       	ld	r24, Z
    1f06:	8b 30       	cpi	r24, 0x0B	; 11
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <greenside+0xbf0>
    1f0a:	73 c0       	rjmp	.+230    	; 0x1ff2 <greenside+0xcd6>
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	aa ef       	ldi	r26, 0xFA	; 250
    1f12:	b4 e4       	ldi	r27, 0x44	; 68
    1f14:	89 8f       	std	Y+25, r24	; 0x19
    1f16:	9a 8f       	std	Y+26, r25	; 0x1a
    1f18:	ab 8f       	std	Y+27, r26	; 0x1b
    1f1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e4       	ldi	r19, 0x40	; 64
    1f28:	4c e1       	ldi	r20, 0x1C	; 28
    1f2a:	55 e4       	ldi	r21, 0x45	; 69
    1f2c:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	8d 8b       	std	Y+21, r24	; 0x15
    1f36:	9e 8b       	std	Y+22, r25	; 0x16
    1f38:	af 8b       	std	Y+23, r26	; 0x17
    1f3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f40:	8f 89       	ldd	r24, Y+23	; 0x17
    1f42:	98 8d       	ldd	r25, Y+24	; 0x18
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e8       	ldi	r20, 0x80	; 128
    1f4a:	5f e3       	ldi	r21, 0x3F	; 63
    1f4c:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    1f50:	88 23       	and	r24, r24
    1f52:	2c f4       	brge	.+10     	; 0x1f5e <greenside+0xc42>
		__ticks = 1;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	9c 8b       	std	Y+20, r25	; 0x14
    1f5a:	8b 8b       	std	Y+19, r24	; 0x13
    1f5c:	3f c0       	rjmp	.+126    	; 0x1fdc <greenside+0xcc0>
	else if (__tmp > 65535)
    1f5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f60:	7e 89       	ldd	r23, Y+22	; 0x16
    1f62:	8f 89       	ldd	r24, Y+23	; 0x17
    1f64:	98 8d       	ldd	r25, Y+24	; 0x18
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	3f ef       	ldi	r19, 0xFF	; 255
    1f6a:	4f e7       	ldi	r20, 0x7F	; 127
    1f6c:	57 e4       	ldi	r21, 0x47	; 71
    1f6e:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    1f72:	18 16       	cp	r1, r24
    1f74:	4c f5       	brge	.+82     	; 0x1fc8 <greenside+0xcac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f76:	69 8d       	ldd	r22, Y+25	; 0x19
    1f78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e2       	ldi	r20, 0x20	; 32
    1f84:	51 e4       	ldi	r21, 0x41	; 65
    1f86:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	bc 01       	movw	r22, r24
    1f90:	cd 01       	movw	r24, r26
    1f92:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	9c 8b       	std	Y+20, r25	; 0x14
    1f9c:	8b 8b       	std	Y+19, r24	; 0x13
    1f9e:	0f c0       	rjmp	.+30     	; 0x1fbe <greenside+0xca2>
    1fa0:	8a ef       	ldi	r24, 0xFA	; 250
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	9a 8b       	std	Y+18, r25	; 0x12
    1fa6:	89 8b       	std	Y+17, r24	; 0x11
    1fa8:	89 89       	ldd	r24, Y+17	; 0x11
    1faa:	9a 89       	ldd	r25, Y+18	; 0x12
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <greenside+0xc90>
    1fb0:	9a 8b       	std	Y+18, r25	; 0x12
    1fb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	9c 8b       	std	Y+20, r25	; 0x14
    1fbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	69 f7       	brne	.-38     	; 0x1fa0 <greenside+0xc84>
    1fc6:	99 c0       	rjmp	.+306    	; 0x20fa <greenside+0xdde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fca:	7e 89       	ldd	r23, Y+22	; 0x16
    1fcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fce:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd0:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	9c 8b       	std	Y+20, r25	; 0x14
    1fda:	8b 8b       	std	Y+19, r24	; 0x13
    1fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fde:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe0:	98 8b       	std	Y+16, r25	; 0x10
    1fe2:	8f 87       	std	Y+15, r24	; 0x0f
    1fe4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe6:	98 89       	ldd	r25, Y+16	; 0x10
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <greenside+0xccc>
    1fec:	98 8b       	std	Y+16, r25	; 0x10
    1fee:	8f 87       	std	Y+15, r24	; 0x0f
    1ff0:	84 c0       	rjmp	.+264    	; 0x20fa <greenside+0xdde>
					{
						_delay_ms(2000);
					}
					else if(current_position == 12)
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e0 57       	subi	r30, 0x70	; 112
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	8c 30       	cpi	r24, 0x0C	; 12
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <greenside+0xce4>
    1ffe:	73 c0       	rjmp	.+230    	; 0x20e6 <greenside+0xdca>
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e8       	ldi	r25, 0x80	; 128
    2004:	ab eb       	ldi	r26, 0xBB	; 187
    2006:	b4 e4       	ldi	r27, 0x44	; 68
    2008:	8b 87       	std	Y+11, r24	; 0x0b
    200a:	9c 87       	std	Y+12, r25	; 0x0c
    200c:	ad 87       	std	Y+13, r26	; 0x0d
    200e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2010:	6b 85       	ldd	r22, Y+11	; 0x0b
    2012:	7c 85       	ldd	r23, Y+12	; 0x0c
    2014:	8d 85       	ldd	r24, Y+13	; 0x0d
    2016:	9e 85       	ldd	r25, Y+14	; 0x0e
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e4       	ldi	r19, 0x40	; 64
    201c:	4c e1       	ldi	r20, 0x1C	; 28
    201e:	55 e4       	ldi	r21, 0x45	; 69
    2020:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	8f 83       	std	Y+7, r24	; 0x07
    202a:	98 87       	std	Y+8, r25	; 0x08
    202c:	a9 87       	std	Y+9, r26	; 0x09
    202e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e8       	ldi	r20, 0x80	; 128
    203e:	5f e3       	ldi	r21, 0x3F	; 63
    2040:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    2044:	88 23       	and	r24, r24
    2046:	2c f4       	brge	.+10     	; 0x2052 <greenside+0xd36>
		__ticks = 1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
    2050:	3f c0       	rjmp	.+126    	; 0x20d0 <greenside+0xdb4>
	else if (__tmp > 65535)
    2052:	6f 81       	ldd	r22, Y+7	; 0x07
    2054:	78 85       	ldd	r23, Y+8	; 0x08
    2056:	89 85       	ldd	r24, Y+9	; 0x09
    2058:	9a 85       	ldd	r25, Y+10	; 0x0a
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	3f ef       	ldi	r19, 0xFF	; 255
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	57 e4       	ldi	r21, 0x47	; 71
    2062:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    2066:	18 16       	cp	r1, r24
    2068:	4c f5       	brge	.+82     	; 0x20bc <greenside+0xda0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206a:	6b 85       	ldd	r22, Y+11	; 0x0b
    206c:	7c 85       	ldd	r23, Y+12	; 0x0c
    206e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2070:	9e 85       	ldd	r25, Y+14	; 0x0e
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e2       	ldi	r20, 0x20	; 32
    2078:	51 e4       	ldi	r21, 0x41	; 65
    207a:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	0f c0       	rjmp	.+30     	; 0x20b2 <greenside+0xd96>
    2094:	8a ef       	ldi	r24, 0xFA	; 250
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	9c 83       	std	Y+4, r25	; 0x04
    209a:	8b 83       	std	Y+3, r24	; 0x03
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <greenside+0xd84>
    20a4:	9c 83       	std	Y+4, r25	; 0x04
    20a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	69 f7       	brne	.-38     	; 0x2094 <greenside+0xd78>
    20ba:	1f c0       	rjmp	.+62     	; 0x20fa <greenside+0xdde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20bc:	6f 81       	ldd	r22, Y+7	; 0x07
    20be:	78 85       	ldd	r23, Y+8	; 0x08
    20c0:	89 85       	ldd	r24, Y+9	; 0x09
    20c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	8d 81       	ldd	r24, Y+5	; 0x05
    20d2:	9e 81       	ldd	r25, Y+6	; 0x06
    20d4:	9a 83       	std	Y+2, r25	; 0x02
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <greenside+0xdc0>
    20e0:	9a 83       	std	Y+2, r25	; 0x02
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	0a c0       	rjmp	.+20     	; 0x20fa <greenside+0xdde>
					{
						_delay_ms(1500);
					}
					else if(current_position == 15)
    20e6:	fe 01       	movw	r30, r28
    20e8:	e0 57       	subi	r30, 0x70	; 112
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	80 81       	ld	r24, Z
    20ee:	8f 30       	cpi	r24, 0x0F	; 15
    20f0:	21 f4       	brne	.+8      	; 0x20fa <greenside+0xdde>
					{
						PORTG = 0x00;
    20f2:	e4 e3       	ldi	r30, 0x34	; 52
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	10 82       	st	Z, r1
    20f8:	ff cf       	rjmp	.-2      	; 0x20f8 <greenside+0xddc>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    20fa:	de 01       	movw	r26, r28
    20fc:	a0 57       	subi	r26, 0x70	; 112
    20fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2100:	fe 01       	movw	r30, r28
    2102:	e0 57       	subi	r30, 0x70	; 112
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 81       	ld	r24, Z
    2108:	8f 5f       	subi	r24, 0xFF	; 255
    210a:	8c 93       	st	X, r24
    210c:	fe 01       	movw	r30, r28
    210e:	e0 57       	subi	r30, 0x70	; 112
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	80 81       	ld	r24, Z
    2114:	80 31       	cpi	r24, 0x10	; 16
    2116:	08 f4       	brcc	.+2      	; 0x211a <greenside+0xdfe>
    2118:	54 c9       	rjmp	.-3416   	; 0x13c2 <greenside+0xa6>
    211a:	40 c9       	rjmp	.-3456   	; 0x139c <greenside+0x80>

0000211c <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	67 97       	sbiw	r28, 0x17	; 23
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    2132:	90 91 42 04 	lds	r25, 0x0442
    2136:	8f 89       	ldd	r24, Y+23	; 0x17
    2138:	89 17       	cp	r24, r25
    213a:	09 f4       	brne	.+2      	; 0x213e <odometry_set_speed+0x22>
    213c:	82 c0       	rjmp	.+260    	; 0x2242 <odometry_set_speed+0x126>
	return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    213e:	86 e5       	ldi	r24, 0x56	; 86
    2140:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    2142:	8f 89       	ldd	r24, Y+23	; 0x17
    2144:	88 8b       	std	Y+16, r24	; 0x10
    2146:	72 c0       	rjmp	.+228    	; 0x222c <odometry_set_speed+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a8 e4       	ldi	r26, 0x48	; 72
    214e:	b2 e4       	ldi	r27, 0x42	; 66
    2150:	8b 87       	std	Y+11, r24	; 0x0b
    2152:	9c 87       	std	Y+12, r25	; 0x0c
    2154:	ad 87       	std	Y+13, r26	; 0x0d
    2156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	6b 85       	ldd	r22, Y+11	; 0x0b
    215a:	7c 85       	ldd	r23, Y+12	; 0x0c
    215c:	8d 85       	ldd	r24, Y+13	; 0x0d
    215e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e4       	ldi	r19, 0x40	; 64
    2164:	4c e1       	ldi	r20, 0x1C	; 28
    2166:	55 e4       	ldi	r21, 0x45	; 69
    2168:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8f 83       	std	Y+7, r24	; 0x07
    2172:	98 87       	std	Y+8, r25	; 0x08
    2174:	a9 87       	std	Y+9, r26	; 0x09
    2176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <odometry_set_speed+0x7e>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    219a:	6f 81       	ldd	r22, Y+7	; 0x07
    219c:	78 85       	ldd	r23, Y+8	; 0x08
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <odometry_set_speed+0xde>
    21dc:	8a ef       	ldi	r24, 0xFA	; 250
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <odometry_set_speed+0xcc>
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <odometry_set_speed+0xc0>
    2202:	14 c0       	rjmp	.+40     	; 0x222c <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <odometry_set_speed+0x108>
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	ce 01       	movw	r24, r28
    222e:	0f 96       	adiw	r24, 0x0f	; 15
    2230:	63 ec       	ldi	r22, 0xC3	; 195
    2232:	0e 94 a3 06 	call	0xd46	; 0xd46 <CAN_Write>
    2236:	88 23       	and	r24, r24
    2238:	09 f0       	breq	.+2      	; 0x223c <odometry_set_speed+0x120>
    223a:	86 cf       	rjmp	.-244    	; 0x2148 <odometry_set_speed+0x2c>
	_delay_ms(50);

	current_speed = speed;
    223c:	8f 89       	ldd	r24, Y+23	; 0x17
    223e:	80 93 42 04 	sts	0x0442, r24
}
    2242:	67 96       	adiw	r28, 0x17	; 23
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <odometry_query_position>:

static void odometry_query_position(void)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	66 97       	sbiw	r28, 0x16	; 22
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    2268:	80 e5       	ldi	r24, 0x50	; 80
    226a:	8f 87       	std	Y+15, r24	; 0x0f
    226c:	72 c0       	rjmp	.+228    	; 0x2352 <odometry_query_position+0xfe>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a8 e4       	ldi	r26, 0x48	; 72
    2274:	b2 e4       	ldi	r27, 0x42	; 66
    2276:	8b 87       	std	Y+11, r24	; 0x0b
    2278:	9c 87       	std	Y+12, r25	; 0x0c
    227a:	ad 87       	std	Y+13, r26	; 0x0d
    227c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	8d 85       	ldd	r24, Y+13	; 0x0d
    2284:	9e 85       	ldd	r25, Y+14	; 0x0e
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e4       	ldi	r19, 0x40	; 64
    228a:	4c e1       	ldi	r20, 0x1C	; 28
    228c:	55 e4       	ldi	r21, 0x45	; 69
    228e:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8f 83       	std	Y+7, r24	; 0x07
    2298:	98 87       	std	Y+8, r25	; 0x08
    229a:	a9 87       	std	Y+9, r26	; 0x09
    229c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e8       	ldi	r20, 0x80	; 128
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	2c f4       	brge	.+10     	; 0x22c0 <odometry_query_position+0x6c>
		__ticks = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	3f c0       	rjmp	.+126    	; 0x233e <odometry_query_position+0xea>
	else if (__tmp > 65535)
    22c0:	6f 81       	ldd	r22, Y+7	; 0x07
    22c2:	78 85       	ldd	r23, Y+8	; 0x08
    22c4:	89 85       	ldd	r24, Y+9	; 0x09
    22c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	3f ef       	ldi	r19, 0xFF	; 255
    22cc:	4f e7       	ldi	r20, 0x7F	; 127
    22ce:	57 e4       	ldi	r21, 0x47	; 71
    22d0:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    22d4:	18 16       	cp	r1, r24
    22d6:	4c f5       	brge	.+82     	; 0x232a <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22da:	7c 85       	ldd	r23, Y+12	; 0x0c
    22dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22de:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e2       	ldi	r20, 0x20	; 32
    22e6:	51 e4       	ldi	r21, 0x41	; 65
    22e8:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <odometry_query_position+0xcc>
    2302:	8a ef       	ldi	r24, 0xFA	; 250
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	8b 83       	std	Y+3, r24	; 0x03
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <odometry_query_position+0xba>
    2312:	9c 83       	std	Y+4, r25	; 0x04
    2314:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	9e 81       	ldd	r25, Y+6	; 0x06
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	69 f7       	brne	.-38     	; 0x2302 <odometry_query_position+0xae>
    2328:	14 c0       	rjmp	.+40     	; 0x2352 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <odometry_query_position+0xf6>
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	ce 01       	movw	r24, r28
    2354:	0f 96       	adiw	r24, 0x0f	; 15
    2356:	63 ec       	ldi	r22, 0xC3	; 195
    2358:	0e 94 a3 06 	call	0xd46	; 0xd46 <CAN_Write>
    235c:	88 23       	and	r24, r24
    235e:	09 f0       	breq	.+2      	; 0x2362 <odometry_query_position+0x10e>
    2360:	86 cf       	rjmp	.-244    	; 0x226e <odometry_query_position+0x1a>
		_delay_ms(50);
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    2362:	ce 01       	movw	r24, r28
    2364:	0f 96       	adiw	r24, 0x0f	; 15
    2366:	61 e0       	ldi	r22, 0x01	; 1
    2368:	0e 94 2b 06 	call	0xc56	; 0xc56 <CAN_Read>
	position.state = buffer[0];
    236c:	8f 85       	ldd	r24, Y+15	; 0x0f
    236e:	80 93 ac 02 	sts	0x02AC, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    2372:	88 89       	ldd	r24, Y+16	; 0x10
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	38 2f       	mov	r19, r24
    237a:	22 27       	eor	r18, r18
    237c:	89 89       	ldd	r24, Y+17	; 0x11
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	82 2b       	or	r24, r18
    2384:	93 2b       	or	r25, r19
    2386:	90 93 a7 02 	sts	0x02A7, r25
    238a:	80 93 a6 02 	sts	0x02A6, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    238e:	8a 89       	ldd	r24, Y+18	; 0x12
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	38 2f       	mov	r19, r24
    2396:	22 27       	eor	r18, r18
    2398:	8b 89       	ldd	r24, Y+19	; 0x13
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	82 2b       	or	r24, r18
    23a0:	93 2b       	or	r25, r19
    23a2:	90 93 a9 02 	sts	0x02A9, r25
    23a6:	80 93 a8 02 	sts	0x02A8, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    23aa:	8c 89       	ldd	r24, Y+20	; 0x14
    23ac:	88 2f       	mov	r24, r24
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	38 2f       	mov	r19, r24
    23b2:	22 27       	eor	r18, r18
    23b4:	8d 89       	ldd	r24, Y+21	; 0x15
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	82 2b       	or	r24, r18
    23bc:	93 2b       	or	r25, r19
    23be:	90 93 ab 02 	sts	0x02AB, r25
    23c2:	80 93 aa 02 	sts	0x02AA, r24
}
    23c6:	66 96       	adiw	r28, 0x16	; 22
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	27 97       	sbiw	r28, 0x07	; 7
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	9e 83       	std	Y+6, r25	; 0x06
    23ee:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    23f0:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <system_get_system_time>
    23f4:	aa 27       	eor	r26, r26
    23f6:	97 fd       	sbrc	r25, 7
    23f8:	a0 95       	com	r26
    23fa:	ba 2f       	mov	r27, r26
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	ab 83       	std	Y+3, r26	; 0x03
    2402:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    2404:	27 df       	rcall	.-434    	; 0x2254 <odometry_query_position>
		if(callback != NULL)
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	71 f0       	breq	.+28     	; 0x242a <odometry_wait_until_done+0x52>
		{
			if(callback(time) == 1)
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	ab 81       	ldd	r26, Y+3	; 0x03
    2414:	bc 81       	ldd	r27, Y+4	; 0x04
    2416:	ed 81       	ldd	r30, Y+5	; 0x05
    2418:	fe 81       	ldd	r31, Y+6	; 0x06
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	09 95       	icall
    2420:	81 30       	cpi	r24, 0x01	; 1
    2422:	19 f4       	brne	.+6      	; 0x242a <odometry_wait_until_done+0x52>
				return ODOMETRY_FAIL;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	8f 83       	std	Y+7, r24	; 0x07
    2428:	09 c0       	rjmp	.+18     	; 0x243c <odometry_wait_until_done+0x64>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    242a:	80 91 ac 02 	lds	r24, 0x02AC
    242e:	8d 34       	cpi	r24, 0x4D	; 77
    2430:	49 f3       	breq	.-46     	; 0x2404 <odometry_wait_until_done+0x2c>
    2432:	80 91 ac 02 	lds	r24, 0x02AC
    2436:	82 35       	cpi	r24, 0x52	; 82
    2438:	29 f3       	breq	.-54     	; 0x2404 <odometry_wait_until_done+0x2c>
	
	return ODOMETRY_SUCCESS;
    243a:	1f 82       	std	Y+7, r1	; 0x07
    243c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    243e:	27 96       	adiw	r28, 0x07	; 7
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <odometry_move_straight>:
		odometry_query_position();
	}while(position.state == MOVING || position.state == ROTATING);
}

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	6b 97       	sbiw	r28, 0x1b	; 27
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	98 8f       	std	Y+24, r25	; 0x18
    2466:	8f 8b       	std	Y+23, r24	; 0x17
    2468:	69 8f       	std	Y+25, r22	; 0x19
    246a:	5b 8f       	std	Y+27, r21	; 0x1b
    246c:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    246e:	89 8d       	ldd	r24, Y+25	; 0x19
    2470:	55 de       	rcall	.-854    	; 0x211c <odometry_set_speed>
	distance *= -1;
    2472:	8f 89       	ldd	r24, Y+23	; 0x17
    2474:	98 8d       	ldd	r25, Y+24	; 0x18
    2476:	90 95       	com	r25
    2478:	81 95       	neg	r24
    247a:	9f 4f       	sbci	r25, 0xFF	; 255
    247c:	98 8f       	std	Y+24, r25	; 0x18
    247e:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'D';
    2480:	84 e4       	ldi	r24, 0x44	; 68
    2482:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    2484:	8f 89       	ldd	r24, Y+23	; 0x17
    2486:	98 8d       	ldd	r25, Y+24	; 0x18
    2488:	89 2f       	mov	r24, r25
    248a:	99 0f       	add	r25, r25
    248c:	99 0b       	sbc	r25, r25
    248e:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    2490:	8f 89       	ldd	r24, Y+23	; 0x17
    2492:	89 8b       	std	Y+17, r24	; 0x11
    2494:	72 c0       	rjmp	.+228    	; 0x257a <odometry_move_straight+0x12a>
	
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a8 e4       	ldi	r26, 0x48	; 72
    249c:	b2 e4       	ldi	r27, 0x42	; 66
    249e:	8b 87       	std	Y+11, r24	; 0x0b
    24a0:	9c 87       	std	Y+12, r25	; 0x0c
    24a2:	ad 87       	std	Y+13, r26	; 0x0d
    24a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e4       	ldi	r19, 0x40	; 64
    24b2:	4c e1       	ldi	r20, 0x1C	; 28
    24b4:	55 e4       	ldi	r21, 0x45	; 69
    24b6:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	8f 83       	std	Y+7, r24	; 0x07
    24c0:	98 87       	std	Y+8, r25	; 0x08
    24c2:	a9 87       	std	Y+9, r26	; 0x09
    24c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    24da:	88 23       	and	r24, r24
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <odometry_move_straight+0x98>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <odometry_move_straight+0x116>
	else if (__tmp > 65535)
    24e8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ea:	78 85       	ldd	r23, Y+8	; 0x08
    24ec:	89 85       	ldd	r24, Y+9	; 0x09
    24ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	4c f5       	brge	.+82     	; 0x2552 <odometry_move_straight+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2500:	6b 85       	ldd	r22, Y+11	; 0x0b
    2502:	7c 85       	ldd	r23, Y+12	; 0x0c
    2504:	8d 85       	ldd	r24, Y+13	; 0x0d
    2506:	9e 85       	ldd	r25, Y+14	; 0x0e
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9e 83       	std	Y+6, r25	; 0x06
    2526:	8d 83       	std	Y+5, r24	; 0x05
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <odometry_move_straight+0xf8>
    252a:	8a ef       	ldi	r24, 0xFA	; 250
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	9c 83       	std	Y+4, r25	; 0x04
    2530:	8b 83       	std	Y+3, r24	; 0x03
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <odometry_move_straight+0xe6>
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	8d 81       	ldd	r24, Y+5	; 0x05
    2540:	9e 81       	ldd	r25, Y+6	; 0x06
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	9e 81       	ldd	r25, Y+6	; 0x06
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	69 f7       	brne	.-38     	; 0x252a <odometry_move_straight+0xda>
    2550:	14 c0       	rjmp	.+40     	; 0x257a <odometry_move_straight+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	6f 81       	ldd	r22, Y+7	; 0x07
    2554:	78 85       	ldd	r23, Y+8	; 0x08
    2556:	89 85       	ldd	r24, Y+9	; 0x09
    2558:	9a 85       	ldd	r25, Y+10	; 0x0a
    255a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9e 83       	std	Y+6, r25	; 0x06
    2564:	8d 83       	std	Y+5, r24	; 0x05
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	9a 83       	std	Y+2, r25	; 0x02
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	9a 81       	ldd	r25, Y+2	; 0x02
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <odometry_move_straight+0x122>
    2576:	9a 83       	std	Y+2, r25	; 0x02
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	ce 01       	movw	r24, r28
    257c:	0f 96       	adiw	r24, 0x0f	; 15
    257e:	63 ec       	ldi	r22, 0xC3	; 195
    2580:	0e 94 a3 06 	call	0xd46	; 0xd46 <CAN_Write>
    2584:	88 23       	and	r24, r24
    2586:	09 f0       	breq	.+2      	; 0x258a <odometry_move_straight+0x13a>
    2588:	86 cf       	rjmp	.-244    	; 0x2496 <odometry_move_straight+0x46>
		_delay_ms(50);
		
	return odometry_wait_until_done(callback);
    258a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    258c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    258e:	24 df       	rcall	.-440    	; 0x23d8 <odometry_wait_until_done>
}
    2590:	6b 96       	adiw	r28, 0x1b	; 27
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, int8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	6c 97       	sbiw	r28, 0x1c	; 28
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	98 8f       	std	Y+24, r25	; 0x18
    25b8:	8f 8b       	std	Y+23, r24	; 0x17
    25ba:	69 8f       	std	Y+25, r22	; 0x19
    25bc:	4a 8f       	std	Y+26, r20	; 0x1a
    25be:	3c 8f       	std	Y+28, r19	; 0x1c
    25c0:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    25c2:	89 8d       	ldd	r24, Y+25	; 0x19
    25c4:	ab dd       	rcall	.-1194   	; 0x211c <odometry_set_speed>

	buffer[0] = 'G';
    25c6:	87 e4       	ldi	r24, 0x47	; 71
    25c8:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    25ca:	ef 89       	ldd	r30, Y+23	; 0x17
    25cc:	f8 8d       	ldd	r31, Y+24	; 0x18
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	89 2f       	mov	r24, r25
    25d4:	99 0f       	add	r25, r25
    25d6:	99 0b       	sbc	r25, r25
    25d8:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    25da:	ef 89       	ldd	r30, Y+23	; 0x17
    25dc:	f8 8d       	ldd	r31, Y+24	; 0x18
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    25e4:	ef 89       	ldd	r30, Y+23	; 0x17
    25e6:	f8 8d       	ldd	r31, Y+24	; 0x18
    25e8:	82 81       	ldd	r24, Z+2	; 0x02
    25ea:	93 81       	ldd	r25, Z+3	; 0x03
    25ec:	89 2f       	mov	r24, r25
    25ee:	99 0f       	add	r25, r25
    25f0:	99 0b       	sbc	r25, r25
    25f2:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    25f4:	ef 89       	ldd	r30, Y+23	; 0x17
    25f6:	f8 8d       	ldd	r31, Y+24	; 0x18
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    25fe:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction * -1;
    2600:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2602:	81 95       	neg	r24
    2604:	8d 8b       	std	Y+21, r24	; 0x15
    2606:	72 c0       	rjmp	.+228    	; 0x26ec <odometry_move_to_position+0x14a>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a8 e4       	ldi	r26, 0x48	; 72
    260e:	b2 e4       	ldi	r27, 0x42	; 66
    2610:	8b 87       	std	Y+11, r24	; 0x0b
    2612:	9c 87       	std	Y+12, r25	; 0x0c
    2614:	ad 87       	std	Y+13, r26	; 0x0d
    2616:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2618:	6b 85       	ldd	r22, Y+11	; 0x0b
    261a:	7c 85       	ldd	r23, Y+12	; 0x0c
    261c:	8d 85       	ldd	r24, Y+13	; 0x0d
    261e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e4       	ldi	r19, 0x40	; 64
    2624:	4c e1       	ldi	r20, 0x1C	; 28
    2626:	55 e4       	ldi	r21, 0x45	; 69
    2628:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	8f 83       	std	Y+7, r24	; 0x07
    2632:	98 87       	std	Y+8, r25	; 0x08
    2634:	a9 87       	std	Y+9, r26	; 0x09
    2636:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	78 85       	ldd	r23, Y+8	; 0x08
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e8       	ldi	r20, 0x80	; 128
    2646:	5f e3       	ldi	r21, 0x3F	; 63
    2648:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    264c:	88 23       	and	r24, r24
    264e:	2c f4       	brge	.+10     	; 0x265a <odometry_move_to_position+0xb8>
		__ticks = 1;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
    2658:	3f c0       	rjmp	.+126    	; 0x26d8 <odometry_move_to_position+0x136>
	else if (__tmp > 65535)
    265a:	6f 81       	ldd	r22, Y+7	; 0x07
    265c:	78 85       	ldd	r23, Y+8	; 0x08
    265e:	89 85       	ldd	r24, Y+9	; 0x09
    2660:	9a 85       	ldd	r25, Y+10	; 0x0a
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	3f ef       	ldi	r19, 0xFF	; 255
    2666:	4f e7       	ldi	r20, 0x7F	; 127
    2668:	57 e4       	ldi	r21, 0x47	; 71
    266a:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    266e:	18 16       	cp	r1, r24
    2670:	4c f5       	brge	.+82     	; 0x26c4 <odometry_move_to_position+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2672:	6b 85       	ldd	r22, Y+11	; 0x0b
    2674:	7c 85       	ldd	r23, Y+12	; 0x0c
    2676:	8d 85       	ldd	r24, Y+13	; 0x0d
    2678:	9e 85       	ldd	r25, Y+14	; 0x0e
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e2       	ldi	r20, 0x20	; 32
    2680:	51 e4       	ldi	r21, 0x41	; 65
    2682:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	9e 83       	std	Y+6, r25	; 0x06
    2698:	8d 83       	std	Y+5, r24	; 0x05
    269a:	0f c0       	rjmp	.+30     	; 0x26ba <odometry_move_to_position+0x118>
    269c:	8a ef       	ldi	r24, 0xFA	; 250
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	9c 83       	std	Y+4, r25	; 0x04
    26a2:	8b 83       	std	Y+3, r24	; 0x03
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	9c 81       	ldd	r25, Y+4	; 0x04
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <odometry_move_to_position+0x106>
    26ac:	9c 83       	std	Y+4, r25	; 0x04
    26ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b0:	8d 81       	ldd	r24, Y+5	; 0x05
    26b2:	9e 81       	ldd	r25, Y+6	; 0x06
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	69 f7       	brne	.-38     	; 0x269c <odometry_move_to_position+0xfa>
    26c2:	14 c0       	rjmp	.+40     	; 0x26ec <odometry_move_to_position+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c4:	6f 81       	ldd	r22, Y+7	; 0x07
    26c6:	78 85       	ldd	r23, Y+8	; 0x08
    26c8:	89 85       	ldd	r24, Y+9	; 0x09
    26ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    26cc:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9e 83       	std	Y+6, r25	; 0x06
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	9e 81       	ldd	r25, Y+6	; 0x06
    26dc:	9a 83       	std	Y+2, r25	; 0x02
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <odometry_move_to_position+0x142>
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	ce 01       	movw	r24, r28
    26ee:	0f 96       	adiw	r24, 0x0f	; 15
    26f0:	63 ec       	ldi	r22, 0xC3	; 195
    26f2:	0e 94 a3 06 	call	0xd46	; 0xd46 <CAN_Write>
    26f6:	88 23       	and	r24, r24
    26f8:	09 f0       	breq	.+2      	; 0x26fc <odometry_move_to_position+0x15a>
    26fa:	86 cf       	rjmp	.-244    	; 0x2608 <odometry_move_to_position+0x66>
		_delay_ms(50);
	
	return 0;
    26fc:	80 e0       	ldi	r24, 0x00	; 0
	//return odometry_wait_until_done(callback);
}
    26fe:	6c 96       	adiw	r28, 0x1c	; 28
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	69 97       	sbiw	r28, 0x19	; 25
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	99 8f       	std	Y+25, r25	; 0x19
    2726:	88 8f       	std	Y+24, r24	; 0x18
	uint8_t buffer[8];

	buffer[0] = 'I';
    2728:	89 e4       	ldi	r24, 0x49	; 73
    272a:	88 8b       	std	Y+16, r24	; 0x10
	buffer[1] = new_position->x >> 8;
    272c:	e8 8d       	ldd	r30, Y+24	; 0x18
    272e:	f9 8d       	ldd	r31, Y+25	; 0x19
    2730:	80 81       	ld	r24, Z
    2732:	91 81       	ldd	r25, Z+1	; 0x01
    2734:	89 2f       	mov	r24, r25
    2736:	99 0f       	add	r25, r25
    2738:	99 0b       	sbc	r25, r25
    273a:	89 8b       	std	Y+17, r24	; 0x11
	buffer[2] = new_position->x & 0xFF;
    273c:	e8 8d       	ldd	r30, Y+24	; 0x18
    273e:	f9 8d       	ldd	r31, Y+25	; 0x19
    2740:	80 81       	ld	r24, Z
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[3] = new_position->y >> 8;
    2746:	e8 8d       	ldd	r30, Y+24	; 0x18
    2748:	f9 8d       	ldd	r31, Y+25	; 0x19
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	89 2f       	mov	r24, r25
    2750:	99 0f       	add	r25, r25
    2752:	99 0b       	sbc	r25, r25
    2754:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[4] = new_position->y & 0xFF;
    2756:	e8 8d       	ldd	r30, Y+24	; 0x18
    2758:	f9 8d       	ldd	r31, Y+25	; 0x19
    275a:	82 81       	ldd	r24, Z+2	; 0x02
    275c:	93 81       	ldd	r25, Z+3	; 0x03
    275e:	8c 8b       	std	Y+20, r24	; 0x14
	
	int8_t temp = new_position->angle * -1;
    2760:	e8 8d       	ldd	r30, Y+24	; 0x18
    2762:	f9 8d       	ldd	r31, Y+25	; 0x19
    2764:	84 81       	ldd	r24, Z+4	; 0x04
    2766:	95 81       	ldd	r25, Z+5	; 0x05
    2768:	81 95       	neg	r24
    276a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[5] = temp >> 8;
    276c:	8f 85       	ldd	r24, Y+15	; 0x0f
    276e:	99 27       	eor	r25, r25
    2770:	87 fd       	sbrc	r24, 7
    2772:	90 95       	com	r25
    2774:	89 2f       	mov	r24, r25
    2776:	99 0f       	add	r25, r25
    2778:	99 0b       	sbc	r25, r25
    277a:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[6] = temp & 0xFF;
    277c:	8f 85       	ldd	r24, Y+15	; 0x0f
    277e:	8e 8b       	std	Y+22, r24	; 0x16

	position.x	   = new_position->x;
    2780:	e8 8d       	ldd	r30, Y+24	; 0x18
    2782:	f9 8d       	ldd	r31, Y+25	; 0x19
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	90 93 a7 02 	sts	0x02A7, r25
    278c:	80 93 a6 02 	sts	0x02A6, r24
	position.y	   = new_position->y;
    2790:	e8 8d       	ldd	r30, Y+24	; 0x18
    2792:	f9 8d       	ldd	r31, Y+25	; 0x19
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	90 93 a9 02 	sts	0x02A9, r25
    279c:	80 93 a8 02 	sts	0x02A8, r24
	position.angle = -1 * new_position->angle;
    27a0:	e8 8d       	ldd	r30, Y+24	; 0x18
    27a2:	f9 8d       	ldd	r31, Y+25	; 0x19
    27a4:	84 81       	ldd	r24, Z+4	; 0x04
    27a6:	95 81       	ldd	r25, Z+5	; 0x05
    27a8:	90 95       	com	r25
    27aa:	81 95       	neg	r24
    27ac:	9f 4f       	sbci	r25, 0xFF	; 255
    27ae:	90 93 ab 02 	sts	0x02AB, r25
    27b2:	80 93 aa 02 	sts	0x02AA, r24
    27b6:	72 c0       	rjmp	.+228    	; 0x289c <odometry_set_position+0x18c>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	a8 e4       	ldi	r26, 0x48	; 72
    27be:	b2 e4       	ldi	r27, 0x42	; 66
    27c0:	8b 87       	std	Y+11, r24	; 0x0b
    27c2:	9c 87       	std	Y+12, r25	; 0x0c
    27c4:	ad 87       	std	Y+13, r26	; 0x0d
    27c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    27cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e4       	ldi	r19, 0x40	; 64
    27d4:	4c e1       	ldi	r20, 0x1C	; 28
    27d6:	55 e4       	ldi	r21, 0x45	; 69
    27d8:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	8f 83       	std	Y+7, r24	; 0x07
    27e2:	98 87       	std	Y+8, r25	; 0x08
    27e4:	a9 87       	std	Y+9, r26	; 0x09
    27e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ea:	78 85       	ldd	r23, Y+8	; 0x08
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e8       	ldi	r20, 0x80	; 128
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    27fc:	88 23       	and	r24, r24
    27fe:	2c f4       	brge	.+10     	; 0x280a <odometry_set_position+0xfa>
		__ticks = 1;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9e 83       	std	Y+6, r25	; 0x06
    2806:	8d 83       	std	Y+5, r24	; 0x05
    2808:	3f c0       	rjmp	.+126    	; 0x2888 <odometry_set_position+0x178>
	else if (__tmp > 65535)
    280a:	6f 81       	ldd	r22, Y+7	; 0x07
    280c:	78 85       	ldd	r23, Y+8	; 0x08
    280e:	89 85       	ldd	r24, Y+9	; 0x09
    2810:	9a 85       	ldd	r25, Y+10	; 0x0a
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	3f ef       	ldi	r19, 0xFF	; 255
    2816:	4f e7       	ldi	r20, 0x7F	; 127
    2818:	57 e4       	ldi	r21, 0x47	; 71
    281a:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    281e:	18 16       	cp	r1, r24
    2820:	4c f5       	brge	.+82     	; 0x2874 <odometry_set_position+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2822:	6b 85       	ldd	r22, Y+11	; 0x0b
    2824:	7c 85       	ldd	r23, Y+12	; 0x0c
    2826:	8d 85       	ldd	r24, Y+13	; 0x0d
    2828:	9e 85       	ldd	r25, Y+14	; 0x0e
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e2       	ldi	r20, 0x20	; 32
    2830:	51 e4       	ldi	r21, 0x41	; 65
    2832:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9e 83       	std	Y+6, r25	; 0x06
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	0f c0       	rjmp	.+30     	; 0x286a <odometry_set_position+0x15a>
    284c:	8a ef       	ldi	r24, 0xFA	; 250
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9c 83       	std	Y+4, r25	; 0x04
    2852:	8b 83       	std	Y+3, r24	; 0x03
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	9c 81       	ldd	r25, Y+4	; 0x04
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <odometry_set_position+0x148>
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2860:	8d 81       	ldd	r24, Y+5	; 0x05
    2862:	9e 81       	ldd	r25, Y+6	; 0x06
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286a:	8d 81       	ldd	r24, Y+5	; 0x05
    286c:	9e 81       	ldd	r25, Y+6	; 0x06
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	69 f7       	brne	.-38     	; 0x284c <odometry_set_position+0x13c>
    2872:	14 c0       	rjmp	.+40     	; 0x289c <odometry_set_position+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2874:	6f 81       	ldd	r22, Y+7	; 0x07
    2876:	78 85       	ldd	r23, Y+8	; 0x08
    2878:	89 85       	ldd	r24, Y+9	; 0x09
    287a:	9a 85       	ldd	r25, Y+10	; 0x0a
    287c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	9e 83       	std	Y+6, r25	; 0x06
    2886:	8d 83       	std	Y+5, r24	; 0x05
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	9a 81       	ldd	r25, Y+2	; 0x02
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <odometry_set_position+0x184>
    2898:	9a 83       	std	Y+2, r25	; 0x02
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	ce 01       	movw	r24, r28
    289e:	40 96       	adiw	r24, 0x10	; 16
    28a0:	63 ec       	ldi	r22, 0xC3	; 195
    28a2:	0e 94 a3 06 	call	0xd46	; 0xd46 <CAN_Write>
    28a6:	88 23       	and	r24, r24
    28a8:	09 f0       	breq	.+2      	; 0x28ac <odometry_set_position+0x19c>
    28aa:	86 cf       	rjmp	.-244    	; 0x27b8 <odometry_set_position+0xa8>
		_delay_ms(50);
}
    28ac:	69 96       	adiw	r28, 0x19	; 25
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <odometry_rotate>:

uint8_t odometry_rotate(int16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	6b 97       	sbiw	r28, 0x1b	; 27
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	98 8f       	std	Y+24, r25	; 0x18
    28d4:	8f 8b       	std	Y+23, r24	; 0x17
    28d6:	69 8f       	std	Y+25, r22	; 0x19
    28d8:	5b 8f       	std	Y+27, r21	; 0x1b
    28da:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    28dc:	89 8d       	ldd	r24, Y+25	; 0x19
    28de:	1e dc       	rcall	.-1988   	; 0x211c <odometry_set_speed>

	angle *= -1;
    28e0:	8f 89       	ldd	r24, Y+23	; 0x17
    28e2:	98 8d       	ldd	r25, Y+24	; 0x18
    28e4:	90 95       	com	r25
    28e6:	81 95       	neg	r24
    28e8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ea:	98 8f       	std	Y+24, r25	; 0x18
    28ec:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'T';
    28ee:	84 e5       	ldi	r24, 0x54	; 84
    28f0:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    28f2:	8f 89       	ldd	r24, Y+23	; 0x17
    28f4:	98 8d       	ldd	r25, Y+24	; 0x18
    28f6:	89 2f       	mov	r24, r25
    28f8:	99 0f       	add	r25, r25
    28fa:	99 0b       	sbc	r25, r25
    28fc:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    28fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2900:	89 8b       	std	Y+17, r24	; 0x11
    2902:	72 c0       	rjmp	.+228    	; 0x29e8 <odometry_rotate+0x12a>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a8 e4       	ldi	r26, 0x48	; 72
    290a:	b2 e4       	ldi	r27, 0x42	; 66
    290c:	8b 87       	std	Y+11, r24	; 0x0b
    290e:	9c 87       	std	Y+12, r25	; 0x0c
    2910:	ad 87       	std	Y+13, r26	; 0x0d
    2912:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2914:	6b 85       	ldd	r22, Y+11	; 0x0b
    2916:	7c 85       	ldd	r23, Y+12	; 0x0c
    2918:	8d 85       	ldd	r24, Y+13	; 0x0d
    291a:	9e 85       	ldd	r25, Y+14	; 0x0e
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e4       	ldi	r19, 0x40	; 64
    2920:	4c e1       	ldi	r20, 0x1C	; 28
    2922:	55 e4       	ldi	r21, 0x45	; 69
    2924:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	8f 83       	std	Y+7, r24	; 0x07
    292e:	98 87       	std	Y+8, r25	; 0x08
    2930:	a9 87       	std	Y+9, r26	; 0x09
    2932:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2934:	6f 81       	ldd	r22, Y+7	; 0x07
    2936:	78 85       	ldd	r23, Y+8	; 0x08
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	9a 85       	ldd	r25, Y+10	; 0x0a
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e8       	ldi	r20, 0x80	; 128
    2942:	5f e3       	ldi	r21, 0x3F	; 63
    2944:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    2948:	88 23       	and	r24, r24
    294a:	2c f4       	brge	.+10     	; 0x2956 <odometry_rotate+0x98>
		__ticks = 1;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	9e 83       	std	Y+6, r25	; 0x06
    2952:	8d 83       	std	Y+5, r24	; 0x05
    2954:	3f c0       	rjmp	.+126    	; 0x29d4 <odometry_rotate+0x116>
	else if (__tmp > 65535)
    2956:	6f 81       	ldd	r22, Y+7	; 0x07
    2958:	78 85       	ldd	r23, Y+8	; 0x08
    295a:	89 85       	ldd	r24, Y+9	; 0x09
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	3f ef       	ldi	r19, 0xFF	; 255
    2962:	4f e7       	ldi	r20, 0x7F	; 127
    2964:	57 e4       	ldi	r21, 0x47	; 71
    2966:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    296a:	18 16       	cp	r1, r24
    296c:	4c f5       	brge	.+82     	; 0x29c0 <odometry_rotate+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2970:	7c 85       	ldd	r23, Y+12	; 0x0c
    2972:	8d 85       	ldd	r24, Y+13	; 0x0d
    2974:	9e 85       	ldd	r25, Y+14	; 0x0e
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e2       	ldi	r20, 0x20	; 32
    297c:	51 e4       	ldi	r21, 0x41	; 65
    297e:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	bc 01       	movw	r22, r24
    2988:	cd 01       	movw	r24, r26
    298a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9e 83       	std	Y+6, r25	; 0x06
    2994:	8d 83       	std	Y+5, r24	; 0x05
    2996:	0f c0       	rjmp	.+30     	; 0x29b6 <odometry_rotate+0xf8>
    2998:	8a ef       	ldi	r24, 0xFA	; 250
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9c 83       	std	Y+4, r25	; 0x04
    299e:	8b 83       	std	Y+3, r24	; 0x03
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	9c 81       	ldd	r25, Y+4	; 0x04
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <odometry_rotate+0xe6>
    29a8:	9c 83       	std	Y+4, r25	; 0x04
    29aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ac:	8d 81       	ldd	r24, Y+5	; 0x05
    29ae:	9e 81       	ldd	r25, Y+6	; 0x06
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	9e 83       	std	Y+6, r25	; 0x06
    29b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b6:	8d 81       	ldd	r24, Y+5	; 0x05
    29b8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	69 f7       	brne	.-38     	; 0x2998 <odometry_rotate+0xda>
    29be:	14 c0       	rjmp	.+40     	; 0x29e8 <odometry_rotate+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c0:	6f 81       	ldd	r22, Y+7	; 0x07
    29c2:	78 85       	ldd	r23, Y+8	; 0x08
    29c4:	89 85       	ldd	r24, Y+9	; 0x09
    29c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9e 83       	std	Y+6, r25	; 0x06
    29d2:	8d 83       	std	Y+5, r24	; 0x05
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	9e 81       	ldd	r25, Y+6	; 0x06
    29d8:	9a 83       	std	Y+2, r25	; 0x02
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	9a 81       	ldd	r25, Y+2	; 0x02
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <odometry_rotate+0x122>
    29e4:	9a 83       	std	Y+2, r25	; 0x02
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	ce 01       	movw	r24, r28
    29ea:	0f 96       	adiw	r24, 0x0f	; 15
    29ec:	63 ec       	ldi	r22, 0xC3	; 195
    29ee:	0e 94 a3 06 	call	0xd46	; 0xd46 <CAN_Write>
    29f2:	88 23       	and	r24, r24
    29f4:	09 f0       	breq	.+2      	; 0x29f8 <odometry_rotate+0x13a>
    29f6:	86 cf       	rjmp	.-244    	; 0x2904 <odometry_rotate+0x46>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    29f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29fc:	ed dc       	rcall	.-1574   	; 0x23d8 <odometry_wait_until_done>

}
    29fe:	6b 96       	adiw	r28, 0x1b	; 27
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <odometry_set_angle>:

uint8_t odometry_set_angle(int16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	6b 97       	sbiw	r28, 0x1b	; 27
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	98 8f       	std	Y+24, r25	; 0x18
    2a26:	8f 8b       	std	Y+23, r24	; 0x17
    2a28:	69 8f       	std	Y+25, r22	; 0x19
    2a2a:	5b 8f       	std	Y+27, r21	; 0x1b
    2a2c:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    2a2e:	89 8d       	ldd	r24, Y+25	; 0x19
    2a30:	75 db       	rcall	.-2326   	; 0x211c <odometry_set_speed>

	angle *= -1;
    2a32:	8f 89       	ldd	r24, Y+23	; 0x17
    2a34:	98 8d       	ldd	r25, Y+24	; 0x18
    2a36:	90 95       	com	r25
    2a38:	81 95       	neg	r24
    2a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3c:	98 8f       	std	Y+24, r25	; 0x18
    2a3e:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'A';
    2a40:	81 e4       	ldi	r24, 0x41	; 65
    2a42:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    2a44:	8f 89       	ldd	r24, Y+23	; 0x17
    2a46:	98 8d       	ldd	r25, Y+24	; 0x18
    2a48:	89 2f       	mov	r24, r25
    2a4a:	99 0f       	add	r25, r25
    2a4c:	99 0b       	sbc	r25, r25
    2a4e:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    2a50:	8f 89       	ldd	r24, Y+23	; 0x17
    2a52:	89 8b       	std	Y+17, r24	; 0x11
    2a54:	72 c0       	rjmp	.+228    	; 0x2b3a <odometry_set_angle+0x12a>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	a8 e4       	ldi	r26, 0x48	; 72
    2a5c:	b2 e4       	ldi	r27, 0x42	; 66
    2a5e:	8b 87       	std	Y+11, r24	; 0x0b
    2a60:	9c 87       	std	Y+12, r25	; 0x0c
    2a62:	ad 87       	std	Y+13, r26	; 0x0d
    2a64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e4       	ldi	r19, 0x40	; 64
    2a72:	4c e1       	ldi	r20, 0x1C	; 28
    2a74:	55 e4       	ldi	r21, 0x45	; 69
    2a76:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	8f 83       	std	Y+7, r24	; 0x07
    2a80:	98 87       	std	Y+8, r25	; 0x08
    2a82:	a9 87       	std	Y+9, r26	; 0x09
    2a84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a86:	6f 81       	ldd	r22, Y+7	; 0x07
    2a88:	78 85       	ldd	r23, Y+8	; 0x08
    2a8a:	89 85       	ldd	r24, Y+9	; 0x09
    2a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e8       	ldi	r20, 0x80	; 128
    2a94:	5f e3       	ldi	r21, 0x3F	; 63
    2a96:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    2a9a:	88 23       	and	r24, r24
    2a9c:	2c f4       	brge	.+10     	; 0x2aa8 <odometry_set_angle+0x98>
		__ticks = 1;
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9e 83       	std	Y+6, r25	; 0x06
    2aa4:	8d 83       	std	Y+5, r24	; 0x05
    2aa6:	3f c0       	rjmp	.+126    	; 0x2b26 <odometry_set_angle+0x116>
	else if (__tmp > 65535)
    2aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aaa:	78 85       	ldd	r23, Y+8	; 0x08
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	3f ef       	ldi	r19, 0xFF	; 255
    2ab4:	4f e7       	ldi	r20, 0x7F	; 127
    2ab6:	57 e4       	ldi	r21, 0x47	; 71
    2ab8:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    2abc:	18 16       	cp	r1, r24
    2abe:	4c f5       	brge	.+82     	; 0x2b12 <odometry_set_angle+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	40 e2       	ldi	r20, 0x20	; 32
    2ace:	51 e4       	ldi	r21, 0x41	; 65
    2ad0:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	bc 01       	movw	r22, r24
    2ada:	cd 01       	movw	r24, r26
    2adc:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
    2ae8:	0f c0       	rjmp	.+30     	; 0x2b08 <odometry_set_angle+0xf8>
    2aea:	8a ef       	ldi	r24, 0xFA	; 250
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	9c 83       	std	Y+4, r25	; 0x04
    2af0:	8b 83       	std	Y+3, r24	; 0x03
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	9c 81       	ldd	r25, Y+4	; 0x04
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <odometry_set_angle+0xe6>
    2afa:	9c 83       	std	Y+4, r25	; 0x04
    2afc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afe:	8d 81       	ldd	r24, Y+5	; 0x05
    2b00:	9e 81       	ldd	r25, Y+6	; 0x06
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	9e 83       	std	Y+6, r25	; 0x06
    2b06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b08:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0c:	00 97       	sbiw	r24, 0x00	; 0
    2b0e:	69 f7       	brne	.-38     	; 0x2aea <odometry_set_angle+0xda>
    2b10:	14 c0       	rjmp	.+40     	; 0x2b3a <odometry_set_angle+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b12:	6f 81       	ldd	r22, Y+7	; 0x07
    2b14:	78 85       	ldd	r23, Y+8	; 0x08
    2b16:	89 85       	ldd	r24, Y+9	; 0x09
    2b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	9e 83       	std	Y+6, r25	; 0x06
    2b24:	8d 83       	std	Y+5, r24	; 0x05
    2b26:	8d 81       	ldd	r24, Y+5	; 0x05
    2b28:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	9a 81       	ldd	r25, Y+2	; 0x02
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <odometry_set_angle+0x122>
    2b36:	9a 83       	std	Y+2, r25	; 0x02
    2b38:	89 83       	std	Y+1, r24	; 0x01
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	0f 96       	adiw	r24, 0x0f	; 15
    2b3e:	63 ec       	ldi	r22, 0xC3	; 195
    2b40:	0e 94 a3 06 	call	0xd46	; 0xd46 <CAN_Write>
    2b44:	88 23       	and	r24, r24
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <odometry_set_angle+0x13a>
    2b48:	86 cf       	rjmp	.-244    	; 0x2a56 <odometry_set_angle+0x46>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2b4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b4c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b4e:	44 dc       	rcall	.-1912   	; 0x23d8 <odometry_wait_until_done>
}
    2b50:	6b 96       	adiw	r28, 0x1b	; 27
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	cd bf       	out	0x3d, r28	; 61
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	08 95       	ret

00002b62 <grabbers_down_purple>:
//////////////////////////////////////////////////////////////////////////



char grabbers_down_purple(uint32_t start_time)
{
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <grabbers_down_purple+0x6>
    2b68:	00 d0       	rcall	.+0      	; 0x2b6a <grabbers_down_purple+0x8>
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
    2b6e:	69 83       	std	Y+1, r22	; 0x01
    2b70:	7a 83       	std	Y+2, r23	; 0x02
    2b72:	8b 83       	std	Y+3, r24	; 0x03
    2b74:	9c 83       	std	Y+4, r25	; 0x04
	servo_set_grabbers_down();
    2b76:	0e 94 8f 03 	call	0x71e	; 0x71e <servo_set_grabbers_down>
	return 0;
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
}
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <grabbers_up_purple>:
char grabbers_up_purple(uint32_t start_time)
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	00 d0       	rcall	.+0      	; 0x2b90 <grabbers_up_purple+0x6>
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <grabbers_up_purple+0x8>
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	69 83       	std	Y+1, r22	; 0x01
    2b98:	7a 83       	std	Y+2, r23	; 0x02
    2b9a:	8b 83       	std	Y+3, r24	; 0x03
    2b9c:	9c 83       	std	Y+4, r25	; 0x04
	servo_set_grabbers_up();
    2b9e:	0e 94 84 03 	call	0x708	; 0x708 <servo_set_grabbers_up>
	return 0;
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
}
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	0f 90       	pop	r0
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <purpleside>:
	{{580,340},20,BACKWARD,NULL},								//POSITION 14			GO BACK 
	{{100,340},20,FORWARD,NULL}									//POSITION 15			GO AND HIDE
		
};
void purpleside(void)
{
    2bb2:	0f 93       	push	r16
    2bb4:	1f 93       	push	r17
    2bb6:	df 93       	push	r29
    2bb8:	cf 93       	push	r28
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	c9 58       	subi	r28, 0x89	; 137
    2bc0:	d0 40       	sbci	r29, 0x00	; 0
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
	logger("Chosen purple side | purpleside.c\n");
    2bcc:	85 e8       	ldi	r24, 0x85	; 133
    2bce:	91 e0       	ldi	r25, 0x01	; 1
    2bd0:	27 d6       	rcall	.+3150   	; 0x3820 <logger>
	
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	ee 57       	subi	r30, 0x7E	; 126
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	10 82       	st	Z, r1
	uint8_t next_position = 0;
    2bda:	fe 01       	movw	r30, r28
    2bdc:	ef 57       	subi	r30, 0x7F	; 127
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	10 82       	st	Z, r1
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_ONE;
    2be2:	fe 01       	movw	r30, r28
    2be4:	e1 58       	subi	r30, 0x81	; 129
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	80 83       	st	Z, r24
	
	logger("Activestate is set to tactic one | purpleside.c\n");
    2bec:	88 ea       	ldi	r24, 0xA8	; 168
    2bee:	91 e0       	ldi	r25, 0x01	; 1
    2bf0:	17 d6       	rcall	.+3118   	; 0x3820 <logger>
	
	starting_position.x		= 180;
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ed 57       	subi	r30, 0x7D	; 125
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	84 eb       	ldi	r24, 0xB4	; 180
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	91 83       	std	Z+1, r25	; 0x01
    2bfe:	80 83       	st	Z, r24
	starting_position.y		= 1010;
    2c00:	fe 01       	movw	r30, r28
    2c02:	ed 57       	subi	r30, 0x7D	; 125
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	82 ef       	ldi	r24, 0xF2	; 242
    2c08:	93 e0       	ldi	r25, 0x03	; 3
    2c0a:	93 83       	std	Z+3, r25	; 0x03
    2c0c:	82 83       	std	Z+2, r24	; 0x02
	starting_position.angle = 90;
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ed 57       	subi	r30, 0x7D	; 125
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	8a e5       	ldi	r24, 0x5A	; 90
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	95 83       	std	Z+5, r25	; 0x05
    2c1a:	84 83       	std	Z+4, r24	; 0x04
	
	odometry_set_position(&starting_position);
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	8d 57       	subi	r24, 0x7D	; 125
    2c20:	9f 4f       	sbci	r25, 0xFF	; 255
    2c22:	76 dd       	rcall	.-1300   	; 0x2710 <odometry_set_position>

	logger("Starting position set. Continuing...| purpleside.c \n");	
    2c24:	89 ed       	ldi	r24, 0xD9	; 217
    2c26:	91 e0       	ldi	r25, 0x01	; 1
    2c28:	fb d5       	rcall	.+3062   	; 0x3820 <logger>
	
	while(1)
	{
		switch(active_state)
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e1 58       	subi	r30, 0x81	; 129
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	99 27       	eor	r25, r25
    2c34:	87 fd       	sbrc	r24, 7
    2c36:	90 95       	com	r25
    2c38:	82 30       	cpi	r24, 0x02	; 2
    2c3a:	91 05       	cpc	r25, r1
    2c3c:	b1 f7       	brne	.-20     	; 0x2c2a <purpleside+0x78>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ee 57       	subi	r30, 0x7E	; 126
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	de 01       	movw	r26, r28
    2c46:	af 57       	subi	r26, 0x7F	; 127
    2c48:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4a:	8c 91       	ld	r24, X
    2c4c:	80 83       	st	Z, r24
    2c4e:	ce c5       	rjmp	.+2972   	; 0x37ec <purpleside+0xc3a>
				{
					
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    2c50:	fe 01       	movw	r30, r28
    2c52:	ee 57       	subi	r30, 0x7E	; 126
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	48 2f       	mov	r20, r24
    2c5a:	50 e0       	ldi	r21, 0x00	; 0
    2c5c:	ca 01       	movw	r24, r20
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	9c 01       	movw	r18, r24
    2c64:	22 0f       	add	r18, r18
    2c66:	33 1f       	adc	r19, r19
    2c68:	22 0f       	add	r18, r18
    2c6a:	33 1f       	adc	r19, r19
    2c6c:	82 0f       	add	r24, r18
    2c6e:	93 1f       	adc	r25, r19
    2c70:	84 0f       	add	r24, r20
    2c72:	95 1f       	adc	r25, r21
    2c74:	83 5a       	subi	r24, 0xA3	; 163
    2c76:	9c 4f       	sbci	r25, 0xFC	; 252
    2c78:	bc 01       	movw	r22, r24
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	ee 57       	subi	r30, 0x7E	; 126
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	80 81       	ld	r24, Z
    2c82:	48 2f       	mov	r20, r24
    2c84:	50 e0       	ldi	r21, 0x00	; 0
    2c86:	ca 01       	movw	r24, r20
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	9c 01       	movw	r18, r24
    2c8e:	22 0f       	add	r18, r18
    2c90:	33 1f       	adc	r19, r19
    2c92:	22 0f       	add	r18, r18
    2c94:	33 1f       	adc	r19, r19
    2c96:	82 0f       	add	r24, r18
    2c98:	93 1f       	adc	r25, r19
    2c9a:	84 0f       	add	r24, r20
    2c9c:	95 1f       	adc	r25, r21
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	ec 59       	subi	r30, 0x9C	; 156
    2ca2:	fc 4f       	sbci	r31, 0xFC	; 252
    2ca4:	a0 81       	ld	r26, Z
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	ee 57       	subi	r30, 0x7E	; 126
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 81       	ld	r24, Z
    2cae:	48 2f       	mov	r20, r24
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	ca 01       	movw	r24, r20
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	9c 01       	movw	r18, r24
    2cba:	22 0f       	add	r18, r18
    2cbc:	33 1f       	adc	r19, r19
    2cbe:	22 0f       	add	r18, r18
    2cc0:	33 1f       	adc	r19, r19
    2cc2:	82 0f       	add	r24, r18
    2cc4:	93 1f       	adc	r25, r19
    2cc6:	84 0f       	add	r24, r20
    2cc8:	95 1f       	adc	r25, r21
    2cca:	fc 01       	movw	r30, r24
    2ccc:	eb 59       	subi	r30, 0x9B	; 155
    2cce:	fc 4f       	sbci	r31, 0xFC	; 252
    2cd0:	80 81       	ld	r24, Z
    2cd2:	b8 2f       	mov	r27, r24
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	ee 57       	subi	r30, 0x7E	; 126
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	80 81       	ld	r24, Z
    2cdc:	48 2f       	mov	r20, r24
    2cde:	50 e0       	ldi	r21, 0x00	; 0
    2ce0:	ca 01       	movw	r24, r20
    2ce2:	88 0f       	add	r24, r24
    2ce4:	99 1f       	adc	r25, r25
    2ce6:	9c 01       	movw	r18, r24
    2ce8:	22 0f       	add	r18, r18
    2cea:	33 1f       	adc	r19, r19
    2cec:	22 0f       	add	r18, r18
    2cee:	33 1f       	adc	r19, r19
    2cf0:	82 0f       	add	r24, r18
    2cf2:	93 1f       	adc	r25, r19
    2cf4:	84 0f       	add	r24, r20
    2cf6:	95 1f       	adc	r25, r21
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	ea 59       	subi	r30, 0x9A	; 154
    2cfc:	fc 4f       	sbci	r31, 0xFC	; 252
    2cfe:	20 81       	ld	r18, Z
    2d00:	31 81       	ldd	r19, Z+1	; 0x01
    2d02:	cb 01       	movw	r24, r22
    2d04:	6a 2f       	mov	r22, r26
    2d06:	4b 2f       	mov	r20, r27
    2d08:	4c dc       	rcall	.-1896   	; 0x25a2 <odometry_move_to_position>
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e0 58       	subi	r30, 0x80	; 128
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 83       	st	Z, r24
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 
					log_pos();
    2d12:	39 d6       	rcall	.+3186   	; 0x3986 <log_pos>
					if(odometry_status == ODOMETRY_FAIL)
    2d14:	fe 01       	movw	r30, r28
    2d16:	e0 58       	subi	r30, 0x80	; 128
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	80 81       	ld	r24, Z
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <purpleside+0x170>
    2d20:	84 cf       	rjmp	.-248    	; 0x2c2a <purpleside+0x78>
					{
						break;
					}
					else if(current_position == 1 || current_position == 3)
    2d22:	fe 01       	movw	r30, r28
    2d24:	ee 57       	subi	r30, 0x7E	; 126
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	39 f0       	breq	.+14     	; 0x2d3c <purpleside+0x18a>
    2d2e:	fe 01       	movw	r30, r28
    2d30:	ee 57       	subi	r30, 0x7E	; 126
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 81       	ld	r24, Z
    2d36:	83 30       	cpi	r24, 0x03	; 3
    2d38:	09 f0       	breq	.+2      	; 0x2d3c <purpleside+0x18a>
    2d3a:	b5 c0       	rjmp	.+362    	; 0x2ea6 <purpleside+0x2f4>
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	e5 58       	subi	r30, 0x85	; 133
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	aa e7       	ldi	r26, 0x7A	; 122
    2d48:	b4 e4       	ldi	r27, 0x44	; 68
    2d4a:	80 83       	st	Z, r24
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	a2 83       	std	Z+2, r26	; 0x02
    2d50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d52:	8e 01       	movw	r16, r28
    2d54:	09 58       	subi	r16, 0x89	; 137
    2d56:	1f 4f       	sbci	r17, 0xFF	; 255
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e5 58       	subi	r30, 0x85	; 133
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	60 81       	ld	r22, Z
    2d60:	71 81       	ldd	r23, Z+1	; 0x01
    2d62:	82 81       	ldd	r24, Z+2	; 0x02
    2d64:	93 81       	ldd	r25, Z+3	; 0x03
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e4       	ldi	r19, 0x40	; 64
    2d6a:	4c e1       	ldi	r20, 0x1C	; 28
    2d6c:	55 e4       	ldi	r21, 0x45	; 69
    2d6e:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	f8 01       	movw	r30, r16
    2d78:	80 83       	st	Z, r24
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	a2 83       	std	Z+2, r26	; 0x02
    2d7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d80:	fe 01       	movw	r30, r28
    2d82:	e9 58       	subi	r30, 0x89	; 137
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	60 81       	ld	r22, Z
    2d88:	71 81       	ldd	r23, Z+1	; 0x01
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	93 81       	ldd	r25, Z+3	; 0x03
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e8       	ldi	r20, 0x80	; 128
    2d94:	5f e3       	ldi	r21, 0x3F	; 63
    2d96:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    2d9a:	88 23       	and	r24, r24
    2d9c:	44 f4       	brge	.+16     	; 0x2dae <purpleside+0x1fc>
		__ticks = 1;
    2d9e:	fe 01       	movw	r30, r28
    2da0:	eb 58       	subi	r30, 0x8B	; 139
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	80 83       	st	Z, r24
    2dac:	64 c0       	rjmp	.+200    	; 0x2e76 <purpleside+0x2c4>
	else if (__tmp > 65535)
    2dae:	fe 01       	movw	r30, r28
    2db0:	e9 58       	subi	r30, 0x89	; 137
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	3f ef       	ldi	r19, 0xFF	; 255
    2dc0:	4f e7       	ldi	r20, 0x7F	; 127
    2dc2:	57 e4       	ldi	r21, 0x47	; 71
    2dc4:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    2dc8:	18 16       	cp	r1, r24
    2dca:	0c f0       	brlt	.+2      	; 0x2dce <purpleside+0x21c>
    2dcc:	43 c0       	rjmp	.+134    	; 0x2e54 <purpleside+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e5 58       	subi	r30, 0x85	; 133
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	60 81       	ld	r22, Z
    2dd6:	71 81       	ldd	r23, Z+1	; 0x01
    2dd8:	82 81       	ldd	r24, Z+2	; 0x02
    2dda:	93 81       	ldd	r25, Z+3	; 0x03
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e2       	ldi	r20, 0x20	; 32
    2de2:	51 e4       	ldi	r21, 0x41	; 65
    2de4:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	8e 01       	movw	r16, r28
    2dee:	0b 58       	subi	r16, 0x8B	; 139
    2df0:	1f 4f       	sbci	r17, 0xFF	; 255
    2df2:	bc 01       	movw	r22, r24
    2df4:	cd 01       	movw	r24, r26
    2df6:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	f8 01       	movw	r30, r16
    2e00:	91 83       	std	Z+1, r25	; 0x01
    2e02:	80 83       	st	Z, r24
    2e04:	1f c0       	rjmp	.+62     	; 0x2e44 <purpleside+0x292>
    2e06:	fe 01       	movw	r30, r28
    2e08:	ed 58       	subi	r30, 0x8D	; 141
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	8a ef       	ldi	r24, 0xFA	; 250
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	80 83       	st	Z, r24
    2e14:	fe 01       	movw	r30, r28
    2e16:	ed 58       	subi	r30, 0x8D	; 141
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	f1 f7       	brne	.-4      	; 0x2e1e <purpleside+0x26c>
    2e22:	fe 01       	movw	r30, r28
    2e24:	ed 58       	subi	r30, 0x8D	; 141
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	91 83       	std	Z+1, r25	; 0x01
    2e2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2c:	de 01       	movw	r26, r28
    2e2e:	ab 58       	subi	r26, 0x8B	; 139
    2e30:	bf 4f       	sbci	r27, 0xFF	; 255
    2e32:	fe 01       	movw	r30, r28
    2e34:	eb 58       	subi	r30, 0x8B	; 139
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 81       	ld	r24, Z
    2e3a:	91 81       	ldd	r25, Z+1	; 0x01
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	11 96       	adiw	r26, 0x01	; 1
    2e40:	9c 93       	st	X, r25
    2e42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e44:	fe 01       	movw	r30, r28
    2e46:	eb 58       	subi	r30, 0x8B	; 139
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	80 81       	ld	r24, Z
    2e4c:	91 81       	ldd	r25, Z+1	; 0x01
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	d1 f6       	brne	.-76     	; 0x2e06 <purpleside+0x254>
    2e52:	c3 c4       	rjmp	.+2438   	; 0x37da <purpleside+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e54:	8e 01       	movw	r16, r28
    2e56:	0b 58       	subi	r16, 0x8B	; 139
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e9 58       	subi	r30, 0x89	; 137
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	f8 01       	movw	r30, r16
    2e72:	91 83       	std	Z+1, r25	; 0x01
    2e74:	80 83       	st	Z, r24
    2e76:	de 01       	movw	r26, r28
    2e78:	af 58       	subi	r26, 0x8F	; 143
    2e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	eb 58       	subi	r30, 0x8B	; 139
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	11 96       	adiw	r26, 0x01	; 1
    2e88:	9c 93       	st	X, r25
    2e8a:	8e 93       	st	-X, r24
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	ef 58       	subi	r30, 0x8F	; 143
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 81       	ld	r24, Z
    2e94:	91 81       	ldd	r25, Z+1	; 0x01
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <purpleside+0x2e4>
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	ef 58       	subi	r30, 0x8F	; 143
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	80 83       	st	Z, r24
    2ea4:	9a c4       	rjmp	.+2356   	; 0x37da <purpleside+0xc28>
					{
						_delay_ms(1000);
					}
					else if(current_position == 6)
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ee 57       	subi	r30, 0x7E	; 126
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 81       	ld	r24, Z
    2eae:	86 30       	cpi	r24, 0x06	; 6
    2eb0:	09 f0       	breq	.+2      	; 0x2eb4 <purpleside+0x302>
    2eb2:	b5 c2       	rjmp	.+1386   	; 0x341e <purpleside+0x86c>
					{
						servo_set_right_grabber_position(100);
    2eb4:	84 e6       	ldi	r24, 0x64	; 100
    2eb6:	0e 94 76 03 	call	0x6ec	; 0x6ec <servo_set_right_grabber_position>
    2eba:	fe 01       	movw	r30, r28
    2ebc:	e3 59       	subi	r30, 0x93	; 147
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	a8 e4       	ldi	r26, 0x48	; 72
    2ec6:	b4 e4       	ldi	r27, 0x44	; 68
    2ec8:	80 83       	st	Z, r24
    2eca:	91 83       	std	Z+1, r25	; 0x01
    2ecc:	a2 83       	std	Z+2, r26	; 0x02
    2ece:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed0:	8e 01       	movw	r16, r28
    2ed2:	07 59       	subi	r16, 0x97	; 151
    2ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e3 59       	subi	r30, 0x93	; 147
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	60 81       	ld	r22, Z
    2ede:	71 81       	ldd	r23, Z+1	; 0x01
    2ee0:	82 81       	ldd	r24, Z+2	; 0x02
    2ee2:	93 81       	ldd	r25, Z+3	; 0x03
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e4       	ldi	r19, 0x40	; 64
    2ee8:	4c e1       	ldi	r20, 0x1C	; 28
    2eea:	55 e4       	ldi	r21, 0x45	; 69
    2eec:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	f8 01       	movw	r30, r16
    2ef6:	80 83       	st	Z, r24
    2ef8:	91 83       	std	Z+1, r25	; 0x01
    2efa:	a2 83       	std	Z+2, r26	; 0x02
    2efc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2efe:	fe 01       	movw	r30, r28
    2f00:	e7 59       	subi	r30, 0x97	; 151
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	60 81       	ld	r22, Z
    2f06:	71 81       	ldd	r23, Z+1	; 0x01
    2f08:	82 81       	ldd	r24, Z+2	; 0x02
    2f0a:	93 81       	ldd	r25, Z+3	; 0x03
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e8       	ldi	r20, 0x80	; 128
    2f12:	5f e3       	ldi	r21, 0x3F	; 63
    2f14:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    2f18:	88 23       	and	r24, r24
    2f1a:	44 f4       	brge	.+16     	; 0x2f2c <purpleside+0x37a>
		__ticks = 1;
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e9 59       	subi	r30, 0x99	; 153
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	91 83       	std	Z+1, r25	; 0x01
    2f28:	80 83       	st	Z, r24
    2f2a:	64 c0       	rjmp	.+200    	; 0x2ff4 <purpleside+0x442>
	else if (__tmp > 65535)
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e7 59       	subi	r30, 0x97	; 151
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	60 81       	ld	r22, Z
    2f34:	71 81       	ldd	r23, Z+1	; 0x01
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	3f ef       	ldi	r19, 0xFF	; 255
    2f3e:	4f e7       	ldi	r20, 0x7F	; 127
    2f40:	57 e4       	ldi	r21, 0x47	; 71
    2f42:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    2f46:	18 16       	cp	r1, r24
    2f48:	0c f0       	brlt	.+2      	; 0x2f4c <purpleside+0x39a>
    2f4a:	43 c0       	rjmp	.+134    	; 0x2fd2 <purpleside+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e3 59       	subi	r30, 0x93	; 147
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	60 81       	ld	r22, Z
    2f54:	71 81       	ldd	r23, Z+1	; 0x01
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e2       	ldi	r20, 0x20	; 32
    2f60:	51 e4       	ldi	r21, 0x41	; 65
    2f62:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	8e 01       	movw	r16, r28
    2f6c:	09 59       	subi	r16, 0x99	; 153
    2f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f70:	bc 01       	movw	r22, r24
    2f72:	cd 01       	movw	r24, r26
    2f74:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	91 83       	std	Z+1, r25	; 0x01
    2f80:	80 83       	st	Z, r24
    2f82:	1f c0       	rjmp	.+62     	; 0x2fc2 <purpleside+0x410>
    2f84:	fe 01       	movw	r30, r28
    2f86:	eb 59       	subi	r30, 0x9B	; 155
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	8a ef       	ldi	r24, 0xFA	; 250
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	80 83       	st	Z, r24
    2f92:	fe 01       	movw	r30, r28
    2f94:	eb 59       	subi	r30, 0x9B	; 155
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	80 81       	ld	r24, Z
    2f9a:	91 81       	ldd	r25, Z+1	; 0x01
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <purpleside+0x3ea>
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	eb 59       	subi	r30, 0x9B	; 155
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	91 83       	std	Z+1, r25	; 0x01
    2fa8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2faa:	de 01       	movw	r26, r28
    2fac:	a9 59       	subi	r26, 0x99	; 153
    2fae:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e9 59       	subi	r30, 0x99	; 153
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	80 81       	ld	r24, Z
    2fb8:	91 81       	ldd	r25, Z+1	; 0x01
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	11 96       	adiw	r26, 0x01	; 1
    2fbe:	9c 93       	st	X, r25
    2fc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e9 59       	subi	r30, 0x99	; 153
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	91 81       	ldd	r25, Z+1	; 0x01
    2fcc:	00 97       	sbiw	r24, 0x00	; 0
    2fce:	d1 f6       	brne	.-76     	; 0x2f84 <purpleside+0x3d2>
    2fd0:	27 c0       	rjmp	.+78     	; 0x3020 <purpleside+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd2:	8e 01       	movw	r16, r28
    2fd4:	09 59       	subi	r16, 0x99	; 153
    2fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e7 59       	subi	r30, 0x97	; 151
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	60 81       	ld	r22, Z
    2fe0:	71 81       	ldd	r23, Z+1	; 0x01
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	93 81       	ldd	r25, Z+3	; 0x03
    2fe6:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	f8 01       	movw	r30, r16
    2ff0:	91 83       	std	Z+1, r25	; 0x01
    2ff2:	80 83       	st	Z, r24
    2ff4:	de 01       	movw	r26, r28
    2ff6:	ad 59       	subi	r26, 0x9D	; 157
    2ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e9 59       	subi	r30, 0x99	; 153
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	80 81       	ld	r24, Z
    3002:	91 81       	ldd	r25, Z+1	; 0x01
    3004:	8d 93       	st	X+, r24
    3006:	9c 93       	st	X, r25
    3008:	fe 01       	movw	r30, r28
    300a:	ed 59       	subi	r30, 0x9D	; 157
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 81       	ld	r24, Z
    3010:	91 81       	ldd	r25, Z+1	; 0x01
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <purpleside+0x460>
    3016:	fe 01       	movw	r30, r28
    3018:	ed 59       	subi	r30, 0x9D	; 157
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	91 83       	std	Z+1, r25	; 0x01
    301e:	80 83       	st	Z, r24
						_delay_ms(800);
						odometry_rotate(40,LOW_SPEED,NULL);
    3020:	88 e2       	ldi	r24, 0x28	; 40
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	6e e1       	ldi	r22, 0x1E	; 30
    3026:	40 e0       	ldi	r20, 0x00	; 0
    3028:	50 e0       	ldi	r21, 0x00	; 0
    302a:	49 dc       	rcall	.-1902   	; 0x28be <odometry_rotate>
    302c:	fe 01       	movw	r30, r28
    302e:	e1 5a       	subi	r30, 0xA1	; 161
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	aa ef       	ldi	r26, 0xFA	; 250
    3038:	b3 e4       	ldi	r27, 0x43	; 67
    303a:	80 83       	st	Z, r24
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	a2 83       	std	Z+2, r26	; 0x02
    3040:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3042:	8e 01       	movw	r16, r28
    3044:	05 5a       	subi	r16, 0xA5	; 165
    3046:	1f 4f       	sbci	r17, 0xFF	; 255
    3048:	fe 01       	movw	r30, r28
    304a:	e1 5a       	subi	r30, 0xA1	; 161
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	60 81       	ld	r22, Z
    3050:	71 81       	ldd	r23, Z+1	; 0x01
    3052:	82 81       	ldd	r24, Z+2	; 0x02
    3054:	93 81       	ldd	r25, Z+3	; 0x03
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e4       	ldi	r19, 0x40	; 64
    305a:	4c e1       	ldi	r20, 0x1C	; 28
    305c:	55 e4       	ldi	r21, 0x45	; 69
    305e:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	f8 01       	movw	r30, r16
    3068:	80 83       	st	Z, r24
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	a2 83       	std	Z+2, r26	; 0x02
    306e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3070:	fe 01       	movw	r30, r28
    3072:	e5 5a       	subi	r30, 0xA5	; 165
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	5f e3       	ldi	r21, 0x3F	; 63
    3086:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    308a:	88 23       	and	r24, r24
    308c:	44 f4       	brge	.+16     	; 0x309e <purpleside+0x4ec>
		__ticks = 1;
    308e:	fe 01       	movw	r30, r28
    3090:	e7 5a       	subi	r30, 0xA7	; 167
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
    309c:	64 c0       	rjmp	.+200    	; 0x3166 <purpleside+0x5b4>
	else if (__tmp > 65535)
    309e:	fe 01       	movw	r30, r28
    30a0:	e5 5a       	subi	r30, 0xA5	; 165
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	60 81       	ld	r22, Z
    30a6:	71 81       	ldd	r23, Z+1	; 0x01
    30a8:	82 81       	ldd	r24, Z+2	; 0x02
    30aa:	93 81       	ldd	r25, Z+3	; 0x03
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	3f ef       	ldi	r19, 0xFF	; 255
    30b0:	4f e7       	ldi	r20, 0x7F	; 127
    30b2:	57 e4       	ldi	r21, 0x47	; 71
    30b4:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    30b8:	18 16       	cp	r1, r24
    30ba:	0c f0       	brlt	.+2      	; 0x30be <purpleside+0x50c>
    30bc:	43 c0       	rjmp	.+134    	; 0x3144 <purpleside+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30be:	fe 01       	movw	r30, r28
    30c0:	e1 5a       	subi	r30, 0xA1	; 161
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e2       	ldi	r20, 0x20	; 32
    30d2:	51 e4       	ldi	r21, 0x41	; 65
    30d4:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	8e 01       	movw	r16, r28
    30de:	07 5a       	subi	r16, 0xA7	; 167
    30e0:	1f 4f       	sbci	r17, 0xFF	; 255
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	f8 01       	movw	r30, r16
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
    30f4:	1f c0       	rjmp	.+62     	; 0x3134 <purpleside+0x582>
    30f6:	fe 01       	movw	r30, r28
    30f8:	e9 5a       	subi	r30, 0xA9	; 169
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	8a ef       	ldi	r24, 0xFA	; 250
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	91 83       	std	Z+1, r25	; 0x01
    3102:	80 83       	st	Z, r24
    3104:	fe 01       	movw	r30, r28
    3106:	e9 5a       	subi	r30, 0xA9	; 169
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	80 81       	ld	r24, Z
    310c:	91 81       	ldd	r25, Z+1	; 0x01
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	f1 f7       	brne	.-4      	; 0x310e <purpleside+0x55c>
    3112:	fe 01       	movw	r30, r28
    3114:	e9 5a       	subi	r30, 0xA9	; 169
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	91 83       	std	Z+1, r25	; 0x01
    311a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311c:	de 01       	movw	r26, r28
    311e:	a7 5a       	subi	r26, 0xA7	; 167
    3120:	bf 4f       	sbci	r27, 0xFF	; 255
    3122:	fe 01       	movw	r30, r28
    3124:	e7 5a       	subi	r30, 0xA7	; 167
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	80 81       	ld	r24, Z
    312a:	91 81       	ldd	r25, Z+1	; 0x01
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	11 96       	adiw	r26, 0x01	; 1
    3130:	9c 93       	st	X, r25
    3132:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3134:	fe 01       	movw	r30, r28
    3136:	e7 5a       	subi	r30, 0xA7	; 167
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	80 81       	ld	r24, Z
    313c:	91 81       	ldd	r25, Z+1	; 0x01
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	d1 f6       	brne	.-76     	; 0x30f6 <purpleside+0x544>
    3142:	27 c0       	rjmp	.+78     	; 0x3192 <purpleside+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3144:	8e 01       	movw	r16, r28
    3146:	07 5a       	subi	r16, 0xA7	; 167
    3148:	1f 4f       	sbci	r17, 0xFF	; 255
    314a:	fe 01       	movw	r30, r28
    314c:	e5 5a       	subi	r30, 0xA5	; 165
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	60 81       	ld	r22, Z
    3152:	71 81       	ldd	r23, Z+1	; 0x01
    3154:	82 81       	ldd	r24, Z+2	; 0x02
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	f8 01       	movw	r30, r16
    3162:	91 83       	std	Z+1, r25	; 0x01
    3164:	80 83       	st	Z, r24
    3166:	de 01       	movw	r26, r28
    3168:	ab 5a       	subi	r26, 0xAB	; 171
    316a:	bf 4f       	sbci	r27, 0xFF	; 255
    316c:	fe 01       	movw	r30, r28
    316e:	e7 5a       	subi	r30, 0xA7	; 167
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	80 81       	ld	r24, Z
    3174:	91 81       	ldd	r25, Z+1	; 0x01
    3176:	8d 93       	st	X+, r24
    3178:	9c 93       	st	X, r25
    317a:	fe 01       	movw	r30, r28
    317c:	eb 5a       	subi	r30, 0xAB	; 171
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <purpleside+0x5d2>
    3188:	fe 01       	movw	r30, r28
    318a:	eb 5a       	subi	r30, 0xAB	; 171
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	91 83       	std	Z+1, r25	; 0x01
    3190:	80 83       	st	Z, r24
						_delay_ms(500);
						servo_set_left_grabber_position(20);
    3192:	84 e1       	ldi	r24, 0x14	; 20
    3194:	0e 94 31 03 	call	0x662	; 0x662 <servo_set_left_grabber_position>
    3198:	fe 01       	movw	r30, r28
    319a:	ef 5a       	subi	r30, 0xAF	; 175
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	a8 e4       	ldi	r26, 0x48	; 72
    31a4:	b4 e4       	ldi	r27, 0x44	; 68
    31a6:	80 83       	st	Z, r24
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	a2 83       	std	Z+2, r26	; 0x02
    31ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ae:	8e 01       	movw	r16, r28
    31b0:	03 5b       	subi	r16, 0xB3	; 179
    31b2:	1f 4f       	sbci	r17, 0xFF	; 255
    31b4:	fe 01       	movw	r30, r28
    31b6:	ef 5a       	subi	r30, 0xAF	; 175
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	60 81       	ld	r22, Z
    31bc:	71 81       	ldd	r23, Z+1	; 0x01
    31be:	82 81       	ldd	r24, Z+2	; 0x02
    31c0:	93 81       	ldd	r25, Z+3	; 0x03
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e4       	ldi	r19, 0x40	; 64
    31c6:	4c e1       	ldi	r20, 0x1C	; 28
    31c8:	55 e4       	ldi	r21, 0x45	; 69
    31ca:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	f8 01       	movw	r30, r16
    31d4:	80 83       	st	Z, r24
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	a2 83       	std	Z+2, r26	; 0x02
    31da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31dc:	fe 01       	movw	r30, r28
    31de:	e3 5b       	subi	r30, 0xB3	; 179
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	60 81       	ld	r22, Z
    31e4:	71 81       	ldd	r23, Z+1	; 0x01
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	40 e8       	ldi	r20, 0x80	; 128
    31f0:	5f e3       	ldi	r21, 0x3F	; 63
    31f2:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__cmpsf2>
    31f6:	88 23       	and	r24, r24
    31f8:	44 f4       	brge	.+16     	; 0x320a <purpleside+0x658>
		__ticks = 1;
    31fa:	fe 01       	movw	r30, r28
    31fc:	e5 5b       	subi	r30, 0xB5	; 181
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	80 83       	st	Z, r24
    3208:	64 c0       	rjmp	.+200    	; 0x32d2 <purpleside+0x720>
	else if (__tmp > 65535)
    320a:	fe 01       	movw	r30, r28
    320c:	e3 5b       	subi	r30, 0xB3	; 179
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	60 81       	ld	r22, Z
    3212:	71 81       	ldd	r23, Z+1	; 0x01
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	3f ef       	ldi	r19, 0xFF	; 255
    321c:	4f e7       	ldi	r20, 0x7F	; 127
    321e:	57 e4       	ldi	r21, 0x47	; 71
    3220:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    3224:	18 16       	cp	r1, r24
    3226:	0c f0       	brlt	.+2      	; 0x322a <purpleside+0x678>
    3228:	43 c0       	rjmp	.+134    	; 0x32b0 <purpleside+0x6fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322a:	fe 01       	movw	r30, r28
    322c:	ef 5a       	subi	r30, 0xAF	; 175
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	60 81       	ld	r22, Z
    3232:	71 81       	ldd	r23, Z+1	; 0x01
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	93 81       	ldd	r25, Z+3	; 0x03
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	40 e2       	ldi	r20, 0x20	; 32
    323e:	51 e4       	ldi	r21, 0x41	; 65
    3240:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	8e 01       	movw	r16, r28
    324a:	05 5b       	subi	r16, 0xB5	; 181
    324c:	1f 4f       	sbci	r17, 0xFF	; 255
    324e:	bc 01       	movw	r22, r24
    3250:	cd 01       	movw	r24, r26
    3252:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	f8 01       	movw	r30, r16
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	80 83       	st	Z, r24
    3260:	1f c0       	rjmp	.+62     	; 0x32a0 <purpleside+0x6ee>
    3262:	fe 01       	movw	r30, r28
    3264:	e7 5b       	subi	r30, 0xB7	; 183
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	8a ef       	ldi	r24, 0xFA	; 250
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	91 83       	std	Z+1, r25	; 0x01
    326e:	80 83       	st	Z, r24
    3270:	fe 01       	movw	r30, r28
    3272:	e7 5b       	subi	r30, 0xB7	; 183
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	80 81       	ld	r24, Z
    3278:	91 81       	ldd	r25, Z+1	; 0x01
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	f1 f7       	brne	.-4      	; 0x327a <purpleside+0x6c8>
    327e:	fe 01       	movw	r30, r28
    3280:	e7 5b       	subi	r30, 0xB7	; 183
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	91 83       	std	Z+1, r25	; 0x01
    3286:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3288:	de 01       	movw	r26, r28
    328a:	a5 5b       	subi	r26, 0xB5	; 181
    328c:	bf 4f       	sbci	r27, 0xFF	; 255
    328e:	fe 01       	movw	r30, r28
    3290:	e5 5b       	subi	r30, 0xB5	; 181
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	11 96       	adiw	r26, 0x01	; 1
    329c:	9c 93       	st	X, r25
    329e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a0:	fe 01       	movw	r30, r28
    32a2:	e5 5b       	subi	r30, 0xB5	; 181
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 81       	ld	r24, Z
    32a8:	91 81       	ldd	r25, Z+1	; 0x01
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	d1 f6       	brne	.-76     	; 0x3262 <purpleside+0x6b0>
    32ae:	27 c0       	rjmp	.+78     	; 0x32fe <purpleside+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b0:	8e 01       	movw	r16, r28
    32b2:	05 5b       	subi	r16, 0xB5	; 181
    32b4:	1f 4f       	sbci	r17, 0xFF	; 255
    32b6:	fe 01       	movw	r30, r28
    32b8:	e3 5b       	subi	r30, 0xB3	; 179
    32ba:	ff 4f       	sbci	r31, 0xFF	; 255
    32bc:	60 81       	ld	r22, Z
    32be:	71 81       	ldd	r23, Z+1	; 0x01
    32c0:	82 81       	ldd	r24, Z+2	; 0x02
    32c2:	93 81       	ldd	r25, Z+3	; 0x03
    32c4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	f8 01       	movw	r30, r16
    32ce:	91 83       	std	Z+1, r25	; 0x01
    32d0:	80 83       	st	Z, r24
    32d2:	de 01       	movw	r26, r28
    32d4:	a9 5b       	subi	r26, 0xB9	; 185
    32d6:	bf 4f       	sbci	r27, 0xFF	; 255
    32d8:	fe 01       	movw	r30, r28
    32da:	e5 5b       	subi	r30, 0xB5	; 181
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	80 81       	ld	r24, Z
    32e0:	91 81       	ldd	r25, Z+1	; 0x01
    32e2:	8d 93       	st	X+, r24
    32e4:	9c 93       	st	X, r25
    32e6:	fe 01       	movw	r30, r28
    32e8:	e9 5b       	subi	r30, 0xB9	; 185
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	80 81       	ld	r24, Z
    32ee:	91 81       	ldd	r25, Z+1	; 0x01
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <purpleside+0x73e>
    32f4:	fe 01       	movw	r30, r28
    32f6:	e9 5b       	subi	r30, 0xB9	; 185
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	91 83       	std	Z+1, r25	; 0x01
    32fc:	80 83       	st	Z, r24
						_delay_ms(800);
						odometry_move_straight(-200,LOW_SPEED,NULL);
    32fe:	88 e3       	ldi	r24, 0x38	; 56
    3300:	9f ef       	ldi	r25, 0xFF	; 255
    3302:	6e e1       	ldi	r22, 0x1E	; 30
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	a3 d8       	rcall	.-3770   	; 0x2450 <odometry_move_straight>
    330a:	fe 01       	movw	r30, r28
    330c:	ed 5b       	subi	r30, 0xBD	; 189
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	aa ef       	ldi	r26, 0xFA	; 250
    3316:	b3 e4       	ldi	r27, 0x43	; 67
    3318:	80 83       	st	Z, r24
    331a:	91 83       	std	Z+1, r25	; 0x01
    331c:	a2 83       	std	Z+2, r26	; 0x02
    331e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3320:	8e 01       	movw	r16, r28
    3322:	01 5c       	subi	r16, 0xC1	; 193
    3324:	1f 4f       	sbci	r17, 0xFF	; 255
    3326:	fe 01       	movw	r30, r28
    3328:	ed 5b       	subi	r30, 0xBD	; 189
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	60 81       	ld	r22, Z
    332e:	71 81       	ldd	r23, Z+1	; 0x01
    3330:	82 81       	ldd	r24, Z+2	; 0x02
    3332:	93 81       	ldd	r25, Z+3	; 0x03
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e4       	ldi	r19, 0x40	; 64
    3338:	4c e1       	ldi	r20, 0x1C	; 28
    333a:	55 e4       	ldi	r21, 0x45	; 69
    333c:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	f8 01       	movw	r30, r16
    3346:	80 83       	st	Z, r24
    3348:	91 83       	std	Z+1, r25	; 0x01
    334a:	a2 83       	std	Z+2, r26	; 0x02
    334c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    334e:	fe 01       	movw	r30, r28
    3350:	ff 96       	adiw	r30, 0x3f	; 63
    3352:	60 81       	ld	r22, Z
    3354:	71 81       	ldd	r23, Z+1	; 0x01
    3356:	82 81       	ldd	r24, Z+2	; 0x02
    3358:	93 81       	ldd	r25, Z+3	; 0x03
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e8       	ldi	r20, 0x80	; 128
    3360:	5f e3       	ldi	r21, 0x3F	; 63
    3362:	ba d7       	rcall	.+3956   	; 0x42d8 <__cmpsf2>
    3364:	88 23       	and	r24, r24
    3366:	2c f4       	brge	.+10     	; 0x3372 <purpleside+0x7c0>
		__ticks = 1;
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	9e af       	std	Y+62, r25	; 0x3e
    336e:	8d af       	std	Y+61, r24	; 0x3d
    3370:	45 c0       	rjmp	.+138    	; 0x33fc <purpleside+0x84a>
	else if (__tmp > 65535)
    3372:	fe 01       	movw	r30, r28
    3374:	ff 96       	adiw	r30, 0x3f	; 63
    3376:	60 81       	ld	r22, Z
    3378:	71 81       	ldd	r23, Z+1	; 0x01
    337a:	82 81       	ldd	r24, Z+2	; 0x02
    337c:	93 81       	ldd	r25, Z+3	; 0x03
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	3f ef       	ldi	r19, 0xFF	; 255
    3382:	4f e7       	ldi	r20, 0x7F	; 127
    3384:	57 e4       	ldi	r21, 0x47	; 71
    3386:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    338a:	18 16       	cp	r1, r24
    338c:	64 f5       	brge	.+88     	; 0x33e6 <purpleside+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338e:	fe 01       	movw	r30, r28
    3390:	ed 5b       	subi	r30, 0xBD	; 189
    3392:	ff 4f       	sbci	r31, 0xFF	; 255
    3394:	60 81       	ld	r22, Z
    3396:	71 81       	ldd	r23, Z+1	; 0x01
    3398:	82 81       	ldd	r24, Z+2	; 0x02
    339a:	93 81       	ldd	r25, Z+3	; 0x03
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	40 e2       	ldi	r20, 0x20	; 32
    33a2:	51 e4       	ldi	r21, 0x41	; 65
    33a4:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	bc 01       	movw	r22, r24
    33ae:	cd 01       	movw	r24, r26
    33b0:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixunssfsi>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	9e af       	std	Y+62, r25	; 0x3e
    33ba:	8d af       	std	Y+61, r24	; 0x3d
    33bc:	0f c0       	rjmp	.+30     	; 0x33dc <purpleside+0x82a>
    33be:	8a ef       	ldi	r24, 0xFA	; 250
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	9c af       	std	Y+60, r25	; 0x3c
    33c4:	8b af       	std	Y+59, r24	; 0x3b
    33c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    33c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <purpleside+0x818>
    33ce:	9c af       	std	Y+60, r25	; 0x3c
    33d0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    33d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	9e af       	std	Y+62, r25	; 0x3e
    33da:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    33de:	9e ad       	ldd	r25, Y+62	; 0x3e
    33e0:	00 97       	sbiw	r24, 0x00	; 0
    33e2:	69 f7       	brne	.-38     	; 0x33be <purpleside+0x80c>
    33e4:	15 c0       	rjmp	.+42     	; 0x3410 <purpleside+0x85e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e6:	fe 01       	movw	r30, r28
    33e8:	ff 96       	adiw	r30, 0x3f	; 63
    33ea:	60 81       	ld	r22, Z
    33ec:	71 81       	ldd	r23, Z+1	; 0x01
    33ee:	82 81       	ldd	r24, Z+2	; 0x02
    33f0:	93 81       	ldd	r25, Z+3	; 0x03
    33f2:	e3 d7       	rcall	.+4038   	; 0x43ba <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	9e af       	std	Y+62, r25	; 0x3e
    33fa:	8d af       	std	Y+61, r24	; 0x3d
    33fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    33fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3400:	9a af       	std	Y+58, r25	; 0x3a
    3402:	89 af       	std	Y+57, r24	; 0x39
    3404:	89 ad       	ldd	r24, Y+57	; 0x39
    3406:	9a ad       	ldd	r25, Y+58	; 0x3a
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	f1 f7       	brne	.-4      	; 0x3408 <purpleside+0x856>
    340c:	9a af       	std	Y+58, r25	; 0x3a
    340e:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(500);
						odometry_set_angle(90,LOW_SPEED,NULL);	
    3410:	8a e5       	ldi	r24, 0x5A	; 90
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	6e e1       	ldi	r22, 0x1E	; 30
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	50 e0       	ldi	r21, 0x00	; 0
    341a:	fa da       	rcall	.-2572   	; 0x2a10 <odometry_set_angle>
    341c:	de c1       	rjmp	.+956    	; 0x37da <purpleside+0xc28>
					}
					else if(current_position == 8)
    341e:	fe 01       	movw	r30, r28
    3420:	ee 57       	subi	r30, 0x7E	; 126
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	80 81       	ld	r24, Z
    3426:	88 30       	cpi	r24, 0x08	; 8
    3428:	09 f0       	breq	.+2      	; 0x342c <purpleside+0x87a>
    342a:	70 c0       	rjmp	.+224    	; 0x350c <purpleside+0x95a>
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	90 e8       	ldi	r25, 0x80	; 128
    3430:	ab e3       	ldi	r26, 0x3B	; 59
    3432:	b5 e4       	ldi	r27, 0x45	; 69
    3434:	8d ab       	std	Y+53, r24	; 0x35
    3436:	9e ab       	std	Y+54, r25	; 0x36
    3438:	af ab       	std	Y+55, r26	; 0x37
    343a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343c:	6d a9       	ldd	r22, Y+53	; 0x35
    343e:	7e a9       	ldd	r23, Y+54	; 0x36
    3440:	8f a9       	ldd	r24, Y+55	; 0x37
    3442:	98 ad       	ldd	r25, Y+56	; 0x38
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e4       	ldi	r19, 0x40	; 64
    3448:	4c e1       	ldi	r20, 0x1C	; 28
    344a:	55 e4       	ldi	r21, 0x45	; 69
    344c:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	89 ab       	std	Y+49, r24	; 0x31
    3456:	9a ab       	std	Y+50, r25	; 0x32
    3458:	ab ab       	std	Y+51, r26	; 0x33
    345a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    345c:	69 a9       	ldd	r22, Y+49	; 0x31
    345e:	7a a9       	ldd	r23, Y+50	; 0x32
    3460:	8b a9       	ldd	r24, Y+51	; 0x33
    3462:	9c a9       	ldd	r25, Y+52	; 0x34
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e8       	ldi	r20, 0x80	; 128
    346a:	5f e3       	ldi	r21, 0x3F	; 63
    346c:	35 d7       	rcall	.+3690   	; 0x42d8 <__cmpsf2>
    346e:	88 23       	and	r24, r24
    3470:	2c f4       	brge	.+10     	; 0x347c <purpleside+0x8ca>
		__ticks = 1;
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	98 ab       	std	Y+48, r25	; 0x30
    3478:	8f a7       	std	Y+47, r24	; 0x2f
    347a:	3d c0       	rjmp	.+122    	; 0x34f6 <purpleside+0x944>
	else if (__tmp > 65535)
    347c:	69 a9       	ldd	r22, Y+49	; 0x31
    347e:	7a a9       	ldd	r23, Y+50	; 0x32
    3480:	8b a9       	ldd	r24, Y+51	; 0x33
    3482:	9c a9       	ldd	r25, Y+52	; 0x34
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	3f ef       	ldi	r19, 0xFF	; 255
    3488:	4f e7       	ldi	r20, 0x7F	; 127
    348a:	57 e4       	ldi	r21, 0x47	; 71
    348c:	0e 94 bb 22 	call	0x4576	; 0x4576 <__gesf2>
    3490:	18 16       	cp	r1, r24
    3492:	44 f5       	brge	.+80     	; 0x34e4 <purpleside+0x932>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3494:	6d a9       	ldd	r22, Y+53	; 0x35
    3496:	7e a9       	ldd	r23, Y+54	; 0x36
    3498:	8f a9       	ldd	r24, Y+55	; 0x37
    349a:	98 ad       	ldd	r25, Y+56	; 0x38
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	40 e2       	ldi	r20, 0x20	; 32
    34a2:	51 e4       	ldi	r21, 0x41	; 65
    34a4:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	84 d7       	rcall	.+3848   	; 0x43ba <__fixunssfsi>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	98 ab       	std	Y+48, r25	; 0x30
    34b8:	8f a7       	std	Y+47, r24	; 0x2f
    34ba:	0f c0       	rjmp	.+30     	; 0x34da <purpleside+0x928>
    34bc:	8a ef       	ldi	r24, 0xFA	; 250
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	9e a7       	std	Y+46, r25	; 0x2e
    34c2:	8d a7       	std	Y+45, r24	; 0x2d
    34c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    34c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    34c8:	01 97       	sbiw	r24, 0x01	; 1
    34ca:	f1 f7       	brne	.-4      	; 0x34c8 <purpleside+0x916>
    34cc:	9e a7       	std	Y+46, r25	; 0x2e
    34ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34d2:	98 a9       	ldd	r25, Y+48	; 0x30
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	98 ab       	std	Y+48, r25	; 0x30
    34d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34da:	8f a5       	ldd	r24, Y+47	; 0x2f
    34dc:	98 a9       	ldd	r25, Y+48	; 0x30
    34de:	00 97       	sbiw	r24, 0x00	; 0
    34e0:	69 f7       	brne	.-38     	; 0x34bc <purpleside+0x90a>
    34e2:	7b c1       	rjmp	.+758    	; 0x37da <purpleside+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e4:	69 a9       	ldd	r22, Y+49	; 0x31
    34e6:	7a a9       	ldd	r23, Y+50	; 0x32
    34e8:	8b a9       	ldd	r24, Y+51	; 0x33
    34ea:	9c a9       	ldd	r25, Y+52	; 0x34
    34ec:	66 d7       	rcall	.+3788   	; 0x43ba <__fixunssfsi>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	98 ab       	std	Y+48, r25	; 0x30
    34f4:	8f a7       	std	Y+47, r24	; 0x2f
    34f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    34f8:	98 a9       	ldd	r25, Y+48	; 0x30
    34fa:	9c a7       	std	Y+44, r25	; 0x2c
    34fc:	8b a7       	std	Y+43, r24	; 0x2b
    34fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3500:	9c a5       	ldd	r25, Y+44	; 0x2c
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	f1 f7       	brne	.-4      	; 0x3502 <purpleside+0x950>
    3506:	9c a7       	std	Y+44, r25	; 0x2c
    3508:	8b a7       	std	Y+43, r24	; 0x2b
    350a:	67 c1       	rjmp	.+718    	; 0x37da <purpleside+0xc28>
					{
						_delay_ms(3000);
					}
					else if(current_position == 10)
    350c:	fe 01       	movw	r30, r28
    350e:	ee 57       	subi	r30, 0x7E	; 126
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	80 81       	ld	r24, Z
    3514:	8a 30       	cpi	r24, 0x0A	; 10
    3516:	09 f0       	breq	.+2      	; 0x351a <purpleside+0x968>
    3518:	6e c0       	rjmp	.+220    	; 0x35f6 <purpleside+0xa44>
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	aa e7       	ldi	r26, 0x7A	; 122
    3520:	b4 e4       	ldi	r27, 0x44	; 68
    3522:	8f a3       	std	Y+39, r24	; 0x27
    3524:	98 a7       	std	Y+40, r25	; 0x28
    3526:	a9 a7       	std	Y+41, r26	; 0x29
    3528:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352a:	6f a1       	ldd	r22, Y+39	; 0x27
    352c:	78 a5       	ldd	r23, Y+40	; 0x28
    352e:	89 a5       	ldd	r24, Y+41	; 0x29
    3530:	9a a5       	ldd	r25, Y+42	; 0x2a
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e4       	ldi	r19, 0x40	; 64
    3536:	4c e1       	ldi	r20, 0x1C	; 28
    3538:	55 e4       	ldi	r21, 0x45	; 69
    353a:	0e 94 bf 22 	call	0x457e	; 0x457e <__mulsf3>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	8b a3       	std	Y+35, r24	; 0x23
    3544:	9c a3       	std	Y+36, r25	; 0x24
    3546:	ad a3       	std	Y+37, r26	; 0x25
    3548:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    354a:	6b a1       	ldd	r22, Y+35	; 0x23
    354c:	7c a1       	ldd	r23, Y+36	; 0x24
    354e:	8d a1       	ldd	r24, Y+37	; 0x25
    3550:	9e a1       	ldd	r25, Y+38	; 0x26
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e8       	ldi	r20, 0x80	; 128
    3558:	5f e3       	ldi	r21, 0x3F	; 63
    355a:	be d6       	rcall	.+3452   	; 0x42d8 <__cmpsf2>
    355c:	88 23       	and	r24, r24
    355e:	2c f4       	brge	.+10     	; 0x356a <purpleside+0x9b8>
		__ticks = 1;
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	9a a3       	std	Y+34, r25	; 0x22
    3566:	89 a3       	std	Y+33, r24	; 0x21
    3568:	3b c0       	rjmp	.+118    	; 0x35e0 <purpleside+0xa2e>
	else if (__tmp > 65535)
    356a:	6b a1       	ldd	r22, Y+35	; 0x23
    356c:	7c a1       	ldd	r23, Y+36	; 0x24
    356e:	8d a1       	ldd	r24, Y+37	; 0x25
    3570:	9e a1       	ldd	r25, Y+38	; 0x26
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	3f ef       	ldi	r19, 0xFF	; 255
    3576:	4f e7       	ldi	r20, 0x7F	; 127
    3578:	57 e4       	ldi	r21, 0x47	; 71
    357a:	fd d7       	rcall	.+4090   	; 0x4576 <__gesf2>
    357c:	18 16       	cp	r1, r24
    357e:	3c f5       	brge	.+78     	; 0x35ce <purpleside+0xa1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3580:	6f a1       	ldd	r22, Y+39	; 0x27
    3582:	78 a5       	ldd	r23, Y+40	; 0x28
    3584:	89 a5       	ldd	r24, Y+41	; 0x29
    3586:	9a a5       	ldd	r25, Y+42	; 0x2a
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e2       	ldi	r20, 0x20	; 32
    358e:	51 e4       	ldi	r21, 0x41	; 65
    3590:	f6 d7       	rcall	.+4076   	; 0x457e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	0f d7       	rcall	.+3614   	; 0x43ba <__fixunssfsi>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	9a a3       	std	Y+34, r25	; 0x22
    35a2:	89 a3       	std	Y+33, r24	; 0x21
    35a4:	0f c0       	rjmp	.+30     	; 0x35c4 <purpleside+0xa12>
    35a6:	8a ef       	ldi	r24, 0xFA	; 250
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	98 a3       	std	Y+32, r25	; 0x20
    35ac:	8f 8f       	std	Y+31, r24	; 0x1f
    35ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35b0:	98 a1       	ldd	r25, Y+32	; 0x20
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <purpleside+0xa00>
    35b6:	98 a3       	std	Y+32, r25	; 0x20
    35b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ba:	89 a1       	ldd	r24, Y+33	; 0x21
    35bc:	9a a1       	ldd	r25, Y+34	; 0x22
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	9a a3       	std	Y+34, r25	; 0x22
    35c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c4:	89 a1       	ldd	r24, Y+33	; 0x21
    35c6:	9a a1       	ldd	r25, Y+34	; 0x22
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	69 f7       	brne	.-38     	; 0x35a6 <purpleside+0x9f4>
    35cc:	06 c1       	rjmp	.+524    	; 0x37da <purpleside+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ce:	6b a1       	ldd	r22, Y+35	; 0x23
    35d0:	7c a1       	ldd	r23, Y+36	; 0x24
    35d2:	8d a1       	ldd	r24, Y+37	; 0x25
    35d4:	9e a1       	ldd	r25, Y+38	; 0x26
    35d6:	f1 d6       	rcall	.+3554   	; 0x43ba <__fixunssfsi>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	9a a3       	std	Y+34, r25	; 0x22
    35de:	89 a3       	std	Y+33, r24	; 0x21
    35e0:	89 a1       	ldd	r24, Y+33	; 0x21
    35e2:	9a a1       	ldd	r25, Y+34	; 0x22
    35e4:	9e 8f       	std	Y+30, r25	; 0x1e
    35e6:	8d 8f       	std	Y+29, r24	; 0x1d
    35e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	f1 f7       	brne	.-4      	; 0x35ec <purpleside+0xa3a>
    35f0:	9e 8f       	std	Y+30, r25	; 0x1e
    35f2:	8d 8f       	std	Y+29, r24	; 0x1d
    35f4:	f2 c0       	rjmp	.+484    	; 0x37da <purpleside+0xc28>
					{
						_delay_ms(1000);
					}
					else if(current_position == 11)
    35f6:	fe 01       	movw	r30, r28
    35f8:	ee 57       	subi	r30, 0x7E	; 126
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 81       	ld	r24, Z
    35fe:	8b 30       	cpi	r24, 0x0B	; 11
    3600:	09 f0       	breq	.+2      	; 0x3604 <purpleside+0xa52>
    3602:	6d c0       	rjmp	.+218    	; 0x36de <purpleside+0xb2c>
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	aa ef       	ldi	r26, 0xFA	; 250
    360a:	b4 e4       	ldi	r27, 0x44	; 68
    360c:	89 8f       	std	Y+25, r24	; 0x19
    360e:	9a 8f       	std	Y+26, r25	; 0x1a
    3610:	ab 8f       	std	Y+27, r26	; 0x1b
    3612:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3614:	69 8d       	ldd	r22, Y+25	; 0x19
    3616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    361a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e4       	ldi	r19, 0x40	; 64
    3620:	4c e1       	ldi	r20, 0x1C	; 28
    3622:	55 e4       	ldi	r21, 0x45	; 69
    3624:	ac d7       	rcall	.+3928   	; 0x457e <__mulsf3>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	8d 8b       	std	Y+21, r24	; 0x15
    362c:	9e 8b       	std	Y+22, r25	; 0x16
    362e:	af 8b       	std	Y+23, r26	; 0x17
    3630:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3632:	6d 89       	ldd	r22, Y+21	; 0x15
    3634:	7e 89       	ldd	r23, Y+22	; 0x16
    3636:	8f 89       	ldd	r24, Y+23	; 0x17
    3638:	98 8d       	ldd	r25, Y+24	; 0x18
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	40 e8       	ldi	r20, 0x80	; 128
    3640:	5f e3       	ldi	r21, 0x3F	; 63
    3642:	4a d6       	rcall	.+3220   	; 0x42d8 <__cmpsf2>
    3644:	88 23       	and	r24, r24
    3646:	2c f4       	brge	.+10     	; 0x3652 <purpleside+0xaa0>
		__ticks = 1;
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	9c 8b       	std	Y+20, r25	; 0x14
    364e:	8b 8b       	std	Y+19, r24	; 0x13
    3650:	3b c0       	rjmp	.+118    	; 0x36c8 <purpleside+0xb16>
	else if (__tmp > 65535)
    3652:	6d 89       	ldd	r22, Y+21	; 0x15
    3654:	7e 89       	ldd	r23, Y+22	; 0x16
    3656:	8f 89       	ldd	r24, Y+23	; 0x17
    3658:	98 8d       	ldd	r25, Y+24	; 0x18
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	3f ef       	ldi	r19, 0xFF	; 255
    365e:	4f e7       	ldi	r20, 0x7F	; 127
    3660:	57 e4       	ldi	r21, 0x47	; 71
    3662:	89 d7       	rcall	.+3858   	; 0x4576 <__gesf2>
    3664:	18 16       	cp	r1, r24
    3666:	3c f5       	brge	.+78     	; 0x36b6 <purpleside+0xb04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3668:	69 8d       	ldd	r22, Y+25	; 0x19
    366a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    366c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    366e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e2       	ldi	r20, 0x20	; 32
    3676:	51 e4       	ldi	r21, 0x41	; 65
    3678:	82 d7       	rcall	.+3844   	; 0x457e <__mulsf3>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	bc 01       	movw	r22, r24
    3680:	cd 01       	movw	r24, r26
    3682:	9b d6       	rcall	.+3382   	; 0x43ba <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	9c 8b       	std	Y+20, r25	; 0x14
    368a:	8b 8b       	std	Y+19, r24	; 0x13
    368c:	0f c0       	rjmp	.+30     	; 0x36ac <purpleside+0xafa>
    368e:	8a ef       	ldi	r24, 0xFA	; 250
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	9a 8b       	std	Y+18, r25	; 0x12
    3694:	89 8b       	std	Y+17, r24	; 0x11
    3696:	89 89       	ldd	r24, Y+17	; 0x11
    3698:	9a 89       	ldd	r25, Y+18	; 0x12
    369a:	01 97       	sbiw	r24, 0x01	; 1
    369c:	f1 f7       	brne	.-4      	; 0x369a <purpleside+0xae8>
    369e:	9a 8b       	std	Y+18, r25	; 0x12
    36a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a2:	8b 89       	ldd	r24, Y+19	; 0x13
    36a4:	9c 89       	ldd	r25, Y+20	; 0x14
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	9c 8b       	std	Y+20, r25	; 0x14
    36aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ac:	8b 89       	ldd	r24, Y+19	; 0x13
    36ae:	9c 89       	ldd	r25, Y+20	; 0x14
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	69 f7       	brne	.-38     	; 0x368e <purpleside+0xadc>
    36b4:	92 c0       	rjmp	.+292    	; 0x37da <purpleside+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b6:	6d 89       	ldd	r22, Y+21	; 0x15
    36b8:	7e 89       	ldd	r23, Y+22	; 0x16
    36ba:	8f 89       	ldd	r24, Y+23	; 0x17
    36bc:	98 8d       	ldd	r25, Y+24	; 0x18
    36be:	7d d6       	rcall	.+3322   	; 0x43ba <__fixunssfsi>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	9c 8b       	std	Y+20, r25	; 0x14
    36c6:	8b 8b       	std	Y+19, r24	; 0x13
    36c8:	8b 89       	ldd	r24, Y+19	; 0x13
    36ca:	9c 89       	ldd	r25, Y+20	; 0x14
    36cc:	98 8b       	std	Y+16, r25	; 0x10
    36ce:	8f 87       	std	Y+15, r24	; 0x0f
    36d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d2:	98 89       	ldd	r25, Y+16	; 0x10
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	f1 f7       	brne	.-4      	; 0x36d4 <purpleside+0xb22>
    36d8:	98 8b       	std	Y+16, r25	; 0x10
    36da:	8f 87       	std	Y+15, r24	; 0x0f
    36dc:	7e c0       	rjmp	.+252    	; 0x37da <purpleside+0xc28>
					{
						_delay_ms(2000);
					}
					else if(current_position == 12)
    36de:	fe 01       	movw	r30, r28
    36e0:	ee 57       	subi	r30, 0x7E	; 126
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	80 81       	ld	r24, Z
    36e6:	8c 30       	cpi	r24, 0x0C	; 12
    36e8:	09 f0       	breq	.+2      	; 0x36ec <purpleside+0xb3a>
    36ea:	6d c0       	rjmp	.+218    	; 0x37c6 <purpleside+0xc14>
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e8       	ldi	r25, 0x80	; 128
    36f0:	ab eb       	ldi	r26, 0xBB	; 187
    36f2:	b4 e4       	ldi	r27, 0x44	; 68
    36f4:	8b 87       	std	Y+11, r24	; 0x0b
    36f6:	9c 87       	std	Y+12, r25	; 0x0c
    36f8:	ad 87       	std	Y+13, r26	; 0x0d
    36fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3700:	8d 85       	ldd	r24, Y+13	; 0x0d
    3702:	9e 85       	ldd	r25, Y+14	; 0x0e
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e4       	ldi	r19, 0x40	; 64
    3708:	4c e1       	ldi	r20, 0x1C	; 28
    370a:	55 e4       	ldi	r21, 0x45	; 69
    370c:	38 d7       	rcall	.+3696   	; 0x457e <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	8f 83       	std	Y+7, r24	; 0x07
    3714:	98 87       	std	Y+8, r25	; 0x08
    3716:	a9 87       	std	Y+9, r26	; 0x09
    3718:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    371a:	6f 81       	ldd	r22, Y+7	; 0x07
    371c:	78 85       	ldd	r23, Y+8	; 0x08
    371e:	89 85       	ldd	r24, Y+9	; 0x09
    3720:	9a 85       	ldd	r25, Y+10	; 0x0a
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e8       	ldi	r20, 0x80	; 128
    3728:	5f e3       	ldi	r21, 0x3F	; 63
    372a:	d6 d5       	rcall	.+2988   	; 0x42d8 <__cmpsf2>
    372c:	88 23       	and	r24, r24
    372e:	2c f4       	brge	.+10     	; 0x373a <purpleside+0xb88>
		__ticks = 1;
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9e 83       	std	Y+6, r25	; 0x06
    3736:	8d 83       	std	Y+5, r24	; 0x05
    3738:	3b c0       	rjmp	.+118    	; 0x37b0 <purpleside+0xbfe>
	else if (__tmp > 65535)
    373a:	6f 81       	ldd	r22, Y+7	; 0x07
    373c:	78 85       	ldd	r23, Y+8	; 0x08
    373e:	89 85       	ldd	r24, Y+9	; 0x09
    3740:	9a 85       	ldd	r25, Y+10	; 0x0a
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	3f ef       	ldi	r19, 0xFF	; 255
    3746:	4f e7       	ldi	r20, 0x7F	; 127
    3748:	57 e4       	ldi	r21, 0x47	; 71
    374a:	15 d7       	rcall	.+3626   	; 0x4576 <__gesf2>
    374c:	18 16       	cp	r1, r24
    374e:	3c f5       	brge	.+78     	; 0x379e <purpleside+0xbec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3750:	6b 85       	ldd	r22, Y+11	; 0x0b
    3752:	7c 85       	ldd	r23, Y+12	; 0x0c
    3754:	8d 85       	ldd	r24, Y+13	; 0x0d
    3756:	9e 85       	ldd	r25, Y+14	; 0x0e
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e2       	ldi	r20, 0x20	; 32
    375e:	51 e4       	ldi	r21, 0x41	; 65
    3760:	0e d7       	rcall	.+3612   	; 0x457e <__mulsf3>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	bc 01       	movw	r22, r24
    3768:	cd 01       	movw	r24, r26
    376a:	27 d6       	rcall	.+3150   	; 0x43ba <__fixunssfsi>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	9e 83       	std	Y+6, r25	; 0x06
    3772:	8d 83       	std	Y+5, r24	; 0x05
    3774:	0f c0       	rjmp	.+30     	; 0x3794 <purpleside+0xbe2>
    3776:	8a ef       	ldi	r24, 0xFA	; 250
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	9c 83       	std	Y+4, r25	; 0x04
    377c:	8b 83       	std	Y+3, r24	; 0x03
    377e:	8b 81       	ldd	r24, Y+3	; 0x03
    3780:	9c 81       	ldd	r25, Y+4	; 0x04
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	f1 f7       	brne	.-4      	; 0x3782 <purpleside+0xbd0>
    3786:	9c 83       	std	Y+4, r25	; 0x04
    3788:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378a:	8d 81       	ldd	r24, Y+5	; 0x05
    378c:	9e 81       	ldd	r25, Y+6	; 0x06
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	9e 83       	std	Y+6, r25	; 0x06
    3792:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3794:	8d 81       	ldd	r24, Y+5	; 0x05
    3796:	9e 81       	ldd	r25, Y+6	; 0x06
    3798:	00 97       	sbiw	r24, 0x00	; 0
    379a:	69 f7       	brne	.-38     	; 0x3776 <purpleside+0xbc4>
    379c:	1e c0       	rjmp	.+60     	; 0x37da <purpleside+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379e:	6f 81       	ldd	r22, Y+7	; 0x07
    37a0:	78 85       	ldd	r23, Y+8	; 0x08
    37a2:	89 85       	ldd	r24, Y+9	; 0x09
    37a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a6:	09 d6       	rcall	.+3090   	; 0x43ba <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	9e 83       	std	Y+6, r25	; 0x06
    37ae:	8d 83       	std	Y+5, r24	; 0x05
    37b0:	8d 81       	ldd	r24, Y+5	; 0x05
    37b2:	9e 81       	ldd	r25, Y+6	; 0x06
    37b4:	9a 83       	std	Y+2, r25	; 0x02
    37b6:	89 83       	std	Y+1, r24	; 0x01
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <purpleside+0xc0a>
    37c0:	9a 83       	std	Y+2, r25	; 0x02
    37c2:	89 83       	std	Y+1, r24	; 0x01
    37c4:	0a c0       	rjmp	.+20     	; 0x37da <purpleside+0xc28>
						odometry_rotate(90,LOW_SPEED,NULL);
						_delay_ms(800);
						odometry_move_straight(500,LOW_SPEED,NULL);
						while(1);
					}*/
					else if(current_position == 15)
    37c6:	fe 01       	movw	r30, r28
    37c8:	ee 57       	subi	r30, 0x7E	; 126
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 81       	ld	r24, Z
    37ce:	8f 30       	cpi	r24, 0x0F	; 15
    37d0:	21 f4       	brne	.+8      	; 0x37da <purpleside+0xc28>
					{
						PORTG = 0x00;
    37d2:	e4 e3       	ldi	r30, 0x34	; 52
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	10 82       	st	Z, r1
    37d8:	ff cf       	rjmp	.-2      	; 0x37d8 <purpleside+0xc26>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    37da:	de 01       	movw	r26, r28
    37dc:	ae 57       	subi	r26, 0x7E	; 126
    37de:	bf 4f       	sbci	r27, 0xFF	; 255
    37e0:	fe 01       	movw	r30, r28
    37e2:	ee 57       	subi	r30, 0x7E	; 126
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	80 81       	ld	r24, Z
    37e8:	8f 5f       	subi	r24, 0xFF	; 255
    37ea:	8c 93       	st	X, r24
    37ec:	fe 01       	movw	r30, r28
    37ee:	ee 57       	subi	r30, 0x7E	; 126
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	80 81       	ld	r24, Z
    37f4:	80 31       	cpi	r24, 0x10	; 16
    37f6:	08 f4       	brcc	.+2      	; 0x37fa <purpleside+0xc48>
    37f8:	2b ca       	rjmp	.-2986   	; 0x2c50 <purpleside+0x9e>
    37fa:	17 ca       	rjmp	.-3026   	; 0x2c2a <purpleside+0x78>

000037fc <timer_register_callback>:
//static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    37fc:	df 93       	push	r29
    37fe:	cf 93       	push	r28
    3800:	00 d0       	rcall	.+0      	; 0x3802 <timer_register_callback+0x6>
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	9a 83       	std	Y+2, r25	; 0x02
    3808:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	9a 81       	ldd	r25, Y+2	; 0x02
    380e:	90 93 44 04 	sts	0x0444, r25
    3812:	80 93 43 04 	sts	0x0443, r24
}
    3816:	0f 90       	pop	r0
    3818:	0f 90       	pop	r0
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret

00003820 <logger>:
void logger(char text[])//uart 0
{
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	00 d0       	rcall	.+0      	; 0x3826 <logger+0x6>
    3826:	00 d0       	rcall	.+0      	; 0x3828 <logger+0x8>
    3828:	cd b7       	in	r28, 0x3d	; 61
    382a:	de b7       	in	r29, 0x3e	; 62
    382c:	9c 83       	std	Y+4, r25	; 0x04
    382e:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    3830:	1a 82       	std	Y+2, r1	; 0x02
    3832:	19 82       	std	Y+1, r1	; 0x01
    3834:	0e c0       	rjmp	.+28     	; 0x3852 <logger+0x32>
	
	while(text[i] != 0x00)
	{
		UART1_Write(text[i]);
    3836:	29 81       	ldd	r18, Y+1	; 0x01
    3838:	3a 81       	ldd	r19, Y+2	; 0x02
    383a:	8b 81       	ldd	r24, Y+3	; 0x03
    383c:	9c 81       	ldd	r25, Y+4	; 0x04
    383e:	fc 01       	movw	r30, r24
    3840:	e2 0f       	add	r30, r18
    3842:	f3 1f       	adc	r31, r19
    3844:	80 81       	ld	r24, Z
    3846:	62 d4       	rcall	.+2244   	; 0x410c <UART1_Write>
		i++;
    3848:	89 81       	ldd	r24, Y+1	; 0x01
    384a:	9a 81       	ldd	r25, Y+2	; 0x02
    384c:	01 96       	adiw	r24, 0x01	; 1
    384e:	9a 83       	std	Y+2, r25	; 0x02
    3850:	89 83       	std	Y+1, r24	; 0x01
}
void logger(char text[])//uart 0
{
	int i = 0;
	
	while(text[i] != 0x00)
    3852:	29 81       	ldd	r18, Y+1	; 0x01
    3854:	3a 81       	ldd	r19, Y+2	; 0x02
    3856:	8b 81       	ldd	r24, Y+3	; 0x03
    3858:	9c 81       	ldd	r25, Y+4	; 0x04
    385a:	fc 01       	movw	r30, r24
    385c:	e2 0f       	add	r30, r18
    385e:	f3 1f       	adc	r31, r19
    3860:	80 81       	ld	r24, Z
    3862:	88 23       	and	r24, r24
    3864:	41 f7       	brne	.-48     	; 0x3836 <logger+0x16>
	{
		UART1_Write(text[i]);
		i++;
	}
}
    3866:	0f 90       	pop	r0
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <breakpoint>:
void breakpoint()
{
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	2f 97       	sbiw	r28, 0x0f	; 15
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	f8 94       	cli
    3882:	de bf       	out	0x3e, r29	; 62
    3884:	0f be       	out	0x3f, r0	; 63
    3886:	cd bf       	out	0x3d, r28	; 61
    3888:	71 c0       	rjmp	.+226    	; 0x396c <breakpoint+0xf8>
	unsigned char read;
	while(read != 'c')
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	a8 ec       	ldi	r26, 0xC8	; 200
    3890:	b2 e4       	ldi	r27, 0x42	; 66
    3892:	8b 87       	std	Y+11, r24	; 0x0b
    3894:	9c 87       	std	Y+12, r25	; 0x0c
    3896:	ad 87       	std	Y+13, r26	; 0x0d
    3898:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389a:	6b 85       	ldd	r22, Y+11	; 0x0b
    389c:	7c 85       	ldd	r23, Y+12	; 0x0c
    389e:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e4       	ldi	r19, 0x40	; 64
    38a6:	4c e1       	ldi	r20, 0x1C	; 28
    38a8:	55 e4       	ldi	r21, 0x45	; 69
    38aa:	69 d6       	rcall	.+3282   	; 0x457e <__mulsf3>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	8f 83       	std	Y+7, r24	; 0x07
    38b2:	98 87       	std	Y+8, r25	; 0x08
    38b4:	a9 87       	std	Y+9, r26	; 0x09
    38b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38b8:	6f 81       	ldd	r22, Y+7	; 0x07
    38ba:	78 85       	ldd	r23, Y+8	; 0x08
    38bc:	89 85       	ldd	r24, Y+9	; 0x09
    38be:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	40 e8       	ldi	r20, 0x80	; 128
    38c6:	5f e3       	ldi	r21, 0x3F	; 63
    38c8:	07 d5       	rcall	.+2574   	; 0x42d8 <__cmpsf2>
    38ca:	88 23       	and	r24, r24
    38cc:	2c f4       	brge	.+10     	; 0x38d8 <breakpoint+0x64>
		__ticks = 1;
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	9e 83       	std	Y+6, r25	; 0x06
    38d4:	8d 83       	std	Y+5, r24	; 0x05
    38d6:	3b c0       	rjmp	.+118    	; 0x394e <breakpoint+0xda>
	else if (__tmp > 65535)
    38d8:	6f 81       	ldd	r22, Y+7	; 0x07
    38da:	78 85       	ldd	r23, Y+8	; 0x08
    38dc:	89 85       	ldd	r24, Y+9	; 0x09
    38de:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	3f ef       	ldi	r19, 0xFF	; 255
    38e4:	4f e7       	ldi	r20, 0x7F	; 127
    38e6:	57 e4       	ldi	r21, 0x47	; 71
    38e8:	46 d6       	rcall	.+3212   	; 0x4576 <__gesf2>
    38ea:	18 16       	cp	r1, r24
    38ec:	3c f5       	brge	.+78     	; 0x393c <breakpoint+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e2       	ldi	r20, 0x20	; 32
    38fc:	51 e4       	ldi	r21, 0x41	; 65
    38fe:	3f d6       	rcall	.+3198   	; 0x457e <__mulsf3>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	bc 01       	movw	r22, r24
    3906:	cd 01       	movw	r24, r26
    3908:	58 d5       	rcall	.+2736   	; 0x43ba <__fixunssfsi>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	9e 83       	std	Y+6, r25	; 0x06
    3910:	8d 83       	std	Y+5, r24	; 0x05
    3912:	0f c0       	rjmp	.+30     	; 0x3932 <breakpoint+0xbe>
    3914:	8a ef       	ldi	r24, 0xFA	; 250
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	9c 83       	std	Y+4, r25	; 0x04
    391a:	8b 83       	std	Y+3, r24	; 0x03
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	9c 81       	ldd	r25, Y+4	; 0x04
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <breakpoint+0xac>
    3924:	9c 83       	std	Y+4, r25	; 0x04
    3926:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3928:	8d 81       	ldd	r24, Y+5	; 0x05
    392a:	9e 81       	ldd	r25, Y+6	; 0x06
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	9e 83       	std	Y+6, r25	; 0x06
    3930:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3932:	8d 81       	ldd	r24, Y+5	; 0x05
    3934:	9e 81       	ldd	r25, Y+6	; 0x06
    3936:	00 97       	sbiw	r24, 0x00	; 0
    3938:	69 f7       	brne	.-38     	; 0x3914 <breakpoint+0xa0>
    393a:	13 c0       	rjmp	.+38     	; 0x3962 <breakpoint+0xee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    393c:	6f 81       	ldd	r22, Y+7	; 0x07
    393e:	78 85       	ldd	r23, Y+8	; 0x08
    3940:	89 85       	ldd	r24, Y+9	; 0x09
    3942:	9a 85       	ldd	r25, Y+10	; 0x0a
    3944:	3a d5       	rcall	.+2676   	; 0x43ba <__fixunssfsi>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	9e 83       	std	Y+6, r25	; 0x06
    394c:	8d 83       	std	Y+5, r24	; 0x05
    394e:	8d 81       	ldd	r24, Y+5	; 0x05
    3950:	9e 81       	ldd	r25, Y+6	; 0x06
    3952:	9a 83       	std	Y+2, r25	; 0x02
    3954:	89 83       	std	Y+1, r24	; 0x01
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	9a 81       	ldd	r25, Y+2	; 0x02
    395a:	01 97       	sbiw	r24, 0x01	; 1
    395c:	f1 f7       	brne	.-4      	; 0x395a <breakpoint+0xe6>
    395e:	9a 83       	std	Y+2, r25	; 0x02
    3960:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(100);
		logger("Breakpoint reached!");
    3962:	8e e0       	ldi	r24, 0x0E	; 14
    3964:	92 e0       	ldi	r25, 0x02	; 2
    3966:	5c df       	rcall	.-328    	; 0x3820 <logger>
		
		read = UART1_Read();
    3968:	1c d4       	rcall	.+2104   	; 0x41a2 <UART1_Read>
    396a:	8f 87       	std	Y+15, r24	; 0x0f
	}
}
void breakpoint()
{
	unsigned char read;
	while(read != 'c')
    396c:	8f 85       	ldd	r24, Y+15	; 0x0f
    396e:	83 36       	cpi	r24, 0x63	; 99
    3970:	09 f0       	breq	.+2      	; 0x3974 <breakpoint+0x100>
    3972:	8b cf       	rjmp	.-234    	; 0x388a <breakpoint+0x16>
		_delay_ms(100);
		logger("Breakpoint reached!");
		
		read = UART1_Read();
	}
}
    3974:	2f 96       	adiw	r28, 0x0f	; 15
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	08 95       	ret

00003986 <log_pos>:
void log_pos()
{
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	00 d0       	rcall	.+0      	; 0x398c <log_pos+0x6>
    398c:	0f 92       	push	r0
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
	/*struct odometry_position position;
	int16_t x = position.x;*/
	int16_t x = 65535;
    3992:	8f ef       	ldi	r24, 0xFF	; 255
    3994:	9f ef       	ldi	r25, 0xFF	; 255
    3996:	9b 83       	std	Y+3, r25	; 0x03
    3998:	8a 83       	std	Y+2, r24	; 0x02
	char send_x;
	send_x = (char)(x);
    399a:	8a 81       	ldd	r24, Y+2	; 0x02
    399c:	89 83       	std	Y+1, r24	; 0x01
	UART1_Write(send_x);
    399e:	89 81       	ldd	r24, Y+1	; 0x01
    39a0:	b5 d3       	rcall	.+1898   	; 0x410c <UART1_Write>
	
}
    39a2:	0f 90       	pop	r0
    39a4:	0f 90       	pop	r0
    39a6:	0f 90       	pop	r0
    39a8:	cf 91       	pop	r28
    39aa:	df 91       	pop	r29
    39ac:	08 95       	ret

000039ae <timer_init>:
		return 1;
	}
	return 0;
}*/
void timer_init(unsigned int freq)
{
    39ae:	0f 93       	push	r16
    39b0:	1f 93       	push	r17
    39b2:	df 93       	push	r29
    39b4:	cf 93       	push	r28
    39b6:	00 d0       	rcall	.+0      	; 0x39b8 <timer_init+0xa>
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	9a 83       	std	Y+2, r25	; 0x02
    39be:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    39c0:	e0 e8       	ldi	r30, 0x80	; 128
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    39c6:	e1 e8       	ldi	r30, 0x81	; 129
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	89 e0       	ldi	r24, 0x09	; 9
    39cc:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    39ce:	08 e8       	ldi	r16, 0x88	; 136
    39d0:	10 e0       	ldi	r17, 0x00	; 0
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	9a 81       	ldd	r25, Y+2	; 0x02
    39d6:	cc 01       	movw	r24, r24
    39d8:	a0 e0       	ldi	r26, 0x00	; 0
    39da:	b0 e0       	ldi	r27, 0x00	; 0
    39dc:	bc 01       	movw	r22, r24
    39de:	cd 01       	movw	r24, r26
    39e0:	18 d5       	rcall	.+2608   	; 0x4412 <__floatunsisf>
    39e2:	9b 01       	movw	r18, r22
    39e4:	ac 01       	movw	r20, r24
    39e6:	60 e8       	ldi	r22, 0x80	; 128
    39e8:	76 e9       	ldi	r23, 0x96	; 150
    39ea:	88 e1       	ldi	r24, 0x18	; 24
    39ec:	9b e4       	ldi	r25, 0x4B	; 75
    39ee:	78 d4       	rcall	.+2288   	; 0x42e0 <__divsf3>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	bc 01       	movw	r22, r24
    39f6:	cd 01       	movw	r24, r26
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	40 e0       	ldi	r20, 0x00	; 0
    39fe:	5f e3       	ldi	r21, 0x3F	; 63
    3a00:	07 d4       	rcall	.+2062   	; 0x4210 <__addsf3>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	bc 01       	movw	r22, r24
    3a08:	cd 01       	movw	r24, r26
    3a0a:	d7 d4       	rcall	.+2478   	; 0x43ba <__fixunssfsi>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	f8 01       	movw	r30, r16
    3a12:	91 83       	std	Z+1, r25	; 0x01
    3a14:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    3a16:	ef e6       	ldi	r30, 0x6F	; 111
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	82 e0       	ldi	r24, 0x02	; 2
    3a1c:	80 83       	st	Z, r24

	SREG |= 0x80;
    3a1e:	af e5       	ldi	r26, 0x5F	; 95
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	ef e5       	ldi	r30, 0x5F	; 95
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	80 68       	ori	r24, 0x80	; 128
    3a2a:	8c 93       	st	X, r24
}
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	cf 91       	pop	r28
    3a32:	df 91       	pop	r29
    3a34:	1f 91       	pop	r17
    3a36:	0f 91       	pop	r16
    3a38:	08 95       	ret

00003a3a <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    3a3a:	1f 92       	push	r1
    3a3c:	0f 92       	push	r0
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	0f 92       	push	r0
    3a42:	00 90 5b 00 	lds	r0, 0x005B
    3a46:	0f 92       	push	r0
    3a48:	11 24       	eor	r1, r1
    3a4a:	2f 93       	push	r18
    3a4c:	3f 93       	push	r19
    3a4e:	4f 93       	push	r20
    3a50:	5f 93       	push	r21
    3a52:	6f 93       	push	r22
    3a54:	7f 93       	push	r23
    3a56:	8f 93       	push	r24
    3a58:	9f 93       	push	r25
    3a5a:	af 93       	push	r26
    3a5c:	bf 93       	push	r27
    3a5e:	ef 93       	push	r30
    3a60:	ff 93       	push	r31
    3a62:	df 93       	push	r29
    3a64:	cf 93       	push	r28
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    3a6a:	80 91 43 04 	lds	r24, 0x0443
    3a6e:	90 91 44 04 	lds	r25, 0x0444
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	29 f0       	breq	.+10     	; 0x3a80 <__vector_12+0x46>
        timer_callback();
    3a76:	e0 91 43 04 	lds	r30, 0x0443
    3a7a:	f0 91 44 04 	lds	r31, 0x0444
    3a7e:	09 95       	icall
	if(sys_time >= 90000)
    3a80:	80 91 45 04 	lds	r24, 0x0445
    3a84:	90 91 46 04 	lds	r25, 0x0446
    3a88:	a0 91 47 04 	lds	r26, 0x0447
    3a8c:	b0 91 48 04 	lds	r27, 0x0448
    3a90:	80 39       	cpi	r24, 0x90	; 144
    3a92:	2f e5       	ldi	r18, 0x5F	; 95
    3a94:	92 07       	cpc	r25, r18
    3a96:	21 e0       	ldi	r18, 0x01	; 1
    3a98:	a2 07       	cpc	r26, r18
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	b2 07       	cpc	r27, r18
    3a9e:	10 f0       	brcs	.+4      	; 0x3aa4 <__vector_12+0x6a>
		actuators_umbrella();
    3aa0:	0e 94 9a 03 	call	0x734	; 0x734 <actuators_umbrella>
	sys_time++;
    3aa4:	80 91 45 04 	lds	r24, 0x0445
    3aa8:	90 91 46 04 	lds	r25, 0x0446
    3aac:	a0 91 47 04 	lds	r26, 0x0447
    3ab0:	b0 91 48 04 	lds	r27, 0x0448
    3ab4:	01 96       	adiw	r24, 0x01	; 1
    3ab6:	a1 1d       	adc	r26, r1
    3ab8:	b1 1d       	adc	r27, r1
    3aba:	80 93 45 04 	sts	0x0445, r24
    3abe:	90 93 46 04 	sts	0x0446, r25
    3ac2:	a0 93 47 04 	sts	0x0447, r26
    3ac6:	b0 93 48 04 	sts	0x0448, r27
}
    3aca:	cf 91       	pop	r28
    3acc:	df 91       	pop	r29
    3ace:	ff 91       	pop	r31
    3ad0:	ef 91       	pop	r30
    3ad2:	bf 91       	pop	r27
    3ad4:	af 91       	pop	r26
    3ad6:	9f 91       	pop	r25
    3ad8:	8f 91       	pop	r24
    3ada:	7f 91       	pop	r23
    3adc:	6f 91       	pop	r22
    3ade:	5f 91       	pop	r21
    3ae0:	4f 91       	pop	r20
    3ae2:	3f 91       	pop	r19
    3ae4:	2f 91       	pop	r18
    3ae6:	0f 90       	pop	r0
    3ae8:	00 92 5b 00 	sts	0x005B, r0
    3aec:	0f 90       	pop	r0
    3aee:	0f be       	out	0x3f, r0	; 63
    3af0:	0f 90       	pop	r0
    3af2:	1f 90       	pop	r1
    3af4:	18 95       	reti

00003af6 <sides_switch_check>:
signed char sides_switch_check(void)
{
    3af6:	df 93       	push	r29
    3af8:	cf 93       	push	r28
    3afa:	0f 92       	push	r0
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
	if(gpio_read_pin(SIDE_PIN) == 1)
    3b00:	89 e2       	ldi	r24, 0x29	; 41
    3b02:	0e 94 92 08 	call	0x1124	; 0x1124 <gpio_read_pin>
    3b06:	81 30       	cpi	r24, 0x01	; 1
    3b08:	19 f4       	brne	.+6      	; 0x3b10 <sides_switch_check+0x1a>
	{
		return 1;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	89 83       	std	Y+1, r24	; 0x01
    3b0e:	01 c0       	rjmp	.+2      	; 0x3b12 <sides_switch_check+0x1c>
	}
	
	return 0;
    3b10:	19 82       	std	Y+1, r1	; 0x01
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b14:	0f 90       	pop	r0
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	08 95       	ret

00003b1c <system_reset_system_time>:

void system_reset_system_time(void)
{
    3b1c:	df 93       	push	r29
    3b1e:	cf 93       	push	r28
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    3b24:	10 92 45 04 	sts	0x0445, r1
    3b28:	10 92 46 04 	sts	0x0446, r1
    3b2c:	10 92 47 04 	sts	0x0447, r1
    3b30:	10 92 48 04 	sts	0x0448, r1
}
    3b34:	cf 91       	pop	r28
    3b36:	df 91       	pop	r29
    3b38:	08 95       	ret

00003b3a <system_set_match_started>:
void system_set_match_started(void)
{
    3b3a:	df 93       	push	r29
    3b3c:	cf 93       	push	r28
    3b3e:	cd b7       	in	r28, 0x3d	; 61
    3b40:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	80 93 49 04 	sts	0x0449, r24
}
    3b48:	cf 91       	pop	r28
    3b4a:	df 91       	pop	r29
    3b4c:	08 95       	ret

00003b4e <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    3b56:	80 91 45 04 	lds	r24, 0x0445
    3b5a:	90 91 46 04 	lds	r25, 0x0446
    3b5e:	a0 91 47 04 	lds	r26, 0x0447
    3b62:	b0 91 48 04 	lds	r27, 0x0448
}
    3b66:	bc 01       	movw	r22, r24
    3b68:	cd 01       	movw	r24, r26
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	08 95       	ret

00003b70 <system_init>:
	current = system_get_system_time();
	while((sys_time - current ) < ms);
}
*/
void system_init(void)
{	
    3b70:	df 93       	push	r29
    3b72:	cf 93       	push	r28
    3b74:	cd b7       	in	r28, 0x3d	; 61
    3b76:	de b7       	in	r29, 0x3e	; 62
    3b78:	6c 97       	sbiw	r28, 0x1c	; 28
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	f8 94       	cli
    3b7e:	de bf       	out	0x3e, r29	; 62
    3b80:	0f be       	out	0x3f, r0	; 63
    3b82:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    3b84:	82 e1       	ldi	r24, 0x12	; 18
    3b86:	99 e0       	ldi	r25, 0x09	; 9
    3b88:	39 de       	rcall	.-910    	; 0x37fc <timer_register_callback>
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	a8 ec       	ldi	r26, 0xC8	; 200
    3b90:	b2 e4       	ldi	r27, 0x42	; 66
    3b92:	89 8f       	std	Y+25, r24	; 0x19
    3b94:	9a 8f       	std	Y+26, r25	; 0x1a
    3b96:	ab 8f       	std	Y+27, r26	; 0x1b
    3b98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9a:	69 8d       	ldd	r22, Y+25	; 0x19
    3b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e4       	ldi	r19, 0x40	; 64
    3ba6:	4c e1       	ldi	r20, 0x1C	; 28
    3ba8:	55 e4       	ldi	r21, 0x45	; 69
    3baa:	e9 d4       	rcall	.+2514   	; 0x457e <__mulsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	8d 8b       	std	Y+21, r24	; 0x15
    3bb2:	9e 8b       	std	Y+22, r25	; 0x16
    3bb4:	af 8b       	std	Y+23, r26	; 0x17
    3bb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    3bba:	7e 89       	ldd	r23, Y+22	; 0x16
    3bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    3bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	40 e8       	ldi	r20, 0x80	; 128
    3bc6:	5f e3       	ldi	r21, 0x3F	; 63
    3bc8:	87 d3       	rcall	.+1806   	; 0x42d8 <__cmpsf2>
    3bca:	88 23       	and	r24, r24
    3bcc:	2c f4       	brge	.+10     	; 0x3bd8 <system_init+0x68>
		__ticks = 1;
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	9c 8b       	std	Y+20, r25	; 0x14
    3bd4:	8b 8b       	std	Y+19, r24	; 0x13
    3bd6:	3b c0       	rjmp	.+118    	; 0x3c4e <system_init+0xde>
	else if (__tmp > 65535)
    3bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    3bda:	7e 89       	ldd	r23, Y+22	; 0x16
    3bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    3bde:	98 8d       	ldd	r25, Y+24	; 0x18
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	3f ef       	ldi	r19, 0xFF	; 255
    3be4:	4f e7       	ldi	r20, 0x7F	; 127
    3be6:	57 e4       	ldi	r21, 0x47	; 71
    3be8:	c6 d4       	rcall	.+2444   	; 0x4576 <__gesf2>
    3bea:	18 16       	cp	r1, r24
    3bec:	3c f5       	brge	.+78     	; 0x3c3c <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bee:	69 8d       	ldd	r22, Y+25	; 0x19
    3bf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	40 e2       	ldi	r20, 0x20	; 32
    3bfc:	51 e4       	ldi	r21, 0x41	; 65
    3bfe:	bf d4       	rcall	.+2430   	; 0x457e <__mulsf3>
    3c00:	dc 01       	movw	r26, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	bc 01       	movw	r22, r24
    3c06:	cd 01       	movw	r24, r26
    3c08:	d8 d3       	rcall	.+1968   	; 0x43ba <__fixunssfsi>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	9c 8b       	std	Y+20, r25	; 0x14
    3c10:	8b 8b       	std	Y+19, r24	; 0x13
    3c12:	0f c0       	rjmp	.+30     	; 0x3c32 <system_init+0xc2>
    3c14:	8a ef       	ldi	r24, 0xFA	; 250
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	9a 8b       	std	Y+18, r25	; 0x12
    3c1a:	89 8b       	std	Y+17, r24	; 0x11
    3c1c:	89 89       	ldd	r24, Y+17	; 0x11
    3c1e:	9a 89       	ldd	r25, Y+18	; 0x12
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	f1 f7       	brne	.-4      	; 0x3c20 <system_init+0xb0>
    3c24:	9a 8b       	std	Y+18, r25	; 0x12
    3c26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c28:	8b 89       	ldd	r24, Y+19	; 0x13
    3c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	9c 8b       	std	Y+20, r25	; 0x14
    3c30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c32:	8b 89       	ldd	r24, Y+19	; 0x13
    3c34:	9c 89       	ldd	r25, Y+20	; 0x14
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	69 f7       	brne	.-38     	; 0x3c14 <system_init+0xa4>
    3c3a:	13 c0       	rjmp	.+38     	; 0x3c62 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c40:	8f 89       	ldd	r24, Y+23	; 0x17
    3c42:	98 8d       	ldd	r25, Y+24	; 0x18
    3c44:	ba d3       	rcall	.+1908   	; 0x43ba <__fixunssfsi>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	9c 8b       	std	Y+20, r25	; 0x14
    3c4c:	8b 8b       	std	Y+19, r24	; 0x13
    3c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c50:	9c 89       	ldd	r25, Y+20	; 0x14
    3c52:	98 8b       	std	Y+16, r25	; 0x10
    3c54:	8f 87       	std	Y+15, r24	; 0x0f
    3c56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c58:	98 89       	ldd	r25, Y+16	; 0x10
    3c5a:	01 97       	sbiw	r24, 0x01	; 1
    3c5c:	f1 f7       	brne	.-4      	; 0x3c5a <system_init+0xea>
    3c5e:	98 8b       	std	Y+16, r25	; 0x10
    3c60:	8f 87       	std	Y+15, r24	; 0x0f
	
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    3c62:	88 e2       	ldi	r24, 0x28	; 40
    3c64:	60 e0       	ldi	r22, 0x00	; 0
    3c66:	40 e0       	ldi	r20, 0x00	; 0
    3c68:	0e 94 24 07 	call	0xe48	; 0xe48 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    3c6c:	89 e2       	ldi	r24, 0x29	; 41
    3c6e:	60 e0       	ldi	r22, 0x00	; 0
    3c70:	40 e0       	ldi	r20, 0x00	; 0
    3c72:	0e 94 24 07 	call	0xe48	; 0xe48 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    3c76:	88 e0       	ldi	r24, 0x08	; 8
    3c78:	60 e0       	ldi	r22, 0x00	; 0
    3c7a:	40 e0       	ldi	r20, 0x00	; 0
    3c7c:	0e 94 24 07 	call	0xe48	; 0xe48 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    3c80:	8a e0       	ldi	r24, 0x0A	; 10
    3c82:	60 e0       	ldi	r22, 0x00	; 0
    3c84:	40 e0       	ldi	r20, 0x00	; 0
    3c86:	0e 94 24 07 	call	0xe48	; 0xe48 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    3c8a:	8c e0       	ldi	r24, 0x0C	; 12
    3c8c:	60 e0       	ldi	r22, 0x00	; 0
    3c8e:	40 e0       	ldi	r20, 0x00	; 0
    3c90:	0e 94 24 07 	call	0xe48	; 0xe48 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    3c94:	8e e0       	ldi	r24, 0x0E	; 14
    3c96:	60 e0       	ldi	r22, 0x00	; 0
    3c98:	40 e0       	ldi	r20, 0x00	; 0
    3c9a:	0e 94 24 07 	call	0xe48	; 0xe48 <gpio_register_pin>
	
	
	DDRG = 0xff;
    3c9e:	e3 e3       	ldi	r30, 0x33	; 51
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	8f ef       	ldi	r24, 0xFF	; 255
    3ca4:	80 83       	st	Z, r24
	PORTG = 0x00;
    3ca6:	e4 e3       	ldi	r30, 0x34	; 52
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	10 82       	st	Z, r1
	servo_init(50);
    3cac:	82 e3       	ldi	r24, 0x32	; 50
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	0e 94 19 01 	call	0x232	; 0x232 <servo_init>
	timer_init(1000);
    3cb4:	88 ee       	ldi	r24, 0xE8	; 232
    3cb6:	93 e0       	ldi	r25, 0x03	; 3
    3cb8:	7a de       	rcall	.-780    	; 0x39ae <timer_init>
	CAN_Init(1);
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	0e 94 df 05 	call	0xbbe	; 0xbbe <CAN_Init>
	initUart1(UART1_BAUD,UART_ISR_OFF);
    3cc0:	60 e8       	ldi	r22, 0x80	; 128
    3cc2:	75 e2       	ldi	r23, 0x25	; 37
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	40 e0       	ldi	r20, 0x00	; 0
    3cca:	0f d1       	rcall	.+542    	; 0x3eea <initUart1>

	//actuators_setup();
	
	logger("Everything setup, waiting for jumper | system.c\n");
    3ccc:	82 e2       	ldi	r24, 0x22	; 34
    3cce:	92 e0       	ldi	r25, 0x02	; 2
    3cd0:	a7 dd       	rcall	.-1202   	; 0x3820 <logger>
	
	while(!(gpio_read_pin(JUMPER_PIN)));
    3cd2:	88 e2       	ldi	r24, 0x28	; 40
    3cd4:	0e 94 92 08 	call	0x1124	; 0x1124 <gpio_read_pin>
    3cd8:	88 23       	and	r24, r24
    3cda:	d9 f3       	breq	.-10     	; 0x3cd2 <system_init+0x162>
    3cdc:	80 e0       	ldi	r24, 0x00	; 0
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	a0 e2       	ldi	r26, 0x20	; 32
    3ce2:	b1 e4       	ldi	r27, 0x41	; 65
    3ce4:	8b 87       	std	Y+11, r24	; 0x0b
    3ce6:	9c 87       	std	Y+12, r25	; 0x0c
    3ce8:	ad 87       	std	Y+13, r26	; 0x0d
    3cea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e4       	ldi	r19, 0x40	; 64
    3cf8:	4c e1       	ldi	r20, 0x1C	; 28
    3cfa:	55 e4       	ldi	r21, 0x45	; 69
    3cfc:	40 d4       	rcall	.+2176   	; 0x457e <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	8f 83       	std	Y+7, r24	; 0x07
    3d04:	98 87       	std	Y+8, r25	; 0x08
    3d06:	a9 87       	std	Y+9, r26	; 0x09
    3d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d0c:	78 85       	ldd	r23, Y+8	; 0x08
    3d0e:	89 85       	ldd	r24, Y+9	; 0x09
    3d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	40 e8       	ldi	r20, 0x80	; 128
    3d18:	5f e3       	ldi	r21, 0x3F	; 63
    3d1a:	de d2       	rcall	.+1468   	; 0x42d8 <__cmpsf2>
    3d1c:	88 23       	and	r24, r24
    3d1e:	2c f4       	brge	.+10     	; 0x3d2a <system_init+0x1ba>
		__ticks = 1;
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	9e 83       	std	Y+6, r25	; 0x06
    3d26:	8d 83       	std	Y+5, r24	; 0x05
    3d28:	3b c0       	rjmp	.+118    	; 0x3da0 <system_init+0x230>
	else if (__tmp > 65535)
    3d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2c:	78 85       	ldd	r23, Y+8	; 0x08
    3d2e:	89 85       	ldd	r24, Y+9	; 0x09
    3d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	3f ef       	ldi	r19, 0xFF	; 255
    3d36:	4f e7       	ldi	r20, 0x7F	; 127
    3d38:	57 e4       	ldi	r21, 0x47	; 71
    3d3a:	1d d4       	rcall	.+2106   	; 0x4576 <__gesf2>
    3d3c:	18 16       	cp	r1, r24
    3d3e:	3c f5       	brge	.+78     	; 0x3d8e <system_init+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	40 e2       	ldi	r20, 0x20	; 32
    3d4e:	51 e4       	ldi	r21, 0x41	; 65
    3d50:	16 d4       	rcall	.+2092   	; 0x457e <__mulsf3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	bc 01       	movw	r22, r24
    3d58:	cd 01       	movw	r24, r26
    3d5a:	2f d3       	rcall	.+1630   	; 0x43ba <__fixunssfsi>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	9e 83       	std	Y+6, r25	; 0x06
    3d62:	8d 83       	std	Y+5, r24	; 0x05
    3d64:	0f c0       	rjmp	.+30     	; 0x3d84 <system_init+0x214>
    3d66:	8a ef       	ldi	r24, 0xFA	; 250
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	9c 83       	std	Y+4, r25	; 0x04
    3d6c:	8b 83       	std	Y+3, r24	; 0x03
    3d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d70:	9c 81       	ldd	r25, Y+4	; 0x04
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <system_init+0x202>
    3d76:	9c 83       	std	Y+4, r25	; 0x04
    3d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d84:	8d 81       	ldd	r24, Y+5	; 0x05
    3d86:	9e 81       	ldd	r25, Y+6	; 0x06
    3d88:	00 97       	sbiw	r24, 0x00	; 0
    3d8a:	69 f7       	brne	.-38     	; 0x3d66 <system_init+0x1f6>
    3d8c:	13 c0       	rjmp	.+38     	; 0x3db4 <system_init+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d90:	78 85       	ldd	r23, Y+8	; 0x08
    3d92:	89 85       	ldd	r24, Y+9	; 0x09
    3d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d96:	11 d3       	rcall	.+1570   	; 0x43ba <__fixunssfsi>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	9e 83       	std	Y+6, r25	; 0x06
    3d9e:	8d 83       	std	Y+5, r24	; 0x05
    3da0:	8d 81       	ldd	r24, Y+5	; 0x05
    3da2:	9e 81       	ldd	r25, Y+6	; 0x06
    3da4:	9a 83       	std	Y+2, r25	; 0x02
    3da6:	89 83       	std	Y+1, r24	; 0x01
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	9a 81       	ldd	r25, Y+2	; 0x02
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	f1 f7       	brne	.-4      	; 0x3dac <system_init+0x23c>
    3db0:	9a 83       	std	Y+2, r25	; 0x02
    3db2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		
	logger("Jumper got pulled,reseted system and set match started. Continuing...\n");
    3db4:	83 e5       	ldi	r24, 0x53	; 83
    3db6:	92 e0       	ldi	r25, 0x02	; 2
    3db8:	33 dd       	rcall	.-1434   	; 0x3820 <logger>

	PORTG = 0xff;
    3dba:	e4 e3       	ldi	r30, 0x34	; 52
    3dbc:	f0 e0       	ldi	r31, 0x00	; 0
    3dbe:	8f ef       	ldi	r24, 0xFF	; 255
    3dc0:	80 83       	st	Z, r24
	system_reset_system_time();
    3dc2:	ac de       	rcall	.-680    	; 0x3b1c <system_reset_system_time>
	system_set_match_started();
    3dc4:	ba de       	rcall	.-652    	; 0x3b3a <system_set_match_started>
	
	
}
    3dc6:	6c 96       	adiw	r28, 0x1c	; 28
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	de bf       	out	0x3e, r29	; 62
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	cd bf       	out	0x3d, r28	; 61
    3dd2:	cf 91       	pop	r28
    3dd4:	df 91       	pop	r29
    3dd6:	08 95       	ret

00003dd8 <__vector_23>:
    3dd8:	1f 92       	push	r1
    3dda:	0f 92       	push	r0
    3ddc:	0f b6       	in	r0, 0x3f	; 63
    3dde:	0f 92       	push	r0
    3de0:	00 90 5b 00 	lds	r0, 0x005B
    3de4:	0f 92       	push	r0
    3de6:	11 24       	eor	r1, r1
    3de8:	8f 93       	push	r24
    3dea:	9f 93       	push	r25
    3dec:	af 93       	push	r26
    3dee:	bf 93       	push	r27
    3df0:	ef 93       	push	r30
    3df2:	ff 93       	push	r31
    3df4:	df 93       	push	r29
    3df6:	cf 93       	push	r28
    3df8:	cd b7       	in	r28, 0x3d	; 61
    3dfa:	de b7       	in	r29, 0x3e	; 62
    3dfc:	80 91 4a 04 	lds	r24, 0x044A
    3e00:	88 23       	and	r24, r24
    3e02:	d9 f0       	breq	.+54     	; 0x3e3a <__vector_23+0x62>
    3e04:	80 91 4a 04 	lds	r24, 0x044A
    3e08:	81 50       	subi	r24, 0x01	; 1
    3e0a:	80 93 4a 04 	sts	0x044A, r24
    3e0e:	a6 ec       	ldi	r26, 0xC6	; 198
    3e10:	b0 e0       	ldi	r27, 0x00	; 0
    3e12:	80 91 4b 04 	lds	r24, 0x044B
    3e16:	88 2f       	mov	r24, r24
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	ec 5a       	subi	r30, 0xAC	; 172
    3e1e:	fb 4f       	sbci	r31, 0xFB	; 251
    3e20:	80 81       	ld	r24, Z
    3e22:	8c 93       	st	X, r24
    3e24:	80 91 4b 04 	lds	r24, 0x044B
    3e28:	8f 5f       	subi	r24, 0xFF	; 255
    3e2a:	80 93 4b 04 	sts	0x044B, r24
    3e2e:	80 91 4b 04 	lds	r24, 0x044B
    3e32:	80 34       	cpi	r24, 0x40	; 64
    3e34:	11 f4       	brne	.+4      	; 0x3e3a <__vector_23+0x62>
    3e36:	10 92 4b 04 	sts	0x044B, r1
    3e3a:	cf 91       	pop	r28
    3e3c:	df 91       	pop	r29
    3e3e:	ff 91       	pop	r31
    3e40:	ef 91       	pop	r30
    3e42:	bf 91       	pop	r27
    3e44:	af 91       	pop	r26
    3e46:	9f 91       	pop	r25
    3e48:	8f 91       	pop	r24
    3e4a:	0f 90       	pop	r0
    3e4c:	00 92 5b 00 	sts	0x005B, r0
    3e50:	0f 90       	pop	r0
    3e52:	0f be       	out	0x3f, r0	; 63
    3e54:	0f 90       	pop	r0
    3e56:	1f 90       	pop	r1
    3e58:	18 95       	reti

00003e5a <__vector_21>:
    3e5a:	1f 92       	push	r1
    3e5c:	0f 92       	push	r0
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	0f 92       	push	r0
    3e62:	00 90 5b 00 	lds	r0, 0x005B
    3e66:	0f 92       	push	r0
    3e68:	11 24       	eor	r1, r1
    3e6a:	2f 93       	push	r18
    3e6c:	8f 93       	push	r24
    3e6e:	9f 93       	push	r25
    3e70:	ef 93       	push	r30
    3e72:	ff 93       	push	r31
    3e74:	df 93       	push	r29
    3e76:	cf 93       	push	r28
    3e78:	0f 92       	push	r0
    3e7a:	cd b7       	in	r28, 0x3d	; 61
    3e7c:	de b7       	in	r29, 0x3e	; 62
    3e7e:	e0 ec       	ldi	r30, 0xC0	; 192
    3e80:	f0 e0       	ldi	r31, 0x00	; 0
    3e82:	80 81       	ld	r24, Z
    3e84:	89 83       	std	Y+1, r24	; 0x01
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	88 2f       	mov	r24, r24
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	8c 71       	andi	r24, 0x1C	; 28
    3e8e:	90 70       	andi	r25, 0x00	; 0
    3e90:	00 97       	sbiw	r24, 0x00	; 0
    3e92:	d9 f4       	brne	.+54     	; 0x3eca <__vector_21+0x70>
    3e94:	80 91 4c 04 	lds	r24, 0x044C
    3e98:	88 2f       	mov	r24, r24
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	e6 ec       	ldi	r30, 0xC6	; 198
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	20 81       	ld	r18, Z
    3ea2:	fc 01       	movw	r30, r24
    3ea4:	ec 56       	subi	r30, 0x6C	; 108
    3ea6:	fb 4f       	sbci	r31, 0xFB	; 251
    3ea8:	20 83       	st	Z, r18
    3eaa:	80 91 4c 04 	lds	r24, 0x044C
    3eae:	8f 5f       	subi	r24, 0xFF	; 255
    3eb0:	80 93 4c 04 	sts	0x044C, r24
    3eb4:	80 91 4c 04 	lds	r24, 0x044C
    3eb8:	80 34       	cpi	r24, 0x40	; 64
    3eba:	11 f4       	brne	.+4      	; 0x3ec0 <__vector_21+0x66>
    3ebc:	10 92 4c 04 	sts	0x044C, r1
    3ec0:	80 91 4d 04 	lds	r24, 0x044D
    3ec4:	8f 5f       	subi	r24, 0xFF	; 255
    3ec6:	80 93 4d 04 	sts	0x044D, r24
    3eca:	0f 90       	pop	r0
    3ecc:	cf 91       	pop	r28
    3ece:	df 91       	pop	r29
    3ed0:	ff 91       	pop	r31
    3ed2:	ef 91       	pop	r30
    3ed4:	9f 91       	pop	r25
    3ed6:	8f 91       	pop	r24
    3ed8:	2f 91       	pop	r18
    3eda:	0f 90       	pop	r0
    3edc:	00 92 5b 00 	sts	0x005B, r0
    3ee0:	0f 90       	pop	r0
    3ee2:	0f be       	out	0x3f, r0	; 63
    3ee4:	0f 90       	pop	r0
    3ee6:	1f 90       	pop	r1
    3ee8:	18 95       	reti

00003eea <initUart1>:
    3eea:	df 93       	push	r29
    3eec:	cf 93       	push	r28
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
    3ef2:	27 97       	sbiw	r28, 0x07	; 7
    3ef4:	0f b6       	in	r0, 0x3f	; 63
    3ef6:	f8 94       	cli
    3ef8:	de bf       	out	0x3e, r29	; 62
    3efa:	0f be       	out	0x3f, r0	; 63
    3efc:	cd bf       	out	0x3d, r28	; 61
    3efe:	6b 83       	std	Y+3, r22	; 0x03
    3f00:	7c 83       	std	Y+4, r23	; 0x04
    3f02:	8d 83       	std	Y+5, r24	; 0x05
    3f04:	9e 83       	std	Y+6, r25	; 0x06
    3f06:	4f 83       	std	Y+7, r20	; 0x07
    3f08:	e8 ec       	ldi	r30, 0xC8	; 200
    3f0a:	f0 e0       	ldi	r31, 0x00	; 0
    3f0c:	10 82       	st	Z, r1
    3f0e:	e9 ec       	ldi	r30, 0xC9	; 201
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	88 e1       	ldi	r24, 0x18	; 24
    3f14:	80 83       	st	Z, r24
    3f16:	ea ec       	ldi	r30, 0xCA	; 202
    3f18:	f0 e0       	ldi	r31, 0x00	; 0
    3f1a:	86 e0       	ldi	r24, 0x06	; 6
    3f1c:	80 83       	st	Z, r24
    3f1e:	8f 81       	ldd	r24, Y+7	; 0x07
    3f20:	81 30       	cpi	r24, 0x01	; 1
    3f22:	71 f4       	brne	.+28     	; 0x3f40 <initUart1+0x56>
    3f24:	a9 ec       	ldi	r26, 0xC9	; 201
    3f26:	b0 e0       	ldi	r27, 0x00	; 0
    3f28:	e9 ec       	ldi	r30, 0xC9	; 201
    3f2a:	f0 e0       	ldi	r31, 0x00	; 0
    3f2c:	80 81       	ld	r24, Z
    3f2e:	80 6c       	ori	r24, 0xC0	; 192
    3f30:	8c 93       	st	X, r24
    3f32:	af e5       	ldi	r26, 0x5F	; 95
    3f34:	b0 e0       	ldi	r27, 0x00	; 0
    3f36:	ef e5       	ldi	r30, 0x5F	; 95
    3f38:	f0 e0       	ldi	r31, 0x00	; 0
    3f3a:	80 81       	ld	r24, Z
    3f3c:	80 68       	ori	r24, 0x80	; 128
    3f3e:	8c 93       	st	X, r24
    3f40:	6b 81       	ldd	r22, Y+3	; 0x03
    3f42:	7c 81       	ldd	r23, Y+4	; 0x04
    3f44:	8d 81       	ldd	r24, Y+5	; 0x05
    3f46:	9e 81       	ldd	r25, Y+6	; 0x06
    3f48:	64 d2       	rcall	.+1224   	; 0x4412 <__floatunsisf>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	bc 01       	movw	r22, r24
    3f50:	cd 01       	movw	r24, r26
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	40 e8       	ldi	r20, 0x80	; 128
    3f58:	51 e4       	ldi	r21, 0x41	; 65
    3f5a:	11 d3       	rcall	.+1570   	; 0x457e <__mulsf3>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	9c 01       	movw	r18, r24
    3f62:	ad 01       	movw	r20, r26
    3f64:	60 e8       	ldi	r22, 0x80	; 128
    3f66:	76 e9       	ldi	r23, 0x96	; 150
    3f68:	88 e1       	ldi	r24, 0x18	; 24
    3f6a:	9b e4       	ldi	r25, 0x4B	; 75
    3f6c:	b9 d1       	rcall	.+882    	; 0x42e0 <__divsf3>
    3f6e:	dc 01       	movw	r26, r24
    3f70:	cb 01       	movw	r24, r22
    3f72:	bc 01       	movw	r22, r24
    3f74:	cd 01       	movw	r24, r26
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e8       	ldi	r20, 0x80	; 128
    3f7c:	5f e3       	ldi	r21, 0x3F	; 63
    3f7e:	47 d1       	rcall	.+654    	; 0x420e <__subsf3>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	bc 01       	movw	r22, r24
    3f86:	cd 01       	movw	r24, r26
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	40 e0       	ldi	r20, 0x00	; 0
    3f8e:	5f e3       	ldi	r21, 0x3F	; 63
    3f90:	3f d1       	rcall	.+638    	; 0x4210 <__addsf3>
    3f92:	dc 01       	movw	r26, r24
    3f94:	cb 01       	movw	r24, r22
    3f96:	bc 01       	movw	r22, r24
    3f98:	cd 01       	movw	r24, r26
    3f9a:	0f d2       	rcall	.+1054   	; 0x43ba <__fixunssfsi>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	9a 83       	std	Y+2, r25	; 0x02
    3fa2:	89 83       	std	Y+1, r24	; 0x01
    3fa4:	ed ec       	ldi	r30, 0xCD	; 205
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	9a 81       	ldd	r25, Y+2	; 0x02
    3fac:	89 2f       	mov	r24, r25
    3fae:	99 27       	eor	r25, r25
    3fb0:	80 83       	st	Z, r24
    3fb2:	ec ec       	ldi	r30, 0xCC	; 204
    3fb4:	f0 e0       	ldi	r31, 0x00	; 0
    3fb6:	89 81       	ldd	r24, Y+1	; 0x01
    3fb8:	80 83       	st	Z, r24
    3fba:	27 96       	adiw	r28, 0x07	; 7
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	de bf       	out	0x3e, r29	; 62
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	cd bf       	out	0x3d, r28	; 61
    3fc6:	cf 91       	pop	r28
    3fc8:	df 91       	pop	r29
    3fca:	08 95       	ret

00003fcc <__vector_34>:
    3fcc:	1f 92       	push	r1
    3fce:	0f 92       	push	r0
    3fd0:	0f b6       	in	r0, 0x3f	; 63
    3fd2:	0f 92       	push	r0
    3fd4:	00 90 5b 00 	lds	r0, 0x005B
    3fd8:	0f 92       	push	r0
    3fda:	11 24       	eor	r1, r1
    3fdc:	8f 93       	push	r24
    3fde:	9f 93       	push	r25
    3fe0:	af 93       	push	r26
    3fe2:	bf 93       	push	r27
    3fe4:	ef 93       	push	r30
    3fe6:	ff 93       	push	r31
    3fe8:	df 93       	push	r29
    3fea:	cf 93       	push	r28
    3fec:	cd b7       	in	r28, 0x3d	; 61
    3fee:	de b7       	in	r29, 0x3e	; 62
    3ff0:	80 91 4f 04 	lds	r24, 0x044F
    3ff4:	88 23       	and	r24, r24
    3ff6:	d9 f0       	breq	.+54     	; 0x402e <__vector_34+0x62>
    3ff8:	80 91 4f 04 	lds	r24, 0x044F
    3ffc:	81 50       	subi	r24, 0x01	; 1
    3ffe:	80 93 4f 04 	sts	0x044F, r24
    4002:	ae ec       	ldi	r26, 0xCE	; 206
    4004:	b0 e0       	ldi	r27, 0x00	; 0
    4006:	80 91 50 04 	lds	r24, 0x0450
    400a:	88 2f       	mov	r24, r24
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	fc 01       	movw	r30, r24
    4010:	ec 52       	subi	r30, 0x2C	; 44
    4012:	fb 4f       	sbci	r31, 0xFB	; 251
    4014:	80 81       	ld	r24, Z
    4016:	8c 93       	st	X, r24
    4018:	80 91 50 04 	lds	r24, 0x0450
    401c:	8f 5f       	subi	r24, 0xFF	; 255
    401e:	80 93 50 04 	sts	0x0450, r24
    4022:	80 91 50 04 	lds	r24, 0x0450
    4026:	80 34       	cpi	r24, 0x40	; 64
    4028:	11 f4       	brne	.+4      	; 0x402e <__vector_34+0x62>
    402a:	10 92 50 04 	sts	0x0450, r1
    402e:	cf 91       	pop	r28
    4030:	df 91       	pop	r29
    4032:	ff 91       	pop	r31
    4034:	ef 91       	pop	r30
    4036:	bf 91       	pop	r27
    4038:	af 91       	pop	r26
    403a:	9f 91       	pop	r25
    403c:	8f 91       	pop	r24
    403e:	0f 90       	pop	r0
    4040:	00 92 5b 00 	sts	0x005B, r0
    4044:	0f 90       	pop	r0
    4046:	0f be       	out	0x3f, r0	; 63
    4048:	0f 90       	pop	r0
    404a:	1f 90       	pop	r1
    404c:	18 95       	reti

0000404e <__vector_32>:
    404e:	1f 92       	push	r1
    4050:	0f 92       	push	r0
    4052:	0f b6       	in	r0, 0x3f	; 63
    4054:	0f 92       	push	r0
    4056:	00 90 5b 00 	lds	r0, 0x005B
    405a:	0f 92       	push	r0
    405c:	11 24       	eor	r1, r1
    405e:	2f 93       	push	r18
    4060:	8f 93       	push	r24
    4062:	9f 93       	push	r25
    4064:	ef 93       	push	r30
    4066:	ff 93       	push	r31
    4068:	df 93       	push	r29
    406a:	cf 93       	push	r28
    406c:	0f 92       	push	r0
    406e:	cd b7       	in	r28, 0x3d	; 61
    4070:	de b7       	in	r29, 0x3e	; 62
    4072:	e8 ec       	ldi	r30, 0xC8	; 200
    4074:	f0 e0       	ldi	r31, 0x00	; 0
    4076:	80 81       	ld	r24, Z
    4078:	89 83       	std	Y+1, r24	; 0x01
    407a:	89 81       	ldd	r24, Y+1	; 0x01
    407c:	88 2f       	mov	r24, r24
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	8c 71       	andi	r24, 0x1C	; 28
    4082:	90 70       	andi	r25, 0x00	; 0
    4084:	00 97       	sbiw	r24, 0x00	; 0
    4086:	d9 f4       	brne	.+54     	; 0x40be <__vector_32+0x70>
    4088:	80 91 51 04 	lds	r24, 0x0451
    408c:	88 2f       	mov	r24, r24
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	ee ec       	ldi	r30, 0xCE	; 206
    4092:	f0 e0       	ldi	r31, 0x00	; 0
    4094:	20 81       	ld	r18, Z
    4096:	fc 01       	movw	r30, r24
    4098:	ec 5e       	subi	r30, 0xEC	; 236
    409a:	fa 4f       	sbci	r31, 0xFA	; 250
    409c:	20 83       	st	Z, r18
    409e:	80 91 51 04 	lds	r24, 0x0451
    40a2:	8f 5f       	subi	r24, 0xFF	; 255
    40a4:	80 93 51 04 	sts	0x0451, r24
    40a8:	80 91 51 04 	lds	r24, 0x0451
    40ac:	80 34       	cpi	r24, 0x40	; 64
    40ae:	11 f4       	brne	.+4      	; 0x40b4 <__vector_32+0x66>
    40b0:	10 92 51 04 	sts	0x0451, r1
    40b4:	80 91 52 04 	lds	r24, 0x0452
    40b8:	8f 5f       	subi	r24, 0xFF	; 255
    40ba:	80 93 52 04 	sts	0x0452, r24
    40be:	0f 90       	pop	r0
    40c0:	cf 91       	pop	r28
    40c2:	df 91       	pop	r29
    40c4:	ff 91       	pop	r31
    40c6:	ef 91       	pop	r30
    40c8:	9f 91       	pop	r25
    40ca:	8f 91       	pop	r24
    40cc:	2f 91       	pop	r18
    40ce:	0f 90       	pop	r0
    40d0:	00 92 5b 00 	sts	0x005B, r0
    40d4:	0f 90       	pop	r0
    40d6:	0f be       	out	0x3f, r0	; 63
    40d8:	0f 90       	pop	r0
    40da:	1f 90       	pop	r1
    40dc:	18 95       	reti

000040de <altUart1Write>:
    40de:	df 93       	push	r29
    40e0:	cf 93       	push	r28
    40e2:	0f 92       	push	r0
    40e4:	cd b7       	in	r28, 0x3d	; 61
    40e6:	de b7       	in	r29, 0x3e	; 62
    40e8:	89 83       	std	Y+1, r24	; 0x01
    40ea:	e8 ec       	ldi	r30, 0xC8	; 200
    40ec:	f0 e0       	ldi	r31, 0x00	; 0
    40ee:	80 81       	ld	r24, Z
    40f0:	88 2f       	mov	r24, r24
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	80 72       	andi	r24, 0x20	; 32
    40f6:	90 70       	andi	r25, 0x00	; 0
    40f8:	00 97       	sbiw	r24, 0x00	; 0
    40fa:	b9 f3       	breq	.-18     	; 0x40ea <altUart1Write+0xc>
    40fc:	ee ec       	ldi	r30, 0xCE	; 206
    40fe:	f0 e0       	ldi	r31, 0x00	; 0
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	80 83       	st	Z, r24
    4104:	0f 90       	pop	r0
    4106:	cf 91       	pop	r28
    4108:	df 91       	pop	r29
    410a:	08 95       	ret

0000410c <UART1_Write>:
    410c:	df 93       	push	r29
    410e:	cf 93       	push	r28
    4110:	0f 92       	push	r0
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
    4116:	89 83       	std	Y+1, r24	; 0x01
    4118:	e9 ec       	ldi	r30, 0xC9	; 201
    411a:	f0 e0       	ldi	r31, 0x00	; 0
    411c:	80 81       	ld	r24, Z
    411e:	82 95       	swap	r24
    4120:	86 95       	lsr	r24
    4122:	86 95       	lsr	r24
    4124:	83 70       	andi	r24, 0x03	; 3
    4126:	88 2f       	mov	r24, r24
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	81 70       	andi	r24, 0x01	; 1
    412c:	90 70       	andi	r25, 0x00	; 0
    412e:	88 23       	and	r24, r24
    4130:	91 f1       	breq	.+100    	; 0x4196 <UART1_Write+0x8a>
    4132:	80 91 4f 04 	lds	r24, 0x044F
    4136:	80 34       	cpi	r24, 0x40	; 64
    4138:	e1 f3       	breq	.-8      	; 0x4132 <UART1_Write+0x26>
    413a:	f8 94       	cli
    413c:	80 91 4f 04 	lds	r24, 0x044F
    4140:	88 23       	and	r24, r24
    4142:	49 f4       	brne	.+18     	; 0x4156 <UART1_Write+0x4a>
    4144:	e8 ec       	ldi	r30, 0xC8	; 200
    4146:	f0 e0       	ldi	r31, 0x00	; 0
    4148:	80 81       	ld	r24, Z
    414a:	88 2f       	mov	r24, r24
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	80 72       	andi	r24, 0x20	; 32
    4150:	90 70       	andi	r25, 0x00	; 0
    4152:	00 97       	sbiw	r24, 0x00	; 0
    4154:	d1 f4       	brne	.+52     	; 0x418a <UART1_Write+0x7e>
    4156:	80 91 4e 04 	lds	r24, 0x044E
    415a:	88 2f       	mov	r24, r24
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	fc 01       	movw	r30, r24
    4160:	ec 52       	subi	r30, 0x2C	; 44
    4162:	fb 4f       	sbci	r31, 0xFB	; 251
    4164:	89 81       	ldd	r24, Y+1	; 0x01
    4166:	80 83       	st	Z, r24
    4168:	80 91 4e 04 	lds	r24, 0x044E
    416c:	8f 5f       	subi	r24, 0xFF	; 255
    416e:	80 93 4e 04 	sts	0x044E, r24
    4172:	80 91 4e 04 	lds	r24, 0x044E
    4176:	80 34       	cpi	r24, 0x40	; 64
    4178:	11 f4       	brne	.+4      	; 0x417e <UART1_Write+0x72>
    417a:	10 92 4e 04 	sts	0x044E, r1
    417e:	80 91 4f 04 	lds	r24, 0x044F
    4182:	8f 5f       	subi	r24, 0xFF	; 255
    4184:	80 93 4f 04 	sts	0x044F, r24
    4188:	04 c0       	rjmp	.+8      	; 0x4192 <UART1_Write+0x86>
    418a:	ee ec       	ldi	r30, 0xCE	; 206
    418c:	f0 e0       	ldi	r31, 0x00	; 0
    418e:	89 81       	ldd	r24, Y+1	; 0x01
    4190:	80 83       	st	Z, r24
    4192:	78 94       	sei
    4194:	02 c0       	rjmp	.+4      	; 0x419a <UART1_Write+0x8e>
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	a2 df       	rcall	.-188    	; 0x40de <altUart1Write>
    419a:	0f 90       	pop	r0
    419c:	cf 91       	pop	r28
    419e:	df 91       	pop	r29
    41a0:	08 95       	ret

000041a2 <UART1_Read>:
    41a2:	df 93       	push	r29
    41a4:	cf 93       	push	r28
    41a6:	0f 92       	push	r0
    41a8:	cd b7       	in	r28, 0x3d	; 61
    41aa:	de b7       	in	r29, 0x3e	; 62
    41ac:	e9 ec       	ldi	r30, 0xC9	; 201
    41ae:	f0 e0       	ldi	r31, 0x00	; 0
    41b0:	80 81       	ld	r24, Z
    41b2:	88 23       	and	r24, r24
    41b4:	f4 f4       	brge	.+60     	; 0x41f2 <UART1_Read+0x50>
    41b6:	80 91 52 04 	lds	r24, 0x0452
    41ba:	88 23       	and	r24, r24
    41bc:	e1 f3       	breq	.-8      	; 0x41b6 <UART1_Read+0x14>
    41be:	80 91 53 04 	lds	r24, 0x0453
    41c2:	88 2f       	mov	r24, r24
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	fc 01       	movw	r30, r24
    41c8:	ec 5e       	subi	r30, 0xEC	; 236
    41ca:	fa 4f       	sbci	r31, 0xFA	; 250
    41cc:	80 81       	ld	r24, Z
    41ce:	89 83       	std	Y+1, r24	; 0x01
    41d0:	80 91 53 04 	lds	r24, 0x0453
    41d4:	8f 5f       	subi	r24, 0xFF	; 255
    41d6:	80 93 53 04 	sts	0x0453, r24
    41da:	80 91 53 04 	lds	r24, 0x0453
    41de:	80 34       	cpi	r24, 0x40	; 64
    41e0:	11 f4       	brne	.+4      	; 0x41e6 <UART1_Read+0x44>
    41e2:	10 92 53 04 	sts	0x0453, r1
    41e6:	80 91 52 04 	lds	r24, 0x0452
    41ea:	81 50       	subi	r24, 0x01	; 1
    41ec:	80 93 52 04 	sts	0x0452, r24
    41f0:	09 c0       	rjmp	.+18     	; 0x4204 <UART1_Read+0x62>
    41f2:	e8 ec       	ldi	r30, 0xC8	; 200
    41f4:	f0 e0       	ldi	r31, 0x00	; 0
    41f6:	80 81       	ld	r24, Z
    41f8:	88 23       	and	r24, r24
    41fa:	dc f7       	brge	.-10     	; 0x41f2 <UART1_Read+0x50>
    41fc:	ee ec       	ldi	r30, 0xCE	; 206
    41fe:	f0 e0       	ldi	r31, 0x00	; 0
    4200:	80 81       	ld	r24, Z
    4202:	89 83       	std	Y+1, r24	; 0x01
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	0f 90       	pop	r0
    4208:	cf 91       	pop	r28
    420a:	df 91       	pop	r29
    420c:	08 95       	ret

0000420e <__subsf3>:
    420e:	50 58       	subi	r21, 0x80	; 128

00004210 <__addsf3>:
    4210:	bb 27       	eor	r27, r27
    4212:	aa 27       	eor	r26, r26
    4214:	0e d0       	rcall	.+28     	; 0x4232 <__addsf3x>
    4216:	75 c1       	rjmp	.+746    	; 0x4502 <__fp_round>
    4218:	66 d1       	rcall	.+716    	; 0x44e6 <__fp_pscA>
    421a:	30 f0       	brcs	.+12     	; 0x4228 <__addsf3+0x18>
    421c:	6b d1       	rcall	.+726    	; 0x44f4 <__fp_pscB>
    421e:	20 f0       	brcs	.+8      	; 0x4228 <__addsf3+0x18>
    4220:	31 f4       	brne	.+12     	; 0x422e <__addsf3+0x1e>
    4222:	9f 3f       	cpi	r25, 0xFF	; 255
    4224:	11 f4       	brne	.+4      	; 0x422a <__addsf3+0x1a>
    4226:	1e f4       	brtc	.+6      	; 0x422e <__addsf3+0x1e>
    4228:	5b c1       	rjmp	.+694    	; 0x44e0 <__fp_nan>
    422a:	0e f4       	brtc	.+2      	; 0x422e <__addsf3+0x1e>
    422c:	e0 95       	com	r30
    422e:	e7 fb       	bst	r30, 7
    4230:	51 c1       	rjmp	.+674    	; 0x44d4 <__fp_inf>

00004232 <__addsf3x>:
    4232:	e9 2f       	mov	r30, r25
    4234:	77 d1       	rcall	.+750    	; 0x4524 <__fp_split3>
    4236:	80 f3       	brcs	.-32     	; 0x4218 <__addsf3+0x8>
    4238:	ba 17       	cp	r27, r26
    423a:	62 07       	cpc	r22, r18
    423c:	73 07       	cpc	r23, r19
    423e:	84 07       	cpc	r24, r20
    4240:	95 07       	cpc	r25, r21
    4242:	18 f0       	brcs	.+6      	; 0x424a <__addsf3x+0x18>
    4244:	71 f4       	brne	.+28     	; 0x4262 <__addsf3x+0x30>
    4246:	9e f5       	brtc	.+102    	; 0x42ae <__addsf3x+0x7c>
    4248:	8f c1       	rjmp	.+798    	; 0x4568 <__fp_zero>
    424a:	0e f4       	brtc	.+2      	; 0x424e <__addsf3x+0x1c>
    424c:	e0 95       	com	r30
    424e:	0b 2e       	mov	r0, r27
    4250:	ba 2f       	mov	r27, r26
    4252:	a0 2d       	mov	r26, r0
    4254:	0b 01       	movw	r0, r22
    4256:	b9 01       	movw	r22, r18
    4258:	90 01       	movw	r18, r0
    425a:	0c 01       	movw	r0, r24
    425c:	ca 01       	movw	r24, r20
    425e:	a0 01       	movw	r20, r0
    4260:	11 24       	eor	r1, r1
    4262:	ff 27       	eor	r31, r31
    4264:	59 1b       	sub	r21, r25
    4266:	99 f0       	breq	.+38     	; 0x428e <__addsf3x+0x5c>
    4268:	59 3f       	cpi	r21, 0xF9	; 249
    426a:	50 f4       	brcc	.+20     	; 0x4280 <__addsf3x+0x4e>
    426c:	50 3e       	cpi	r21, 0xE0	; 224
    426e:	68 f1       	brcs	.+90     	; 0x42ca <__addsf3x+0x98>
    4270:	1a 16       	cp	r1, r26
    4272:	f0 40       	sbci	r31, 0x00	; 0
    4274:	a2 2f       	mov	r26, r18
    4276:	23 2f       	mov	r18, r19
    4278:	34 2f       	mov	r19, r20
    427a:	44 27       	eor	r20, r20
    427c:	58 5f       	subi	r21, 0xF8	; 248
    427e:	f3 cf       	rjmp	.-26     	; 0x4266 <__addsf3x+0x34>
    4280:	46 95       	lsr	r20
    4282:	37 95       	ror	r19
    4284:	27 95       	ror	r18
    4286:	a7 95       	ror	r26
    4288:	f0 40       	sbci	r31, 0x00	; 0
    428a:	53 95       	inc	r21
    428c:	c9 f7       	brne	.-14     	; 0x4280 <__addsf3x+0x4e>
    428e:	7e f4       	brtc	.+30     	; 0x42ae <__addsf3x+0x7c>
    4290:	1f 16       	cp	r1, r31
    4292:	ba 0b       	sbc	r27, r26
    4294:	62 0b       	sbc	r22, r18
    4296:	73 0b       	sbc	r23, r19
    4298:	84 0b       	sbc	r24, r20
    429a:	ba f0       	brmi	.+46     	; 0x42ca <__addsf3x+0x98>
    429c:	91 50       	subi	r25, 0x01	; 1
    429e:	a1 f0       	breq	.+40     	; 0x42c8 <__addsf3x+0x96>
    42a0:	ff 0f       	add	r31, r31
    42a2:	bb 1f       	adc	r27, r27
    42a4:	66 1f       	adc	r22, r22
    42a6:	77 1f       	adc	r23, r23
    42a8:	88 1f       	adc	r24, r24
    42aa:	c2 f7       	brpl	.-16     	; 0x429c <__addsf3x+0x6a>
    42ac:	0e c0       	rjmp	.+28     	; 0x42ca <__addsf3x+0x98>
    42ae:	ba 0f       	add	r27, r26
    42b0:	62 1f       	adc	r22, r18
    42b2:	73 1f       	adc	r23, r19
    42b4:	84 1f       	adc	r24, r20
    42b6:	48 f4       	brcc	.+18     	; 0x42ca <__addsf3x+0x98>
    42b8:	87 95       	ror	r24
    42ba:	77 95       	ror	r23
    42bc:	67 95       	ror	r22
    42be:	b7 95       	ror	r27
    42c0:	f7 95       	ror	r31
    42c2:	9e 3f       	cpi	r25, 0xFE	; 254
    42c4:	08 f0       	brcs	.+2      	; 0x42c8 <__addsf3x+0x96>
    42c6:	b3 cf       	rjmp	.-154    	; 0x422e <__addsf3+0x1e>
    42c8:	93 95       	inc	r25
    42ca:	88 0f       	add	r24, r24
    42cc:	08 f0       	brcs	.+2      	; 0x42d0 <__addsf3x+0x9e>
    42ce:	99 27       	eor	r25, r25
    42d0:	ee 0f       	add	r30, r30
    42d2:	97 95       	ror	r25
    42d4:	87 95       	ror	r24
    42d6:	08 95       	ret

000042d8 <__cmpsf2>:
    42d8:	d9 d0       	rcall	.+434    	; 0x448c <__fp_cmp>
    42da:	08 f4       	brcc	.+2      	; 0x42de <__cmpsf2+0x6>
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	08 95       	ret

000042e0 <__divsf3>:
    42e0:	0c d0       	rcall	.+24     	; 0x42fa <__divsf3x>
    42e2:	0f c1       	rjmp	.+542    	; 0x4502 <__fp_round>
    42e4:	07 d1       	rcall	.+526    	; 0x44f4 <__fp_pscB>
    42e6:	40 f0       	brcs	.+16     	; 0x42f8 <__divsf3+0x18>
    42e8:	fe d0       	rcall	.+508    	; 0x44e6 <__fp_pscA>
    42ea:	30 f0       	brcs	.+12     	; 0x42f8 <__divsf3+0x18>
    42ec:	21 f4       	brne	.+8      	; 0x42f6 <__divsf3+0x16>
    42ee:	5f 3f       	cpi	r21, 0xFF	; 255
    42f0:	19 f0       	breq	.+6      	; 0x42f8 <__divsf3+0x18>
    42f2:	f0 c0       	rjmp	.+480    	; 0x44d4 <__fp_inf>
    42f4:	51 11       	cpse	r21, r1
    42f6:	39 c1       	rjmp	.+626    	; 0x456a <__fp_szero>
    42f8:	f3 c0       	rjmp	.+486    	; 0x44e0 <__fp_nan>

000042fa <__divsf3x>:
    42fa:	14 d1       	rcall	.+552    	; 0x4524 <__fp_split3>
    42fc:	98 f3       	brcs	.-26     	; 0x42e4 <__divsf3+0x4>

000042fe <__divsf3_pse>:
    42fe:	99 23       	and	r25, r25
    4300:	c9 f3       	breq	.-14     	; 0x42f4 <__divsf3+0x14>
    4302:	55 23       	and	r21, r21
    4304:	b1 f3       	breq	.-20     	; 0x42f2 <__divsf3+0x12>
    4306:	95 1b       	sub	r25, r21
    4308:	55 0b       	sbc	r21, r21
    430a:	bb 27       	eor	r27, r27
    430c:	aa 27       	eor	r26, r26
    430e:	62 17       	cp	r22, r18
    4310:	73 07       	cpc	r23, r19
    4312:	84 07       	cpc	r24, r20
    4314:	38 f0       	brcs	.+14     	; 0x4324 <__divsf3_pse+0x26>
    4316:	9f 5f       	subi	r25, 0xFF	; 255
    4318:	5f 4f       	sbci	r21, 0xFF	; 255
    431a:	22 0f       	add	r18, r18
    431c:	33 1f       	adc	r19, r19
    431e:	44 1f       	adc	r20, r20
    4320:	aa 1f       	adc	r26, r26
    4322:	a9 f3       	breq	.-22     	; 0x430e <__divsf3_pse+0x10>
    4324:	33 d0       	rcall	.+102    	; 0x438c <__divsf3_pse+0x8e>
    4326:	0e 2e       	mov	r0, r30
    4328:	3a f0       	brmi	.+14     	; 0x4338 <__divsf3_pse+0x3a>
    432a:	e0 e8       	ldi	r30, 0x80	; 128
    432c:	30 d0       	rcall	.+96     	; 0x438e <__divsf3_pse+0x90>
    432e:	91 50       	subi	r25, 0x01	; 1
    4330:	50 40       	sbci	r21, 0x00	; 0
    4332:	e6 95       	lsr	r30
    4334:	00 1c       	adc	r0, r0
    4336:	ca f7       	brpl	.-14     	; 0x432a <__divsf3_pse+0x2c>
    4338:	29 d0       	rcall	.+82     	; 0x438c <__divsf3_pse+0x8e>
    433a:	fe 2f       	mov	r31, r30
    433c:	27 d0       	rcall	.+78     	; 0x438c <__divsf3_pse+0x8e>
    433e:	66 0f       	add	r22, r22
    4340:	77 1f       	adc	r23, r23
    4342:	88 1f       	adc	r24, r24
    4344:	bb 1f       	adc	r27, r27
    4346:	26 17       	cp	r18, r22
    4348:	37 07       	cpc	r19, r23
    434a:	48 07       	cpc	r20, r24
    434c:	ab 07       	cpc	r26, r27
    434e:	b0 e8       	ldi	r27, 0x80	; 128
    4350:	09 f0       	breq	.+2      	; 0x4354 <__divsf3_pse+0x56>
    4352:	bb 0b       	sbc	r27, r27
    4354:	80 2d       	mov	r24, r0
    4356:	bf 01       	movw	r22, r30
    4358:	ff 27       	eor	r31, r31
    435a:	93 58       	subi	r25, 0x83	; 131
    435c:	5f 4f       	sbci	r21, 0xFF	; 255
    435e:	2a f0       	brmi	.+10     	; 0x436a <__divsf3_pse+0x6c>
    4360:	9e 3f       	cpi	r25, 0xFE	; 254
    4362:	51 05       	cpc	r21, r1
    4364:	68 f0       	brcs	.+26     	; 0x4380 <__divsf3_pse+0x82>
    4366:	b6 c0       	rjmp	.+364    	; 0x44d4 <__fp_inf>
    4368:	00 c1       	rjmp	.+512    	; 0x456a <__fp_szero>
    436a:	5f 3f       	cpi	r21, 0xFF	; 255
    436c:	ec f3       	brlt	.-6      	; 0x4368 <__divsf3_pse+0x6a>
    436e:	98 3e       	cpi	r25, 0xE8	; 232
    4370:	dc f3       	brlt	.-10     	; 0x4368 <__divsf3_pse+0x6a>
    4372:	86 95       	lsr	r24
    4374:	77 95       	ror	r23
    4376:	67 95       	ror	r22
    4378:	b7 95       	ror	r27
    437a:	f7 95       	ror	r31
    437c:	9f 5f       	subi	r25, 0xFF	; 255
    437e:	c9 f7       	brne	.-14     	; 0x4372 <__divsf3_pse+0x74>
    4380:	88 0f       	add	r24, r24
    4382:	91 1d       	adc	r25, r1
    4384:	96 95       	lsr	r25
    4386:	87 95       	ror	r24
    4388:	97 f9       	bld	r25, 7
    438a:	08 95       	ret
    438c:	e1 e0       	ldi	r30, 0x01	; 1
    438e:	66 0f       	add	r22, r22
    4390:	77 1f       	adc	r23, r23
    4392:	88 1f       	adc	r24, r24
    4394:	bb 1f       	adc	r27, r27
    4396:	62 17       	cp	r22, r18
    4398:	73 07       	cpc	r23, r19
    439a:	84 07       	cpc	r24, r20
    439c:	ba 07       	cpc	r27, r26
    439e:	20 f0       	brcs	.+8      	; 0x43a8 <__divsf3_pse+0xaa>
    43a0:	62 1b       	sub	r22, r18
    43a2:	73 0b       	sbc	r23, r19
    43a4:	84 0b       	sbc	r24, r20
    43a6:	ba 0b       	sbc	r27, r26
    43a8:	ee 1f       	adc	r30, r30
    43aa:	88 f7       	brcc	.-30     	; 0x438e <__divsf3_pse+0x90>
    43ac:	e0 95       	com	r30
    43ae:	08 95       	ret

000043b0 <__fixsfsi>:
    43b0:	04 d0       	rcall	.+8      	; 0x43ba <__fixunssfsi>
    43b2:	68 94       	set
    43b4:	b1 11       	cpse	r27, r1
    43b6:	d9 c0       	rjmp	.+434    	; 0x456a <__fp_szero>
    43b8:	08 95       	ret

000043ba <__fixunssfsi>:
    43ba:	bc d0       	rcall	.+376    	; 0x4534 <__fp_splitA>
    43bc:	88 f0       	brcs	.+34     	; 0x43e0 <__fixunssfsi+0x26>
    43be:	9f 57       	subi	r25, 0x7F	; 127
    43c0:	90 f0       	brcs	.+36     	; 0x43e6 <__fixunssfsi+0x2c>
    43c2:	b9 2f       	mov	r27, r25
    43c4:	99 27       	eor	r25, r25
    43c6:	b7 51       	subi	r27, 0x17	; 23
    43c8:	a0 f0       	brcs	.+40     	; 0x43f2 <__fixunssfsi+0x38>
    43ca:	d1 f0       	breq	.+52     	; 0x4400 <__fixunssfsi+0x46>
    43cc:	66 0f       	add	r22, r22
    43ce:	77 1f       	adc	r23, r23
    43d0:	88 1f       	adc	r24, r24
    43d2:	99 1f       	adc	r25, r25
    43d4:	1a f0       	brmi	.+6      	; 0x43dc <__fixunssfsi+0x22>
    43d6:	ba 95       	dec	r27
    43d8:	c9 f7       	brne	.-14     	; 0x43cc <__fixunssfsi+0x12>
    43da:	12 c0       	rjmp	.+36     	; 0x4400 <__fixunssfsi+0x46>
    43dc:	b1 30       	cpi	r27, 0x01	; 1
    43de:	81 f0       	breq	.+32     	; 0x4400 <__fixunssfsi+0x46>
    43e0:	c3 d0       	rcall	.+390    	; 0x4568 <__fp_zero>
    43e2:	b1 e0       	ldi	r27, 0x01	; 1
    43e4:	08 95       	ret
    43e6:	c0 c0       	rjmp	.+384    	; 0x4568 <__fp_zero>
    43e8:	67 2f       	mov	r22, r23
    43ea:	78 2f       	mov	r23, r24
    43ec:	88 27       	eor	r24, r24
    43ee:	b8 5f       	subi	r27, 0xF8	; 248
    43f0:	39 f0       	breq	.+14     	; 0x4400 <__fixunssfsi+0x46>
    43f2:	b9 3f       	cpi	r27, 0xF9	; 249
    43f4:	cc f3       	brlt	.-14     	; 0x43e8 <__fixunssfsi+0x2e>
    43f6:	86 95       	lsr	r24
    43f8:	77 95       	ror	r23
    43fa:	67 95       	ror	r22
    43fc:	b3 95       	inc	r27
    43fe:	d9 f7       	brne	.-10     	; 0x43f6 <__fixunssfsi+0x3c>
    4400:	3e f4       	brtc	.+14     	; 0x4410 <__fixunssfsi+0x56>
    4402:	90 95       	com	r25
    4404:	80 95       	com	r24
    4406:	70 95       	com	r23
    4408:	61 95       	neg	r22
    440a:	7f 4f       	sbci	r23, 0xFF	; 255
    440c:	8f 4f       	sbci	r24, 0xFF	; 255
    440e:	9f 4f       	sbci	r25, 0xFF	; 255
    4410:	08 95       	ret

00004412 <__floatunsisf>:
    4412:	e8 94       	clt
    4414:	09 c0       	rjmp	.+18     	; 0x4428 <__floatsisf+0x12>

00004416 <__floatsisf>:
    4416:	97 fb       	bst	r25, 7
    4418:	3e f4       	brtc	.+14     	; 0x4428 <__floatsisf+0x12>
    441a:	90 95       	com	r25
    441c:	80 95       	com	r24
    441e:	70 95       	com	r23
    4420:	61 95       	neg	r22
    4422:	7f 4f       	sbci	r23, 0xFF	; 255
    4424:	8f 4f       	sbci	r24, 0xFF	; 255
    4426:	9f 4f       	sbci	r25, 0xFF	; 255
    4428:	99 23       	and	r25, r25
    442a:	a9 f0       	breq	.+42     	; 0x4456 <__floatsisf+0x40>
    442c:	f9 2f       	mov	r31, r25
    442e:	96 e9       	ldi	r25, 0x96	; 150
    4430:	bb 27       	eor	r27, r27
    4432:	93 95       	inc	r25
    4434:	f6 95       	lsr	r31
    4436:	87 95       	ror	r24
    4438:	77 95       	ror	r23
    443a:	67 95       	ror	r22
    443c:	b7 95       	ror	r27
    443e:	f1 11       	cpse	r31, r1
    4440:	f8 cf       	rjmp	.-16     	; 0x4432 <__floatsisf+0x1c>
    4442:	fa f4       	brpl	.+62     	; 0x4482 <__floatsisf+0x6c>
    4444:	bb 0f       	add	r27, r27
    4446:	11 f4       	brne	.+4      	; 0x444c <__floatsisf+0x36>
    4448:	60 ff       	sbrs	r22, 0
    444a:	1b c0       	rjmp	.+54     	; 0x4482 <__floatsisf+0x6c>
    444c:	6f 5f       	subi	r22, 0xFF	; 255
    444e:	7f 4f       	sbci	r23, 0xFF	; 255
    4450:	8f 4f       	sbci	r24, 0xFF	; 255
    4452:	9f 4f       	sbci	r25, 0xFF	; 255
    4454:	16 c0       	rjmp	.+44     	; 0x4482 <__floatsisf+0x6c>
    4456:	88 23       	and	r24, r24
    4458:	11 f0       	breq	.+4      	; 0x445e <__floatsisf+0x48>
    445a:	96 e9       	ldi	r25, 0x96	; 150
    445c:	11 c0       	rjmp	.+34     	; 0x4480 <__floatsisf+0x6a>
    445e:	77 23       	and	r23, r23
    4460:	21 f0       	breq	.+8      	; 0x446a <__floatsisf+0x54>
    4462:	9e e8       	ldi	r25, 0x8E	; 142
    4464:	87 2f       	mov	r24, r23
    4466:	76 2f       	mov	r23, r22
    4468:	05 c0       	rjmp	.+10     	; 0x4474 <__floatsisf+0x5e>
    446a:	66 23       	and	r22, r22
    446c:	71 f0       	breq	.+28     	; 0x448a <__floatsisf+0x74>
    446e:	96 e8       	ldi	r25, 0x86	; 134
    4470:	86 2f       	mov	r24, r22
    4472:	70 e0       	ldi	r23, 0x00	; 0
    4474:	60 e0       	ldi	r22, 0x00	; 0
    4476:	2a f0       	brmi	.+10     	; 0x4482 <__floatsisf+0x6c>
    4478:	9a 95       	dec	r25
    447a:	66 0f       	add	r22, r22
    447c:	77 1f       	adc	r23, r23
    447e:	88 1f       	adc	r24, r24
    4480:	da f7       	brpl	.-10     	; 0x4478 <__floatsisf+0x62>
    4482:	88 0f       	add	r24, r24
    4484:	96 95       	lsr	r25
    4486:	87 95       	ror	r24
    4488:	97 f9       	bld	r25, 7
    448a:	08 95       	ret

0000448c <__fp_cmp>:
    448c:	99 0f       	add	r25, r25
    448e:	00 08       	sbc	r0, r0
    4490:	55 0f       	add	r21, r21
    4492:	aa 0b       	sbc	r26, r26
    4494:	e0 e8       	ldi	r30, 0x80	; 128
    4496:	fe ef       	ldi	r31, 0xFE	; 254
    4498:	16 16       	cp	r1, r22
    449a:	17 06       	cpc	r1, r23
    449c:	e8 07       	cpc	r30, r24
    449e:	f9 07       	cpc	r31, r25
    44a0:	c0 f0       	brcs	.+48     	; 0x44d2 <__fp_cmp+0x46>
    44a2:	12 16       	cp	r1, r18
    44a4:	13 06       	cpc	r1, r19
    44a6:	e4 07       	cpc	r30, r20
    44a8:	f5 07       	cpc	r31, r21
    44aa:	98 f0       	brcs	.+38     	; 0x44d2 <__fp_cmp+0x46>
    44ac:	62 1b       	sub	r22, r18
    44ae:	73 0b       	sbc	r23, r19
    44b0:	84 0b       	sbc	r24, r20
    44b2:	95 0b       	sbc	r25, r21
    44b4:	39 f4       	brne	.+14     	; 0x44c4 <__fp_cmp+0x38>
    44b6:	0a 26       	eor	r0, r26
    44b8:	61 f0       	breq	.+24     	; 0x44d2 <__fp_cmp+0x46>
    44ba:	23 2b       	or	r18, r19
    44bc:	24 2b       	or	r18, r20
    44be:	25 2b       	or	r18, r21
    44c0:	21 f4       	brne	.+8      	; 0x44ca <__fp_cmp+0x3e>
    44c2:	08 95       	ret
    44c4:	0a 26       	eor	r0, r26
    44c6:	09 f4       	brne	.+2      	; 0x44ca <__fp_cmp+0x3e>
    44c8:	a1 40       	sbci	r26, 0x01	; 1
    44ca:	a6 95       	lsr	r26
    44cc:	8f ef       	ldi	r24, 0xFF	; 255
    44ce:	81 1d       	adc	r24, r1
    44d0:	81 1d       	adc	r24, r1
    44d2:	08 95       	ret

000044d4 <__fp_inf>:
    44d4:	97 f9       	bld	r25, 7
    44d6:	9f 67       	ori	r25, 0x7F	; 127
    44d8:	80 e8       	ldi	r24, 0x80	; 128
    44da:	70 e0       	ldi	r23, 0x00	; 0
    44dc:	60 e0       	ldi	r22, 0x00	; 0
    44de:	08 95       	ret

000044e0 <__fp_nan>:
    44e0:	9f ef       	ldi	r25, 0xFF	; 255
    44e2:	80 ec       	ldi	r24, 0xC0	; 192
    44e4:	08 95       	ret

000044e6 <__fp_pscA>:
    44e6:	00 24       	eor	r0, r0
    44e8:	0a 94       	dec	r0
    44ea:	16 16       	cp	r1, r22
    44ec:	17 06       	cpc	r1, r23
    44ee:	18 06       	cpc	r1, r24
    44f0:	09 06       	cpc	r0, r25
    44f2:	08 95       	ret

000044f4 <__fp_pscB>:
    44f4:	00 24       	eor	r0, r0
    44f6:	0a 94       	dec	r0
    44f8:	12 16       	cp	r1, r18
    44fa:	13 06       	cpc	r1, r19
    44fc:	14 06       	cpc	r1, r20
    44fe:	05 06       	cpc	r0, r21
    4500:	08 95       	ret

00004502 <__fp_round>:
    4502:	09 2e       	mov	r0, r25
    4504:	03 94       	inc	r0
    4506:	00 0c       	add	r0, r0
    4508:	11 f4       	brne	.+4      	; 0x450e <__fp_round+0xc>
    450a:	88 23       	and	r24, r24
    450c:	52 f0       	brmi	.+20     	; 0x4522 <__fp_round+0x20>
    450e:	bb 0f       	add	r27, r27
    4510:	40 f4       	brcc	.+16     	; 0x4522 <__fp_round+0x20>
    4512:	bf 2b       	or	r27, r31
    4514:	11 f4       	brne	.+4      	; 0x451a <__fp_round+0x18>
    4516:	60 ff       	sbrs	r22, 0
    4518:	04 c0       	rjmp	.+8      	; 0x4522 <__fp_round+0x20>
    451a:	6f 5f       	subi	r22, 0xFF	; 255
    451c:	7f 4f       	sbci	r23, 0xFF	; 255
    451e:	8f 4f       	sbci	r24, 0xFF	; 255
    4520:	9f 4f       	sbci	r25, 0xFF	; 255
    4522:	08 95       	ret

00004524 <__fp_split3>:
    4524:	57 fd       	sbrc	r21, 7
    4526:	90 58       	subi	r25, 0x80	; 128
    4528:	44 0f       	add	r20, r20
    452a:	55 1f       	adc	r21, r21
    452c:	59 f0       	breq	.+22     	; 0x4544 <__fp_splitA+0x10>
    452e:	5f 3f       	cpi	r21, 0xFF	; 255
    4530:	71 f0       	breq	.+28     	; 0x454e <__fp_splitA+0x1a>
    4532:	47 95       	ror	r20

00004534 <__fp_splitA>:
    4534:	88 0f       	add	r24, r24
    4536:	97 fb       	bst	r25, 7
    4538:	99 1f       	adc	r25, r25
    453a:	61 f0       	breq	.+24     	; 0x4554 <__fp_splitA+0x20>
    453c:	9f 3f       	cpi	r25, 0xFF	; 255
    453e:	79 f0       	breq	.+30     	; 0x455e <__fp_splitA+0x2a>
    4540:	87 95       	ror	r24
    4542:	08 95       	ret
    4544:	12 16       	cp	r1, r18
    4546:	13 06       	cpc	r1, r19
    4548:	14 06       	cpc	r1, r20
    454a:	55 1f       	adc	r21, r21
    454c:	f2 cf       	rjmp	.-28     	; 0x4532 <__fp_split3+0xe>
    454e:	46 95       	lsr	r20
    4550:	f1 df       	rcall	.-30     	; 0x4534 <__fp_splitA>
    4552:	08 c0       	rjmp	.+16     	; 0x4564 <__fp_splitA+0x30>
    4554:	16 16       	cp	r1, r22
    4556:	17 06       	cpc	r1, r23
    4558:	18 06       	cpc	r1, r24
    455a:	99 1f       	adc	r25, r25
    455c:	f1 cf       	rjmp	.-30     	; 0x4540 <__fp_splitA+0xc>
    455e:	86 95       	lsr	r24
    4560:	71 05       	cpc	r23, r1
    4562:	61 05       	cpc	r22, r1
    4564:	08 94       	sec
    4566:	08 95       	ret

00004568 <__fp_zero>:
    4568:	e8 94       	clt

0000456a <__fp_szero>:
    456a:	bb 27       	eor	r27, r27
    456c:	66 27       	eor	r22, r22
    456e:	77 27       	eor	r23, r23
    4570:	cb 01       	movw	r24, r22
    4572:	97 f9       	bld	r25, 7
    4574:	08 95       	ret

00004576 <__gesf2>:
    4576:	8a df       	rcall	.-236    	; 0x448c <__fp_cmp>
    4578:	08 f4       	brcc	.+2      	; 0x457c <__gesf2+0x6>
    457a:	8f ef       	ldi	r24, 0xFF	; 255
    457c:	08 95       	ret

0000457e <__mulsf3>:
    457e:	0b d0       	rcall	.+22     	; 0x4596 <__mulsf3x>
    4580:	c0 cf       	rjmp	.-128    	; 0x4502 <__fp_round>
    4582:	b1 df       	rcall	.-158    	; 0x44e6 <__fp_pscA>
    4584:	28 f0       	brcs	.+10     	; 0x4590 <__mulsf3+0x12>
    4586:	b6 df       	rcall	.-148    	; 0x44f4 <__fp_pscB>
    4588:	18 f0       	brcs	.+6      	; 0x4590 <__mulsf3+0x12>
    458a:	95 23       	and	r25, r21
    458c:	09 f0       	breq	.+2      	; 0x4590 <__mulsf3+0x12>
    458e:	a2 cf       	rjmp	.-188    	; 0x44d4 <__fp_inf>
    4590:	a7 cf       	rjmp	.-178    	; 0x44e0 <__fp_nan>
    4592:	11 24       	eor	r1, r1
    4594:	ea cf       	rjmp	.-44     	; 0x456a <__fp_szero>

00004596 <__mulsf3x>:
    4596:	c6 df       	rcall	.-116    	; 0x4524 <__fp_split3>
    4598:	a0 f3       	brcs	.-24     	; 0x4582 <__mulsf3+0x4>

0000459a <__mulsf3_pse>:
    459a:	95 9f       	mul	r25, r21
    459c:	d1 f3       	breq	.-12     	; 0x4592 <__mulsf3+0x14>
    459e:	95 0f       	add	r25, r21
    45a0:	50 e0       	ldi	r21, 0x00	; 0
    45a2:	55 1f       	adc	r21, r21
    45a4:	62 9f       	mul	r22, r18
    45a6:	f0 01       	movw	r30, r0
    45a8:	72 9f       	mul	r23, r18
    45aa:	bb 27       	eor	r27, r27
    45ac:	f0 0d       	add	r31, r0
    45ae:	b1 1d       	adc	r27, r1
    45b0:	63 9f       	mul	r22, r19
    45b2:	aa 27       	eor	r26, r26
    45b4:	f0 0d       	add	r31, r0
    45b6:	b1 1d       	adc	r27, r1
    45b8:	aa 1f       	adc	r26, r26
    45ba:	64 9f       	mul	r22, r20
    45bc:	66 27       	eor	r22, r22
    45be:	b0 0d       	add	r27, r0
    45c0:	a1 1d       	adc	r26, r1
    45c2:	66 1f       	adc	r22, r22
    45c4:	82 9f       	mul	r24, r18
    45c6:	22 27       	eor	r18, r18
    45c8:	b0 0d       	add	r27, r0
    45ca:	a1 1d       	adc	r26, r1
    45cc:	62 1f       	adc	r22, r18
    45ce:	73 9f       	mul	r23, r19
    45d0:	b0 0d       	add	r27, r0
    45d2:	a1 1d       	adc	r26, r1
    45d4:	62 1f       	adc	r22, r18
    45d6:	83 9f       	mul	r24, r19
    45d8:	a0 0d       	add	r26, r0
    45da:	61 1d       	adc	r22, r1
    45dc:	22 1f       	adc	r18, r18
    45de:	74 9f       	mul	r23, r20
    45e0:	33 27       	eor	r19, r19
    45e2:	a0 0d       	add	r26, r0
    45e4:	61 1d       	adc	r22, r1
    45e6:	23 1f       	adc	r18, r19
    45e8:	84 9f       	mul	r24, r20
    45ea:	60 0d       	add	r22, r0
    45ec:	21 1d       	adc	r18, r1
    45ee:	82 2f       	mov	r24, r18
    45f0:	76 2f       	mov	r23, r22
    45f2:	6a 2f       	mov	r22, r26
    45f4:	11 24       	eor	r1, r1
    45f6:	9f 57       	subi	r25, 0x7F	; 127
    45f8:	50 40       	sbci	r21, 0x00	; 0
    45fa:	8a f0       	brmi	.+34     	; 0x461e <__mulsf3_pse+0x84>
    45fc:	e1 f0       	breq	.+56     	; 0x4636 <__mulsf3_pse+0x9c>
    45fe:	88 23       	and	r24, r24
    4600:	4a f0       	brmi	.+18     	; 0x4614 <__mulsf3_pse+0x7a>
    4602:	ee 0f       	add	r30, r30
    4604:	ff 1f       	adc	r31, r31
    4606:	bb 1f       	adc	r27, r27
    4608:	66 1f       	adc	r22, r22
    460a:	77 1f       	adc	r23, r23
    460c:	88 1f       	adc	r24, r24
    460e:	91 50       	subi	r25, 0x01	; 1
    4610:	50 40       	sbci	r21, 0x00	; 0
    4612:	a9 f7       	brne	.-22     	; 0x45fe <__mulsf3_pse+0x64>
    4614:	9e 3f       	cpi	r25, 0xFE	; 254
    4616:	51 05       	cpc	r21, r1
    4618:	70 f0       	brcs	.+28     	; 0x4636 <__mulsf3_pse+0x9c>
    461a:	5c cf       	rjmp	.-328    	; 0x44d4 <__fp_inf>
    461c:	a6 cf       	rjmp	.-180    	; 0x456a <__fp_szero>
    461e:	5f 3f       	cpi	r21, 0xFF	; 255
    4620:	ec f3       	brlt	.-6      	; 0x461c <__mulsf3_pse+0x82>
    4622:	98 3e       	cpi	r25, 0xE8	; 232
    4624:	dc f3       	brlt	.-10     	; 0x461c <__mulsf3_pse+0x82>
    4626:	86 95       	lsr	r24
    4628:	77 95       	ror	r23
    462a:	67 95       	ror	r22
    462c:	b7 95       	ror	r27
    462e:	f7 95       	ror	r31
    4630:	e7 95       	ror	r30
    4632:	9f 5f       	subi	r25, 0xFF	; 255
    4634:	c1 f7       	brne	.-16     	; 0x4626 <__mulsf3_pse+0x8c>
    4636:	fe 2b       	or	r31, r30
    4638:	88 0f       	add	r24, r24
    463a:	91 1d       	adc	r25, r1
    463c:	96 95       	lsr	r25
    463e:	87 95       	ror	r24
    4640:	97 f9       	bld	r25, 7
    4642:	08 95       	ret

00004644 <calloc>:
    4644:	0f 93       	push	r16
    4646:	1f 93       	push	r17
    4648:	cf 93       	push	r28
    464a:	df 93       	push	r29
    464c:	68 9f       	mul	r22, r24
    464e:	80 01       	movw	r16, r0
    4650:	69 9f       	mul	r22, r25
    4652:	10 0d       	add	r17, r0
    4654:	78 9f       	mul	r23, r24
    4656:	10 0d       	add	r17, r0
    4658:	11 24       	eor	r1, r1
    465a:	c8 01       	movw	r24, r16
    465c:	0d d0       	rcall	.+26     	; 0x4678 <malloc>
    465e:	ec 01       	movw	r28, r24
    4660:	00 97       	sbiw	r24, 0x00	; 0
    4662:	21 f0       	breq	.+8      	; 0x466c <calloc+0x28>
    4664:	60 e0       	ldi	r22, 0x00	; 0
    4666:	70 e0       	ldi	r23, 0x00	; 0
    4668:	a8 01       	movw	r20, r16
    466a:	0b d1       	rcall	.+534    	; 0x4882 <memset>
    466c:	ce 01       	movw	r24, r28
    466e:	df 91       	pop	r29
    4670:	cf 91       	pop	r28
    4672:	1f 91       	pop	r17
    4674:	0f 91       	pop	r16
    4676:	08 95       	ret

00004678 <malloc>:
    4678:	cf 93       	push	r28
    467a:	df 93       	push	r29
    467c:	bc 01       	movw	r22, r24
    467e:	82 30       	cpi	r24, 0x02	; 2
    4680:	91 05       	cpc	r25, r1
    4682:	10 f4       	brcc	.+4      	; 0x4688 <malloc+0x10>
    4684:	62 e0       	ldi	r22, 0x02	; 2
    4686:	70 e0       	ldi	r23, 0x00	; 0
    4688:	a0 91 56 05 	lds	r26, 0x0556
    468c:	b0 91 57 05 	lds	r27, 0x0557
    4690:	ed 01       	movw	r28, r26
    4692:	e0 e0       	ldi	r30, 0x00	; 0
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	40 e0       	ldi	r20, 0x00	; 0
    4698:	50 e0       	ldi	r21, 0x00	; 0
    469a:	21 c0       	rjmp	.+66     	; 0x46de <malloc+0x66>
    469c:	88 81       	ld	r24, Y
    469e:	99 81       	ldd	r25, Y+1	; 0x01
    46a0:	86 17       	cp	r24, r22
    46a2:	97 07       	cpc	r25, r23
    46a4:	69 f4       	brne	.+26     	; 0x46c0 <malloc+0x48>
    46a6:	8a 81       	ldd	r24, Y+2	; 0x02
    46a8:	9b 81       	ldd	r25, Y+3	; 0x03
    46aa:	30 97       	sbiw	r30, 0x00	; 0
    46ac:	19 f0       	breq	.+6      	; 0x46b4 <malloc+0x3c>
    46ae:	93 83       	std	Z+3, r25	; 0x03
    46b0:	82 83       	std	Z+2, r24	; 0x02
    46b2:	04 c0       	rjmp	.+8      	; 0x46bc <malloc+0x44>
    46b4:	90 93 57 05 	sts	0x0557, r25
    46b8:	80 93 56 05 	sts	0x0556, r24
    46bc:	fe 01       	movw	r30, r28
    46be:	34 c0       	rjmp	.+104    	; 0x4728 <malloc+0xb0>
    46c0:	68 17       	cp	r22, r24
    46c2:	79 07       	cpc	r23, r25
    46c4:	38 f4       	brcc	.+14     	; 0x46d4 <malloc+0x5c>
    46c6:	41 15       	cp	r20, r1
    46c8:	51 05       	cpc	r21, r1
    46ca:	19 f0       	breq	.+6      	; 0x46d2 <malloc+0x5a>
    46cc:	84 17       	cp	r24, r20
    46ce:	95 07       	cpc	r25, r21
    46d0:	08 f4       	brcc	.+2      	; 0x46d4 <malloc+0x5c>
    46d2:	ac 01       	movw	r20, r24
    46d4:	fe 01       	movw	r30, r28
    46d6:	8a 81       	ldd	r24, Y+2	; 0x02
    46d8:	9b 81       	ldd	r25, Y+3	; 0x03
    46da:	9c 01       	movw	r18, r24
    46dc:	e9 01       	movw	r28, r18
    46de:	20 97       	sbiw	r28, 0x00	; 0
    46e0:	e9 f6       	brne	.-70     	; 0x469c <malloc+0x24>
    46e2:	41 15       	cp	r20, r1
    46e4:	51 05       	cpc	r21, r1
    46e6:	a9 f1       	breq	.+106    	; 0x4752 <malloc+0xda>
    46e8:	ca 01       	movw	r24, r20
    46ea:	86 1b       	sub	r24, r22
    46ec:	97 0b       	sbc	r25, r23
    46ee:	04 97       	sbiw	r24, 0x04	; 4
    46f0:	08 f4       	brcc	.+2      	; 0x46f4 <malloc+0x7c>
    46f2:	ba 01       	movw	r22, r20
    46f4:	e0 e0       	ldi	r30, 0x00	; 0
    46f6:	f0 e0       	ldi	r31, 0x00	; 0
    46f8:	2a c0       	rjmp	.+84     	; 0x474e <malloc+0xd6>
    46fa:	8d 91       	ld	r24, X+
    46fc:	9c 91       	ld	r25, X
    46fe:	11 97       	sbiw	r26, 0x01	; 1
    4700:	84 17       	cp	r24, r20
    4702:	95 07       	cpc	r25, r21
    4704:	f9 f4       	brne	.+62     	; 0x4744 <malloc+0xcc>
    4706:	64 17       	cp	r22, r20
    4708:	75 07       	cpc	r23, r21
    470a:	81 f4       	brne	.+32     	; 0x472c <malloc+0xb4>
    470c:	12 96       	adiw	r26, 0x02	; 2
    470e:	8d 91       	ld	r24, X+
    4710:	9c 91       	ld	r25, X
    4712:	13 97       	sbiw	r26, 0x03	; 3
    4714:	30 97       	sbiw	r30, 0x00	; 0
    4716:	19 f0       	breq	.+6      	; 0x471e <malloc+0xa6>
    4718:	93 83       	std	Z+3, r25	; 0x03
    471a:	82 83       	std	Z+2, r24	; 0x02
    471c:	04 c0       	rjmp	.+8      	; 0x4726 <malloc+0xae>
    471e:	90 93 57 05 	sts	0x0557, r25
    4722:	80 93 56 05 	sts	0x0556, r24
    4726:	fd 01       	movw	r30, r26
    4728:	32 96       	adiw	r30, 0x02	; 2
    472a:	4f c0       	rjmp	.+158    	; 0x47ca <malloc+0x152>
    472c:	ca 01       	movw	r24, r20
    472e:	86 1b       	sub	r24, r22
    4730:	97 0b       	sbc	r25, r23
    4732:	fd 01       	movw	r30, r26
    4734:	e8 0f       	add	r30, r24
    4736:	f9 1f       	adc	r31, r25
    4738:	61 93       	st	Z+, r22
    473a:	71 93       	st	Z+, r23
    473c:	02 97       	sbiw	r24, 0x02	; 2
    473e:	8d 93       	st	X+, r24
    4740:	9c 93       	st	X, r25
    4742:	43 c0       	rjmp	.+134    	; 0x47ca <malloc+0x152>
    4744:	fd 01       	movw	r30, r26
    4746:	82 81       	ldd	r24, Z+2	; 0x02
    4748:	93 81       	ldd	r25, Z+3	; 0x03
    474a:	9c 01       	movw	r18, r24
    474c:	d9 01       	movw	r26, r18
    474e:	10 97       	sbiw	r26, 0x00	; 0
    4750:	a1 f6       	brne	.-88     	; 0x46fa <malloc+0x82>
    4752:	80 91 54 05 	lds	r24, 0x0554
    4756:	90 91 55 05 	lds	r25, 0x0555
    475a:	89 2b       	or	r24, r25
    475c:	41 f4       	brne	.+16     	; 0x476e <malloc+0xf6>
    475e:	80 91 9c 02 	lds	r24, 0x029C
    4762:	90 91 9d 02 	lds	r25, 0x029D
    4766:	90 93 55 05 	sts	0x0555, r25
    476a:	80 93 54 05 	sts	0x0554, r24
    476e:	40 91 9e 02 	lds	r20, 0x029E
    4772:	50 91 9f 02 	lds	r21, 0x029F
    4776:	41 15       	cp	r20, r1
    4778:	51 05       	cpc	r21, r1
    477a:	41 f4       	brne	.+16     	; 0x478c <malloc+0x114>
    477c:	4d b7       	in	r20, 0x3d	; 61
    477e:	5e b7       	in	r21, 0x3e	; 62
    4780:	80 91 9a 02 	lds	r24, 0x029A
    4784:	90 91 9b 02 	lds	r25, 0x029B
    4788:	48 1b       	sub	r20, r24
    478a:	59 0b       	sbc	r21, r25
    478c:	20 91 54 05 	lds	r18, 0x0554
    4790:	30 91 55 05 	lds	r19, 0x0555
    4794:	24 17       	cp	r18, r20
    4796:	35 07       	cpc	r19, r21
    4798:	b0 f4       	brcc	.+44     	; 0x47c6 <malloc+0x14e>
    479a:	ca 01       	movw	r24, r20
    479c:	82 1b       	sub	r24, r18
    479e:	93 0b       	sbc	r25, r19
    47a0:	86 17       	cp	r24, r22
    47a2:	97 07       	cpc	r25, r23
    47a4:	80 f0       	brcs	.+32     	; 0x47c6 <malloc+0x14e>
    47a6:	ab 01       	movw	r20, r22
    47a8:	4e 5f       	subi	r20, 0xFE	; 254
    47aa:	5f 4f       	sbci	r21, 0xFF	; 255
    47ac:	84 17       	cp	r24, r20
    47ae:	95 07       	cpc	r25, r21
    47b0:	50 f0       	brcs	.+20     	; 0x47c6 <malloc+0x14e>
    47b2:	42 0f       	add	r20, r18
    47b4:	53 1f       	adc	r21, r19
    47b6:	50 93 55 05 	sts	0x0555, r21
    47ba:	40 93 54 05 	sts	0x0554, r20
    47be:	f9 01       	movw	r30, r18
    47c0:	61 93       	st	Z+, r22
    47c2:	71 93       	st	Z+, r23
    47c4:	02 c0       	rjmp	.+4      	; 0x47ca <malloc+0x152>
    47c6:	e0 e0       	ldi	r30, 0x00	; 0
    47c8:	f0 e0       	ldi	r31, 0x00	; 0
    47ca:	cf 01       	movw	r24, r30
    47cc:	df 91       	pop	r29
    47ce:	cf 91       	pop	r28
    47d0:	08 95       	ret

000047d2 <free>:
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	00 97       	sbiw	r24, 0x00	; 0
    47d8:	09 f4       	brne	.+2      	; 0x47dc <free+0xa>
    47da:	50 c0       	rjmp	.+160    	; 0x487c <free+0xaa>
    47dc:	ec 01       	movw	r28, r24
    47de:	22 97       	sbiw	r28, 0x02	; 2
    47e0:	1b 82       	std	Y+3, r1	; 0x03
    47e2:	1a 82       	std	Y+2, r1	; 0x02
    47e4:	a0 91 56 05 	lds	r26, 0x0556
    47e8:	b0 91 57 05 	lds	r27, 0x0557
    47ec:	10 97       	sbiw	r26, 0x00	; 0
    47ee:	09 f1       	breq	.+66     	; 0x4832 <free+0x60>
    47f0:	40 e0       	ldi	r20, 0x00	; 0
    47f2:	50 e0       	ldi	r21, 0x00	; 0
    47f4:	ac 17       	cp	r26, r28
    47f6:	bd 07       	cpc	r27, r29
    47f8:	08 f1       	brcs	.+66     	; 0x483c <free+0x6a>
    47fa:	bb 83       	std	Y+3, r27	; 0x03
    47fc:	aa 83       	std	Y+2, r26	; 0x02
    47fe:	fe 01       	movw	r30, r28
    4800:	21 91       	ld	r18, Z+
    4802:	31 91       	ld	r19, Z+
    4804:	e2 0f       	add	r30, r18
    4806:	f3 1f       	adc	r31, r19
    4808:	ae 17       	cp	r26, r30
    480a:	bf 07       	cpc	r27, r31
    480c:	79 f4       	brne	.+30     	; 0x482c <free+0x5a>
    480e:	8d 91       	ld	r24, X+
    4810:	9c 91       	ld	r25, X
    4812:	11 97       	sbiw	r26, 0x01	; 1
    4814:	28 0f       	add	r18, r24
    4816:	39 1f       	adc	r19, r25
    4818:	2e 5f       	subi	r18, 0xFE	; 254
    481a:	3f 4f       	sbci	r19, 0xFF	; 255
    481c:	39 83       	std	Y+1, r19	; 0x01
    481e:	28 83       	st	Y, r18
    4820:	12 96       	adiw	r26, 0x02	; 2
    4822:	8d 91       	ld	r24, X+
    4824:	9c 91       	ld	r25, X
    4826:	13 97       	sbiw	r26, 0x03	; 3
    4828:	9b 83       	std	Y+3, r25	; 0x03
    482a:	8a 83       	std	Y+2, r24	; 0x02
    482c:	41 15       	cp	r20, r1
    482e:	51 05       	cpc	r21, r1
    4830:	71 f4       	brne	.+28     	; 0x484e <free+0x7c>
    4832:	d0 93 57 05 	sts	0x0557, r29
    4836:	c0 93 56 05 	sts	0x0556, r28
    483a:	20 c0       	rjmp	.+64     	; 0x487c <free+0xaa>
    483c:	12 96       	adiw	r26, 0x02	; 2
    483e:	8d 91       	ld	r24, X+
    4840:	9c 91       	ld	r25, X
    4842:	13 97       	sbiw	r26, 0x03	; 3
    4844:	ad 01       	movw	r20, r26
    4846:	00 97       	sbiw	r24, 0x00	; 0
    4848:	11 f0       	breq	.+4      	; 0x484e <free+0x7c>
    484a:	dc 01       	movw	r26, r24
    484c:	d3 cf       	rjmp	.-90     	; 0x47f4 <free+0x22>
    484e:	fa 01       	movw	r30, r20
    4850:	d3 83       	std	Z+3, r29	; 0x03
    4852:	c2 83       	std	Z+2, r28	; 0x02
    4854:	21 91       	ld	r18, Z+
    4856:	31 91       	ld	r19, Z+
    4858:	e2 0f       	add	r30, r18
    485a:	f3 1f       	adc	r31, r19
    485c:	ce 17       	cp	r28, r30
    485e:	df 07       	cpc	r29, r31
    4860:	69 f4       	brne	.+26     	; 0x487c <free+0xaa>
    4862:	88 81       	ld	r24, Y
    4864:	99 81       	ldd	r25, Y+1	; 0x01
    4866:	28 0f       	add	r18, r24
    4868:	39 1f       	adc	r19, r25
    486a:	2e 5f       	subi	r18, 0xFE	; 254
    486c:	3f 4f       	sbci	r19, 0xFF	; 255
    486e:	fa 01       	movw	r30, r20
    4870:	31 83       	std	Z+1, r19	; 0x01
    4872:	20 83       	st	Z, r18
    4874:	8a 81       	ldd	r24, Y+2	; 0x02
    4876:	9b 81       	ldd	r25, Y+3	; 0x03
    4878:	93 83       	std	Z+3, r25	; 0x03
    487a:	82 83       	std	Z+2, r24	; 0x02
    487c:	df 91       	pop	r29
    487e:	cf 91       	pop	r28
    4880:	08 95       	ret

00004882 <memset>:
    4882:	dc 01       	movw	r26, r24
    4884:	01 c0       	rjmp	.+2      	; 0x4888 <memset+0x6>
    4886:	6d 93       	st	X+, r22
    4888:	41 50       	subi	r20, 0x01	; 1
    488a:	50 40       	sbci	r21, 0x00	; 0
    488c:	e0 f7       	brcc	.-8      	; 0x4886 <memset+0x4>
    488e:	08 95       	ret

00004890 <_exit>:
    4890:	f8 94       	cli

00004892 <__stop_program>:
    4892:	ff cf       	rjmp	.-2      	; 0x4892 <__stop_program>
